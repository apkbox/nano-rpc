// Generated by the nanorpc protobuf plugin.
// If you make any local change, they will be lost.
// source: app_test.proto

#include "app_test.nanorpc.pb.h"

namespace app {

const char *ITestApp::GetInterfaceName() const {
  return "app.ITestApp";
}

void ITestApp::CallMethod(const nanorpc2::RpcCall &rpc_call, nanorpc2::RpcResult *rpc_result) {
  if (rpc_call.method() == "BoolValue") {
    bool result;
    result = impl_->BoolValue();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "IntValue") {
    bool result;
    result = impl_->IntValue();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "EnumValue") {
    bool result;
    result = impl_->EnumValue();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "StringValue") {
    bool result;
    result = impl_->StringValue();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "StructValue") {
    bool result;
    result = impl_->StructValue();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "SyncVoidMethod") {
    bool result;
    result = impl_->SyncVoidMethod();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "AsyncVoidMethod") {
    bool result;
    result = impl_->AsyncVoidMethod();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "SetStructReturnIntMethod") {
    bool result;
    result = impl_->SetStructReturnIntMethod();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "GetStructMethod") {
    bool result;
    result = impl_->GetStructMethod();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "MethodWithoutParameters0") {
    bool result;
    result = impl_->MethodWithoutParameters0();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "MethodWithoutParameters1") {
    bool result;
    result = impl_->MethodWithoutParameters1();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "MethodWithoutParameters2") {
    bool result;
    result = impl_->MethodWithoutParameters2();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "MethodWithoutParameters3") {
    bool result;
    result = impl_->MethodWithoutParameters3();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "MethodWithParameters0") {
    bool result;
    result = impl_->MethodWithParameters0();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "MethodWithParameters1") {
    bool result;
    result = impl_->MethodWithParameters1();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  } else if (rpc_call.method() == "MethodWithParameters2") {
    bool result;
    result = impl_->MethodWithParameters2();
    google::protobuf::BoolValue wrapper;
    wrapper.set_value(result);
    wrapper.SerializeToString(rpc_result->mutable_call_result()->mutable_value()); 
  }

}

}  // namespace app


