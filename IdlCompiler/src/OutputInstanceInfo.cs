// <summary>
// Describes instance parameters of output document.
// </summary>

namespace IdlCompiler
{
    using System;
    using System.IO;

    /// <summary>
    /// Describes a specific parameters of output for the given document.
    /// </summary>
    public class OutputInstanceInfo
    {
        /// <summary>
        /// </summary>
        /// <param name="outputInfo">
        /// </param>
        /// <param name="documentPath">
        /// </param>
        public OutputInstanceInfo(OutputInfo outputInfo, string documentPath)
        {
            OutputInfo = outputInfo;
            DocumentPath = documentPath;
        }

        /// <summary>
        /// Gets output that used to create instance.
        /// </summary>
        public OutputInfo OutputInfo { get; private set; }

        /// <summary>
        /// Gets document path including document file name.
        /// </summary>
        public string DocumentPath { get; private set; }

        /// <summary>
        /// Gets document file name.
        /// </summary>
        public string DocumentName
        {
            get { return Path.GetFileName(DocumentPath); }
        }

        /// <summary>
        /// Gets document name without extension.
        /// </summary>
        public string DocumentBaseName
        {
            get { return Path.GetFileNameWithoutExtension(DocumentPath); }
        }

        /// <summary>
        /// Gets output file name generated by the associated document.
        /// </summary>
        public string OutputName
        {
            get { return DocumentBaseName + OutputInfo.FileSuffix; }
        }

        /// <summary>
        /// Gets the C/C++ identifier that can be used as header file guard.
        /// </summary>
        public string GuardName
        {
            get
            {
                string guardName = OutputName;
                for( int i = 0; i < guardName.Length; i++ )
                {
                    char c = guardName[i];
                    if((!Char.IsLetterOrDigit(c) || c > 127) && c != '_')
                    {
                        guardName = guardName.Replace(c, '_');
                    }
                }

                return guardName.ToUpperInvariant();
            }
        }
    }
}