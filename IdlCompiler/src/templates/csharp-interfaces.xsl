<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
				version="1.0" 
				xml:space="default"
				xmlns:xmlidl="urn:odgs-oce-net:schemas-nano-rpc-idl" >
	<xsl:param name="_template_name" />
	<xsl:param name="_document_name" />

	<xsl:output method="text" encoding="utf-8" />

	<xsl:variable name="typemap" select="document('csharp-types.xml')" />
	<xsl:include href="common.xsl" />

	<xsl:template match="/xmlidl:idl">
		<xsl:text>// Generated by the IdlCompiler. DO NOT EDIT!&#10;</xsl:text>
		<xsl:text>// source: </xsl:text><xsl:value-of select="$_document_name"/><xsl:text>&#10;</xsl:text>
		<xsl:text>// template: </xsl:text><xsl:value-of select="$_template_name"/><xsl:text>&#10;</xsl:text>

		<xsl:text>&#10;</xsl:text>

		<xsl:if test="boolean(@namespace)">
			<xsl:text>namespace </xsl:text>
			<xsl:value-of select="@namespace" />
			<xsl:text>&#10;{&#10;&#10;</xsl:text>
		</xsl:if>
		
		<xsl:apply-templates select="xmlidl:interfaces/xmlidl:interface" />

		<xsl:if test="boolean(@namespace)">
			<xsl:text>} // namespace&#10;&#10;</xsl:text>
		</xsl:if>
	</xsl:template>

	<xsl:template match="xmlidl:interface" >
		<xsl:if test="@source='true' or @source='yes' or  @source='1'">
			<xsl:text>&#09;// Source interface&#10;</xsl:text>
		</xsl:if>
		<xsl:text>&#09;public interface </xsl:text>
		<xsl:value-of select="@name" />
		<xsl:text>&#10;&#09;{&#10;</xsl:text>
		<xsl:apply-templates select="xmlidl:property" />
		<xsl:apply-templates select="xmlidl:method" />
		<xsl:text>&#09;}&#10;&#10;</xsl:text>
	</xsl:template>

	<xsl:template match="xmlidl:interface/xmlidl:property" >
		<xsl:text>&#09;&#09;</xsl:text>
		<xsl:call-template name="map_type" /><xsl:text> </xsl:text><xsl:value-of select="@name" />
		<xsl:text> { </xsl:text>
		<xsl:call-template name="generate_property_accessors" />
		<xsl:text> }&#10;</xsl:text>
	</xsl:template>

	<xsl:template name="generate_property_accessors" >
		<xsl:choose>
			<xsl:when test="@readonly">
				<xsl:text>get;</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>get; set;</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xsl:template match="xmlidl:interface/xmlidl:method" >
		<xsl:text>&#09;&#09;</xsl:text>
		<xsl:call-template name="generate_return_type_spec" />
		<xsl:text> </xsl:text>
		<xsl:value-of select="@name" />
		<xsl:text>(</xsl:text><xsl:apply-templates select="xmlidl:arguments" /><xsl:text>);</xsl:text>
		<xsl:text>&#10;</xsl:text>
	</xsl:template>

	<xsl:template match="xmlidl:argument" >
		<xsl:call-template name="map_type" />
		<xsl:text> </xsl:text>
		<xsl:value-of select="@name" />
		<xsl:if test="position() != last()">
			<xsl:text>, </xsl:text>
		</xsl:if>
	</xsl:template>

	<xsl:template name="generate_return_type_spec" >
		<xsl:choose>
			<xsl:when test="count( xmlidl:returns ) != 0">
				<xsl:call-template name="map_type" >
					<xsl:with-param name="type_to_map" select="xmlidl:returns/@type" />
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>void</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

</xsl:stylesheet>
