<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
			version="1.0"
			xml:space="default"
			xmlns:idl="urn:odgs-oce-net:schemas-nano-rpc-idl"
			xmlns:pb="urn:odgs-oce-net:schemas-nano-rpc-idl-pb">
	<xsl:param name="_template_name" />
	<xsl:param name="_document_name" />

	<xsl:output method="text" encoding="utf-8" />

	<xsl:variable name="typemap" select="document('protobuf-types.xml')" />
	<xsl:include href="common.xsl" />

	<xsl:template match="/idl:idl">
		<xsl:text>// Generated by the IdlCompiler. DO NOT EDIT!&#10;</xsl:text>
		<xsl:text>// source: </xsl:text><xsl:value-of select="$_document_name"/><xsl:text>&#10;</xsl:text>
		<xsl:text>// template: </xsl:text><xsl:value-of select="$_template_name"/><xsl:text>&#10;</xsl:text>

		<xsl:text>&#10;</xsl:text>

		<xsl:if test="boolean(@namespace)">
			<xsl:text>package </xsl:text>
			<xsl:value-of select="@namespace" />
			<xsl:text>;&#10;&#10;</xsl:text>
		</xsl:if>

		<xsl:apply-templates select="idl:enumerations/idl:enum" />
		<xsl:apply-templates select="idl:types/idl:type" />
	</xsl:template>

	<xsl:template match="idl:enum" >
		<xsl:text>enum </xsl:text><xsl:value-of select="@name" /><xsl:text> {&#10;</xsl:text>
		<xsl:apply-templates select="idl:field" />
		<xsl:text>}&#10;&#10;</xsl:text>
	</xsl:template>

	<xsl:template match="idl:enum/idl:field" >
		<xsl:text>&#09;</xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text> = </xsl:text>
		<xsl:choose>
			<xsl:when test="not(@value)">
				<xsl:value-of select="position()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="@value"/>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:text>;&#10;</xsl:text>
	</xsl:template>

	<xsl:template match="idl:type" >
		<xsl:text>message </xsl:text><xsl:value-of select="@name" /><xsl:text> {&#10;</xsl:text>
		<xsl:apply-templates select="idl:field" />
		<xsl:text>}&#10;&#10;</xsl:text>
	</xsl:template>

	<xsl:template match="idl:type/idl:field" >
		<xsl:text>&#09;</xsl:text>
		<xsl:call-template name="field_rule" />
		<xsl:text> </xsl:text>
		<xsl:call-template name="map_type" />
		<xsl:text> </xsl:text>
		<xsl:value-of select="@name" />
		<xsl:text> = </xsl:text>
		<xsl:choose>
			<xsl:when test="not(@pb:position)">
				<xsl:value-of select="position()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="@pb:position"/>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:text>;&#10;</xsl:text>
	</xsl:template>

	<xsl:template name="field_rule" >
		<xsl:choose>
			<!--
				This is a not schema-aware processor, so we cannot rely on datatype of 
				attributes and elements declared in schema!
			-->
			<xsl:when test="@array='true' or @array='yes' or @array='1'">
				<xsl:if test="boolean(@pb:field)">
					<xsl:message terminate="yes">'array' and 'field' attributes cannot be specified together.</xsl:message>
				</xsl:if>
				<xsl:text>repeated</xsl:text>
			</xsl:when>

			<xsl:otherwise>
				<xsl:choose>
					<xsl:when test="not(@pb:field)">
						<xsl:text>optional</xsl:text>
					</xsl:when>

					<xsl:otherwise>
						<xsl:value-of select="@pb:field"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

</xsl:stylesheet>
