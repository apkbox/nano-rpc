// Generated by the nanorpc protobuf plugin.
// If you make any local change, they will be lost.
// source: hello_world.proto

#include "hello_world.nanorpc.pb.h"
#include "google/protobuf/wrappers.pb.h"

namespace hello_world {

const std::string OrderDeskEvents_Stub::kServiceName("hello_world.OrderDeskEvents");

const std::string &OrderDeskEvents_Stub::GetInterfaceName() const {
  return kServiceName;
}

bool OrderDeskEvents_Stub::CallMethod(const nanorpc::RpcCall &rpc_call, nanorpc::RpcResult *rpc_result) {
  if (rpc_call.method() == "OrderStatusChanged") {
    OrderDeskEvents_OrderStatusChanged_args__ args__;
    args__.ParseFromString(rpc_call.call_data());

    uint32_t order = args__.order();
    bool is_ready = args__.is_ready();
    bool reading_taken = args__.reading_taken();
    bool drink_taken = args__.drink_taken();

    impl_->OrderStatusChanged(order, is_ready, reading_taken, drink_taken);
    return true;
  }

  // TODO: Here should be unknown method error stored into rpc_result.
  // TODO: Also an exception (code above must be guarded) result.

  return true;
}

const std::string OrderDesk_Stub::kServiceName("hello_world.OrderDesk");

const std::string &OrderDesk_Stub::GetInterfaceName() const {
  return kServiceName;
}

bool OrderDesk_Stub::CallMethod(const nanorpc::RpcCall &rpc_call, nanorpc::RpcResult *rpc_result) {
  if (rpc_call.method() == "CreateOrder") {
    OrderRequest args__;
    args__.ParseFromString(rpc_call.call_data());

    DrinkType drink = args__.drink();
    ReadingType reading = args__.reading();

    int32_t out__;
    google::protobuf::Int32Value out_pb__;
    out__ = impl_->CreateOrder(drink, reading);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "IsOrderReady") {
    google::protobuf::Int32Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    int32_t value = in_arg__.value();

    bool out__;
    google::protobuf::BoolValue out_pb__;
    out__ = impl_->IsOrderReady(value);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "GetDrink") {
    google::protobuf::Int32Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    int32_t value = in_arg__.value();

    DrinkType out__;
    DrinkType_wrapper__ out_pb__;
    out__ = impl_->GetDrink(value);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "GetReading") {
    google::protobuf::Int32Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    int32_t value = in_arg__.value();

    ReadingType out__;
    ReadingType_wrapper__ out_pb__;
    out__ = impl_->GetReading(value);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  }

  // TODO: Here should be unknown method error stored into rpc_result.
  // TODO: Also an exception (code above must be guarded) result.

  return true;
}

void OrderDeskEvents_EventProxy::OrderStatusChanged(uint32_t order, bool is_ready, bool reading_taken, bool drink_taken) {
  nanorpc::RpcCall rpc_call__;
  rpc_call__.set_service("hello_world.OrderDeskEvents");
  rpc_call__.set_method("OrderStatusChanged");
  OrderDeskEvents_OrderStatusChanged_args__ args__;
  args__.set_order(order);
  args__.set_is_ready(is_ready);
  args__.set_reading_taken(reading_taken);
  args__.set_drink_taken(drink_taken);
  args__.SerializeToString(rpc_call__.mutable_call_data());

  event_source_->SendEvent(rpc_call__);
}

OrderDesk_Proxy::~OrderDesk_Proxy() {
  if (object_id_ != 0) {
    try {
      nanorpc::RpcCall rpc_call;
      rpc_call.set_service("NanoRpc.ObjectManagerService");
      rpc_call.set_method("Delete");
      nanorpc::RpcObject rpc_object;
      rpc_object.set_object_id(object_id_);
      rpc_object.SerializeToString(rpc_call.mutable_call_data());
      client_->CallMethod(rpc_call, nullptr);
    }
    catch (...) {
      // not yet supported
    }
  }
}

int32_t OrderDesk_Proxy::CreateOrder(DrinkType drink, ReadingType reading) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("hello_world.OrderDesk");
  }

  rpc_call__.set_method("CreateOrder");
  OrderRequest args__;
  args__.set_drink(drink);
  args__.set_reading(reading);
  args__.SerializeToString(rpc_call__.mutable_call_data());

  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  google::protobuf::Int32Value out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

bool OrderDesk_Proxy::IsOrderReady(int32_t value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("hello_world.OrderDesk");
  }

  rpc_call__.set_method("IsOrderReady");
  google::protobuf::Int32Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  google::protobuf::BoolValue out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

DrinkType OrderDesk_Proxy::GetDrink(int32_t value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("hello_world.OrderDesk");
  }

  rpc_call__.set_method("GetDrink");
  google::protobuf::Int32Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  DrinkType_wrapper__ out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

ReadingType OrderDesk_Proxy::GetReading(int32_t value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("hello_world.OrderDesk");
  }

  rpc_call__.set_method("GetReading");
  google::protobuf::Int32Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  ReadingType_wrapper__ out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

}  // namespace hello_world


