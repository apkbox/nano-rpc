// Generated by the nanorpc protobuf plugin.
// If you make any local change, they will be lost.
// source: hello_world.proto

#include "hello_world.nanorpc.pb.h"
#include "google/protobuf/wrappers.pb.h"

namespace hello_world {

const std::string OrderDesk_Stub::kServiceName("hello_world.OrderDesk");

const std::string &OrderDesk_Stub::GetInterfaceName() const {
  return kServiceName;
}

bool OrderDesk_Stub::CallMethod(const nanorpc::RpcCall &rpc_call, nanorpc::RpcResult *rpc_result) {
  if (rpc_call.method() == "CreateOrder") {
    OrderRequest args__;
    args__.ParseFromString(rpc_call.call_data());

    DrinkType drink = args__.drink();
    ReadingType reading = args__.reading();

    int32_t out__;
    google::protobuf::Int32Value out_pb__;
    out__ = impl_->CreateOrder(drink, reading);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "IsOrderReady") {
    google::protobuf::Int32Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    int32_t value = in_arg__.value();

    bool out__;
    google::protobuf::BoolValue out_pb__;
    out__ = impl_->IsOrderReady(value);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "GetDrink") {
    google::protobuf::Int32Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    int32_t value = in_arg__.value();

    DrinkType out__;
    DrinkType_wrapper__ out_pb__;
    out__ = impl_->GetDrink(value);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "GetReading") {
    google::protobuf::Int32Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    int32_t value = in_arg__.value();

    ReadingType out__;
    ReadingType_wrapper__ out_pb__;
    out__ = impl_->GetReading(value);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  }

  // TODO: Here should be unknown method error stored into rpc_result.
  // TODO: Also an exception (code above must be guarded) result.

  return true;
}

OrderDesk_Proxy::~OrderDesk_Proxy() {
  if (object_id_ != 0) {
    try {
      nanorpc::RpcMessage rpc_message;
      rpc_message.mutable_call()->set_service("NanoRpc.ObjectManagerService");
      rpc_message.mutable_call()->set_method("Delete");
      nanorpc::RpcObject rpc_object;
      rpc_object.set_object_id(object_id_);
      rpc_object.SerializeToString(rpc_message.mutable_call()->mutable_call_data());
      client_->Send(rpc_message);
    }
    catch (...) {
      // not yet supported
    }
  }
}

int32_t OrderDesk_Proxy::CreateOrder(DrinkType drink, ReadingType reading) {
  nanorpc::RpcMessage rpc_message__;
  if (object_id_ != 0) {
    rpc_message__.mutable_call()->set_object_id(object_id_);
  } else {
    rpc_message__.mutable_call()->set_service("hello_world.OrderDesk");
  }

  rpc_message__.mutable_call()->set_method("CreateOrder");
  OrderRequest args__;
  args__.set_drink(drink);
  args__.set_reading(reading);
  args__.SerializeToString(rpc_message__.mutable_call()->mutable_call_data());

  nanorpc::RpcResult rpc_result__;
  client_->SendWithReply(rpc_message__, &rpc_result__);
  google::protobuf::Int32Value out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

bool OrderDesk_Proxy::IsOrderReady(int32_t value) {
  nanorpc::RpcMessage rpc_message__;
  if (object_id_ != 0) {
    rpc_message__.mutable_call()->set_object_id(object_id_);
  } else {
    rpc_message__.mutable_call()->set_service("hello_world.OrderDesk");
  }

  rpc_message__.mutable_call()->set_method("IsOrderReady");
  google::protobuf::Int32Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_message__.mutable_call()->mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->SendWithReply(rpc_message__, &rpc_result__);
  google::protobuf::BoolValue out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

DrinkType OrderDesk_Proxy::GetDrink(int32_t value) {
  nanorpc::RpcMessage rpc_message__;
  if (object_id_ != 0) {
    rpc_message__.mutable_call()->set_object_id(object_id_);
  } else {
    rpc_message__.mutable_call()->set_service("hello_world.OrderDesk");
  }

  rpc_message__.mutable_call()->set_method("GetDrink");
  google::protobuf::Int32Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_message__.mutable_call()->mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->SendWithReply(rpc_message__, &rpc_result__);
  DrinkType_wrapper__ out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

ReadingType OrderDesk_Proxy::GetReading(int32_t value) {
  nanorpc::RpcMessage rpc_message__;
  if (object_id_ != 0) {
    rpc_message__.mutable_call()->set_object_id(object_id_);
  } else {
    rpc_message__.mutable_call()->set_service("hello_world.OrderDesk");
  }

  rpc_message__.mutable_call()->set_method("GetReading");
  google::protobuf::Int32Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_message__.mutable_call()->mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->SendWithReply(rpc_message__, &rpc_result__);
  ReadingType_wrapper__ out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

}  // namespace hello_world


