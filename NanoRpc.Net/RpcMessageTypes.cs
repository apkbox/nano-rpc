// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessageTypes.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NanoRpc {

  /// <summary>Holder for reflection information generated from RpcMessageTypes.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class RpcMessageTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for RpcMessageTypes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcMessageTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVScGNNZXNzYWdlVHlwZXMucHJvdG8SB05hbm9ScGMiHAoLRG91YmxlVmFs",
            "dWUSDQoFdmFsdWUYASABKAEiGwoKRmxvYXRWYWx1ZRINCgV2YWx1ZRgBIAEo",
            "AiIbCgpJbnQ2NFZhbHVlEg0KBXZhbHVlGAEgASgDIhwKC1VJbnQ2NFZhbHVl",
            "Eg0KBXZhbHVlGAEgASgEIhsKCkludDMyVmFsdWUSDQoFdmFsdWUYASABKAUi",
            "HAoLVUludDMyVmFsdWUSDQoFdmFsdWUYASABKA0iGgoJQm9vbFZhbHVlEg0K",
            "BXZhbHVlGAEgASgIIhwKC1N0cmluZ1ZhbHVlEg0KBXZhbHVlGAEgASgJIhsK",
            "CkJ5dGVzVmFsdWUSDQoFdmFsdWUYASABKAwiHAoLU0ludDMyVmFsdWUSDQoF",
            "dmFsdWUYASABKBEiHAoLU0ludDY0VmFsdWUSDQoFdmFsdWUYASABKBIiHQoM",
            "Rml4ZWQzMlZhbHVlEg0KBXZhbHVlGAEgASgHIh0KDEZpeGVkNjRWYWx1ZRIN",
            "CgV2YWx1ZRgBIAEoBiIeCg1TRml4ZWQzMlZhbHVlEg0KBXZhbHVlGAEgASgP",
            "Ih4KDVNGaXhlZDY0VmFsdWUSDQoFdmFsdWUYASABKBAizAUKDFJwY1BhcmFt",
            "ZXRlchIoCgtwcm90b192YWx1ZRgBIAEoCzITLk5hbm9ScGMuQnl0ZXNWYWx1",
            "ZRImCgpib29sX3ZhbHVlGAIgASgLMhIuTmFub1JwYy5Cb29sVmFsdWUSKAoL",
            "aW50MzJfdmFsdWUYAyABKAsyEy5OYW5vUnBjLkludDMyVmFsdWUSKAoLaW50",
            "NjRfdmFsdWUYBCABKAsyEy5OYW5vUnBjLkludDY0VmFsdWUSKgoMdWludDMy",
            "X3ZhbHVlGAUgASgLMhQuTmFub1JwYy5VSW50MzJWYWx1ZRIqCgx1aW50NjRf",
            "dmFsdWUYBiABKAsyFC5OYW5vUnBjLlVJbnQ2NFZhbHVlEioKDHNpbnQzMl92",
            "YWx1ZRgHIAEoCzIULk5hbm9ScGMuU0ludDMyVmFsdWUSKgoMc2ludDY0X3Zh",
            "bHVlGAggASgLMhQuTmFub1JwYy5TSW50NjRWYWx1ZRIsCg1maXhlZDMyX3Zh",
            "bHVlGAkgASgLMhUuTmFub1JwYy5GaXhlZDMyVmFsdWUSLAoNZml4ZWQ2NF92",
            "YWx1ZRgKIAEoCzIVLk5hbm9ScGMuRml4ZWQ2NFZhbHVlEi4KDnNmaXhlZDMy",
            "X3ZhbHVlGAsgASgLMhYuTmFub1JwYy5TRml4ZWQzMlZhbHVlEi4KDnNmaXhl",
            "ZDY0X3ZhbHVlGAwgASgLMhYuTmFub1JwYy5TRml4ZWQ2NFZhbHVlEigKC2Zs",
            "b2F0X3ZhbHVlGA0gASgLMhMuTmFub1JwYy5GbG9hdFZhbHVlEioKDGRvdWJs",
            "ZV92YWx1ZRgOIAEoCzIULk5hbm9ScGMuRG91YmxlVmFsdWUSKgoMc3RyaW5n",
            "X3ZhbHVlGA8gASgLMhQuTmFub1JwYy5TdHJpbmdWYWx1ZRIPCgdpc19udWxs",
            "GBAgASgIEhcKD29iamVjdF9pZF92YWx1ZRgRIAEoDSJyCglScGNSZXN1bHQS",
            "IgoGc3RhdHVzGAEgASgOMhIuTmFub1JwYy5ScGNTdGF0dXMSFQoNZXJyb3Jf",
            "bWVzc2FnZRgCIAEoCRIqCgtjYWxsX3Jlc3VsdBgDIAEoCzIVLk5hbm9ScGMu",
            "UnBjUGFyYW1ldGVyIoABCgdScGNDYWxsEg8KB3NlcnZpY2UYASABKAkSDgoG",
            "bWV0aG9kGAIgASgJEikKCnBhcmFtZXRlcnMYAyADKAsyFS5OYW5vUnBjLlJw",
            "Y1BhcmFtZXRlchIWCg5leHBlY3RzX3Jlc3VsdBgEIAEoCBIRCglvYmplY3Rf",
            "aWQYBSABKA0iXAoKUnBjTWVzc2FnZRIKCgJpZBgBIAEoBRIeCgRjYWxsGAIg",
            "ASgLMhAuTmFub1JwYy5ScGNDYWxsEiIKBnJlc3VsdBgDIAEoCzISLk5hbm9S",
            "cGMuUnBjUmVzdWx0KpYBCglScGNTdGF0dXMSEAoMUnBjU3VjY2VlZGVkEAAS",
            "FQoRUnBjQ2hhbm5lbEZhaWx1cmUQARIUChBScGNVbmtub3duTWV0aG9kEAIS",
            "FAoQUnBjUHJvdG9jb2xFcnJvchADEhcKE1JwY1Vua25vd25JbnRlcmZhY2UQ",
            "BBIbChdScGNJbnZhbGlkQ2FsbFBhcmFtZXRlchAFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NanoRpc.RpcStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.DoubleValue), global::NanoRpc.DoubleValue.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.FloatValue), global::NanoRpc.FloatValue.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.Int64Value), global::NanoRpc.Int64Value.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.UInt64Value), global::NanoRpc.UInt64Value.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.Int32Value), global::NanoRpc.Int32Value.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.UInt32Value), global::NanoRpc.UInt32Value.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.BoolValue), global::NanoRpc.BoolValue.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.StringValue), global::NanoRpc.StringValue.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.BytesValue), global::NanoRpc.BytesValue.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.SInt32Value), global::NanoRpc.SInt32Value.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.SInt64Value), global::NanoRpc.SInt64Value.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.Fixed32Value), global::NanoRpc.Fixed32Value.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.Fixed64Value), global::NanoRpc.Fixed64Value.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.SFixed32Value), global::NanoRpc.SFixed32Value.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.SFixed64Value), global::NanoRpc.SFixed64Value.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.RpcParameter), global::NanoRpc.RpcParameter.Parser, new[]{ "ProtoValue", "BoolValue", "Int32Value", "Int64Value", "Uint32Value", "Uint64Value", "Sint32Value", "Sint64Value", "Fixed32Value", "Fixed64Value", "Sfixed32Value", "Sfixed64Value", "FloatValue", "DoubleValue", "StringValue", "IsNull", "ObjectIdValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.RpcResult), global::NanoRpc.RpcResult.Parser, new[]{ "Status", "ErrorMessage", "CallResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.RpcCall), global::NanoRpc.RpcCall.Parser, new[]{ "Service", "Method", "Parameters", "ExpectsResult", "ObjectId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NanoRpc.RpcMessage), global::NanoRpc.RpcMessage.Parser, new[]{ "Id", "Call", "Result" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RpcStatus {
    [pbr::OriginalName("RpcSucceeded")] RpcSucceeded = 0,
    [pbr::OriginalName("RpcChannelFailure")] RpcChannelFailure = 1,
    [pbr::OriginalName("RpcUnknownMethod")] RpcUnknownMethod = 2,
    [pbr::OriginalName("RpcProtocolError")] RpcProtocolError = 3,
    [pbr::OriginalName("RpcUnknownInterface")] RpcUnknownInterface = 4,
    [pbr::OriginalName("RpcInvalidCallParameter")] RpcInvalidCallParameter = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  Wrapper message for `double`.
  ///
  ///  The JSON representation for `DoubleValue` is JSON number.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DoubleValue : pb::IMessage<DoubleValue> {
    private static readonly pb::MessageParser<DoubleValue> _parser = new pb::MessageParser<DoubleValue>(() => new DoubleValue());
    public static pb::MessageParser<DoubleValue> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DoubleValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DoubleValue(DoubleValue other) : this() {
      value_ = other.value_;
    }

    public DoubleValue Clone() {
      return new DoubleValue(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private double value_;
    /// <summary>
    ///  The double value.
    /// </summary>
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DoubleValue);
    }

    public bool Equals(DoubleValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0D) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(DoubleValue other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Wrapper message for `float`.
  ///
  ///  The JSON representation for `FloatValue` is JSON number.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FloatValue : pb::IMessage<FloatValue> {
    private static readonly pb::MessageParser<FloatValue> _parser = new pb::MessageParser<FloatValue>(() => new FloatValue());
    public static pb::MessageParser<FloatValue> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FloatValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FloatValue(FloatValue other) : this() {
      value_ = other.value_;
    }

    public FloatValue Clone() {
      return new FloatValue(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private float value_;
    /// <summary>
    ///  The float value.
    /// </summary>
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FloatValue);
    }

    public bool Equals(FloatValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0F) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(FloatValue other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Wrapper message for `int64`.
  ///
  ///  The JSON representation for `Int64Value` is JSON string.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Int64Value : pb::IMessage<Int64Value> {
    private static readonly pb::MessageParser<Int64Value> _parser = new pb::MessageParser<Int64Value>(() => new Int64Value());
    public static pb::MessageParser<Int64Value> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Int64Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Int64Value(Int64Value other) : this() {
      value_ = other.value_;
    }

    public Int64Value Clone() {
      return new Int64Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    /// <summary>
    ///  The int64 value.
    /// </summary>
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Int64Value);
    }

    public bool Equals(Int64Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      return size;
    }

    public void MergeFrom(Int64Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Wrapper message for `uint64`.
  ///
  ///  The JSON representation for `UInt64Value` is JSON string.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UInt64Value : pb::IMessage<UInt64Value> {
    private static readonly pb::MessageParser<UInt64Value> _parser = new pb::MessageParser<UInt64Value>(() => new UInt64Value());
    public static pb::MessageParser<UInt64Value> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UInt64Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UInt64Value(UInt64Value other) : this() {
      value_ = other.value_;
    }

    public UInt64Value Clone() {
      return new UInt64Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private ulong value_;
    /// <summary>
    ///  The uint64 value.
    /// </summary>
    public ulong Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UInt64Value);
    }

    public bool Equals(UInt64Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0UL) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Value);
      }
      return size;
    }

    public void MergeFrom(UInt64Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0UL) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Wrapper message for `int32`.
  ///
  ///  The JSON representation for `Int32Value` is JSON number.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Int32Value : pb::IMessage<Int32Value> {
    private static readonly pb::MessageParser<Int32Value> _parser = new pb::MessageParser<Int32Value>(() => new Int32Value());
    public static pb::MessageParser<Int32Value> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Int32Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Int32Value(Int32Value other) : this() {
      value_ = other.value_;
    }

    public Int32Value Clone() {
      return new Int32Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    /// <summary>
    ///  The int32 value.
    /// </summary>
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Int32Value);
    }

    public bool Equals(Int32Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    public void MergeFrom(Int32Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Wrapper message for `uint32`.
  ///
  ///  The JSON representation for `UInt32Value` is JSON number.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UInt32Value : pb::IMessage<UInt32Value> {
    private static readonly pb::MessageParser<UInt32Value> _parser = new pb::MessageParser<UInt32Value>(() => new UInt32Value());
    public static pb::MessageParser<UInt32Value> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UInt32Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UInt32Value(UInt32Value other) : this() {
      value_ = other.value_;
    }

    public UInt32Value Clone() {
      return new UInt32Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    /// <summary>
    ///  The uint32 value.
    /// </summary>
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UInt32Value);
    }

    public bool Equals(UInt32Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    public void MergeFrom(UInt32Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Wrapper message for `bool`.
  ///
  ///  The JSON representation for `BoolValue` is JSON `true` and `false`.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BoolValue : pb::IMessage<BoolValue> {
    private static readonly pb::MessageParser<BoolValue> _parser = new pb::MessageParser<BoolValue>(() => new BoolValue());
    public static pb::MessageParser<BoolValue> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BoolValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BoolValue(BoolValue other) : this() {
      value_ = other.value_;
    }

    public BoolValue Clone() {
      return new BoolValue(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    /// <summary>
    ///  The bool value.
    /// </summary>
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BoolValue);
    }

    public bool Equals(BoolValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(BoolValue other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Wrapper message for `string`.
  ///
  ///  The JSON representation for `StringValue` is JSON string.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StringValue : pb::IMessage<StringValue> {
    private static readonly pb::MessageParser<StringValue> _parser = new pb::MessageParser<StringValue>(() => new StringValue());
    public static pb::MessageParser<StringValue> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public StringValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    public StringValue(StringValue other) : this() {
      value_ = other.value_;
    }

    public StringValue Clone() {
      return new StringValue(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    /// <summary>
    ///  The string value.
    /// </summary>
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as StringValue);
    }

    public bool Equals(StringValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    public void MergeFrom(StringValue other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Wrapper message for `bytes`.
  ///
  ///  The JSON representation for `BytesValue` is JSON string.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BytesValue : pb::IMessage<BytesValue> {
    private static readonly pb::MessageParser<BytesValue> _parser = new pb::MessageParser<BytesValue>(() => new BytesValue());
    public static pb::MessageParser<BytesValue> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BytesValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BytesValue(BytesValue other) : this() {
      value_ = other.value_;
    }

    public BytesValue Clone() {
      return new BytesValue(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    /// <summary>
    ///  The bytes value.
    /// </summary>
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BytesValue);
    }

    public bool Equals(BytesValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    public void MergeFrom(BytesValue other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SInt32Value : pb::IMessage<SInt32Value> {
    private static readonly pb::MessageParser<SInt32Value> _parser = new pb::MessageParser<SInt32Value>(() => new SInt32Value());
    public static pb::MessageParser<SInt32Value> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SInt32Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SInt32Value(SInt32Value other) : this() {
      value_ = other.value_;
    }

    public SInt32Value Clone() {
      return new SInt32Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SInt32Value);
    }

    public bool Equals(SInt32Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Value);
      }
      return size;
    }

    public void MergeFrom(SInt32Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SInt64Value : pb::IMessage<SInt64Value> {
    private static readonly pb::MessageParser<SInt64Value> _parser = new pb::MessageParser<SInt64Value>(() => new SInt64Value());
    public static pb::MessageParser<SInt64Value> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SInt64Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SInt64Value(SInt64Value other) : this() {
      value_ = other.value_;
    }

    public SInt64Value Clone() {
      return new SInt64Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SInt64Value);
    }

    public bool Equals(SInt64Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Value);
      }
      return size;
    }

    public void MergeFrom(SInt64Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Fixed32Value : pb::IMessage<Fixed32Value> {
    private static readonly pb::MessageParser<Fixed32Value> _parser = new pb::MessageParser<Fixed32Value>(() => new Fixed32Value());
    public static pb::MessageParser<Fixed32Value> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Fixed32Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Fixed32Value(Fixed32Value other) : this() {
      value_ = other.value_;
    }

    public Fixed32Value Clone() {
      return new Fixed32Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Fixed32Value);
    }

    public bool Equals(Fixed32Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Fixed32Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Value = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Fixed64Value : pb::IMessage<Fixed64Value> {
    private static readonly pb::MessageParser<Fixed64Value> _parser = new pb::MessageParser<Fixed64Value>(() => new Fixed64Value());
    public static pb::MessageParser<Fixed64Value> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Fixed64Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Fixed64Value(Fixed64Value other) : this() {
      value_ = other.value_;
    }

    public Fixed64Value Clone() {
      return new Fixed64Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private ulong value_;
    public ulong Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Fixed64Value);
    }

    public bool Equals(Fixed64Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0UL) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(Fixed64Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0UL) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Value = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SFixed32Value : pb::IMessage<SFixed32Value> {
    private static readonly pb::MessageParser<SFixed32Value> _parser = new pb::MessageParser<SFixed32Value>(() => new SFixed32Value());
    public static pb::MessageParser<SFixed32Value> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SFixed32Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SFixed32Value(SFixed32Value other) : this() {
      value_ = other.value_;
    }

    public SFixed32Value Clone() {
      return new SFixed32Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SFixed32Value);
    }

    public bool Equals(SFixed32Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(SFixed32Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Value = input.ReadSFixed32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SFixed64Value : pb::IMessage<SFixed64Value> {
    private static readonly pb::MessageParser<SFixed64Value> _parser = new pb::MessageParser<SFixed64Value>(() => new SFixed64Value());
    public static pb::MessageParser<SFixed64Value> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SFixed64Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SFixed64Value(SFixed64Value other) : this() {
      value_ = other.value_;
    }

    public SFixed64Value Clone() {
      return new SFixed64Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SFixed64Value);
    }

    public bool Equals(SFixed64Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(SFixed64Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Value = input.ReadSFixed64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcParameter : pb::IMessage<RpcParameter> {
    private static readonly pb::MessageParser<RpcParameter> _parser = new pb::MessageParser<RpcParameter>(() => new RpcParameter());
    public static pb::MessageParser<RpcParameter> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RpcParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RpcParameter(RpcParameter other) : this() {
      ProtoValue = other.protoValue_ != null ? other.ProtoValue.Clone() : null;
      BoolValue = other.boolValue_ != null ? other.BoolValue.Clone() : null;
      Int32Value = other.int32Value_ != null ? other.Int32Value.Clone() : null;
      Int64Value = other.int64Value_ != null ? other.Int64Value.Clone() : null;
      Uint32Value = other.uint32Value_ != null ? other.Uint32Value.Clone() : null;
      Uint64Value = other.uint64Value_ != null ? other.Uint64Value.Clone() : null;
      Sint32Value = other.sint32Value_ != null ? other.Sint32Value.Clone() : null;
      Sint64Value = other.sint64Value_ != null ? other.Sint64Value.Clone() : null;
      Fixed32Value = other.fixed32Value_ != null ? other.Fixed32Value.Clone() : null;
      Fixed64Value = other.fixed64Value_ != null ? other.Fixed64Value.Clone() : null;
      Sfixed32Value = other.sfixed32Value_ != null ? other.Sfixed32Value.Clone() : null;
      Sfixed64Value = other.sfixed64Value_ != null ? other.Sfixed64Value.Clone() : null;
      FloatValue = other.floatValue_ != null ? other.FloatValue.Clone() : null;
      DoubleValue = other.doubleValue_ != null ? other.DoubleValue.Clone() : null;
      StringValue = other.stringValue_ != null ? other.StringValue.Clone() : null;
      isNull_ = other.isNull_;
      objectIdValue_ = other.objectIdValue_;
    }

    public RpcParameter Clone() {
      return new RpcParameter(this);
    }

    /// <summary>Field number for the "proto_value" field.</summary>
    public const int ProtoValueFieldNumber = 1;
    private global::NanoRpc.BytesValue protoValue_;
    /// <summary>
    ///  Structure type
    /// </summary>
    public global::NanoRpc.BytesValue ProtoValue {
      get { return protoValue_; }
      set {
        protoValue_ = value;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 2;
    private global::NanoRpc.BoolValue boolValue_;
    /// <summary>
    ///  Primitive types
    /// </summary>
    public global::NanoRpc.BoolValue BoolValue {
      get { return boolValue_; }
      set {
        boolValue_ = value;
      }
    }

    /// <summary>Field number for the "int32_value" field.</summary>
    public const int Int32ValueFieldNumber = 3;
    private global::NanoRpc.Int32Value int32Value_;
    public global::NanoRpc.Int32Value Int32Value {
      get { return int32Value_; }
      set {
        int32Value_ = value;
      }
    }

    /// <summary>Field number for the "int64_value" field.</summary>
    public const int Int64ValueFieldNumber = 4;
    private global::NanoRpc.Int64Value int64Value_;
    public global::NanoRpc.Int64Value Int64Value {
      get { return int64Value_; }
      set {
        int64Value_ = value;
      }
    }

    /// <summary>Field number for the "uint32_value" field.</summary>
    public const int Uint32ValueFieldNumber = 5;
    private global::NanoRpc.UInt32Value uint32Value_;
    public global::NanoRpc.UInt32Value Uint32Value {
      get { return uint32Value_; }
      set {
        uint32Value_ = value;
      }
    }

    /// <summary>Field number for the "uint64_value" field.</summary>
    public const int Uint64ValueFieldNumber = 6;
    private global::NanoRpc.UInt64Value uint64Value_;
    public global::NanoRpc.UInt64Value Uint64Value {
      get { return uint64Value_; }
      set {
        uint64Value_ = value;
      }
    }

    /// <summary>Field number for the "sint32_value" field.</summary>
    public const int Sint32ValueFieldNumber = 7;
    private global::NanoRpc.SInt32Value sint32Value_;
    public global::NanoRpc.SInt32Value Sint32Value {
      get { return sint32Value_; }
      set {
        sint32Value_ = value;
      }
    }

    /// <summary>Field number for the "sint64_value" field.</summary>
    public const int Sint64ValueFieldNumber = 8;
    private global::NanoRpc.SInt64Value sint64Value_;
    public global::NanoRpc.SInt64Value Sint64Value {
      get { return sint64Value_; }
      set {
        sint64Value_ = value;
      }
    }

    /// <summary>Field number for the "fixed32_value" field.</summary>
    public const int Fixed32ValueFieldNumber = 9;
    private global::NanoRpc.Fixed32Value fixed32Value_;
    public global::NanoRpc.Fixed32Value Fixed32Value {
      get { return fixed32Value_; }
      set {
        fixed32Value_ = value;
      }
    }

    /// <summary>Field number for the "fixed64_value" field.</summary>
    public const int Fixed64ValueFieldNumber = 10;
    private global::NanoRpc.Fixed64Value fixed64Value_;
    public global::NanoRpc.Fixed64Value Fixed64Value {
      get { return fixed64Value_; }
      set {
        fixed64Value_ = value;
      }
    }

    /// <summary>Field number for the "sfixed32_value" field.</summary>
    public const int Sfixed32ValueFieldNumber = 11;
    private global::NanoRpc.SFixed32Value sfixed32Value_;
    public global::NanoRpc.SFixed32Value Sfixed32Value {
      get { return sfixed32Value_; }
      set {
        sfixed32Value_ = value;
      }
    }

    /// <summary>Field number for the "sfixed64_value" field.</summary>
    public const int Sfixed64ValueFieldNumber = 12;
    private global::NanoRpc.SFixed64Value sfixed64Value_;
    public global::NanoRpc.SFixed64Value Sfixed64Value {
      get { return sfixed64Value_; }
      set {
        sfixed64Value_ = value;
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 13;
    private global::NanoRpc.FloatValue floatValue_;
    public global::NanoRpc.FloatValue FloatValue {
      get { return floatValue_; }
      set {
        floatValue_ = value;
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 14;
    private global::NanoRpc.DoubleValue doubleValue_;
    public global::NanoRpc.DoubleValue DoubleValue {
      get { return doubleValue_; }
      set {
        doubleValue_ = value;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 15;
    private global::NanoRpc.StringValue stringValue_;
    public global::NanoRpc.StringValue StringValue {
      get { return stringValue_; }
      set {
        stringValue_ = value;
      }
    }

    /// <summary>Field number for the "is_null" field.</summary>
    public const int IsNullFieldNumber = 16;
    private bool isNull_;
    /// <summary>
    ///  Additional parameters
    /// </summary>
    public bool IsNull {
      get { return isNull_; }
      set {
        isNull_ = value;
      }
    }

    /// <summary>Field number for the "object_id_value" field.</summary>
    public const int ObjectIdValueFieldNumber = 17;
    private uint objectIdValue_;
    public uint ObjectIdValue {
      get { return objectIdValue_; }
      set {
        objectIdValue_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RpcParameter);
    }

    public bool Equals(RpcParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProtoValue, other.ProtoValue)) return false;
      if (!object.Equals(BoolValue, other.BoolValue)) return false;
      if (!object.Equals(Int32Value, other.Int32Value)) return false;
      if (!object.Equals(Int64Value, other.Int64Value)) return false;
      if (!object.Equals(Uint32Value, other.Uint32Value)) return false;
      if (!object.Equals(Uint64Value, other.Uint64Value)) return false;
      if (!object.Equals(Sint32Value, other.Sint32Value)) return false;
      if (!object.Equals(Sint64Value, other.Sint64Value)) return false;
      if (!object.Equals(Fixed32Value, other.Fixed32Value)) return false;
      if (!object.Equals(Fixed64Value, other.Fixed64Value)) return false;
      if (!object.Equals(Sfixed32Value, other.Sfixed32Value)) return false;
      if (!object.Equals(Sfixed64Value, other.Sfixed64Value)) return false;
      if (!object.Equals(FloatValue, other.FloatValue)) return false;
      if (!object.Equals(DoubleValue, other.DoubleValue)) return false;
      if (!object.Equals(StringValue, other.StringValue)) return false;
      if (IsNull != other.IsNull) return false;
      if (ObjectIdValue != other.ObjectIdValue) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (protoValue_ != null) hash ^= ProtoValue.GetHashCode();
      if (boolValue_ != null) hash ^= BoolValue.GetHashCode();
      if (int32Value_ != null) hash ^= Int32Value.GetHashCode();
      if (int64Value_ != null) hash ^= Int64Value.GetHashCode();
      if (uint32Value_ != null) hash ^= Uint32Value.GetHashCode();
      if (uint64Value_ != null) hash ^= Uint64Value.GetHashCode();
      if (sint32Value_ != null) hash ^= Sint32Value.GetHashCode();
      if (sint64Value_ != null) hash ^= Sint64Value.GetHashCode();
      if (fixed32Value_ != null) hash ^= Fixed32Value.GetHashCode();
      if (fixed64Value_ != null) hash ^= Fixed64Value.GetHashCode();
      if (sfixed32Value_ != null) hash ^= Sfixed32Value.GetHashCode();
      if (sfixed64Value_ != null) hash ^= Sfixed64Value.GetHashCode();
      if (floatValue_ != null) hash ^= FloatValue.GetHashCode();
      if (doubleValue_ != null) hash ^= DoubleValue.GetHashCode();
      if (stringValue_ != null) hash ^= StringValue.GetHashCode();
      if (IsNull != false) hash ^= IsNull.GetHashCode();
      if (ObjectIdValue != 0) hash ^= ObjectIdValue.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (protoValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProtoValue);
      }
      if (boolValue_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BoolValue);
      }
      if (int32Value_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Int32Value);
      }
      if (int64Value_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Int64Value);
      }
      if (uint32Value_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Uint32Value);
      }
      if (uint64Value_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Uint64Value);
      }
      if (sint32Value_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Sint32Value);
      }
      if (sint64Value_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Sint64Value);
      }
      if (fixed32Value_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Fixed32Value);
      }
      if (fixed64Value_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Fixed64Value);
      }
      if (sfixed32Value_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Sfixed32Value);
      }
      if (sfixed64Value_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Sfixed64Value);
      }
      if (floatValue_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(FloatValue);
      }
      if (doubleValue_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(DoubleValue);
      }
      if (stringValue_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(StringValue);
      }
      if (IsNull != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsNull);
      }
      if (ObjectIdValue != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ObjectIdValue);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (protoValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProtoValue);
      }
      if (boolValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoolValue);
      }
      if (int32Value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int32Value);
      }
      if (int64Value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64Value);
      }
      if (uint32Value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uint32Value);
      }
      if (uint64Value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uint64Value);
      }
      if (sint32Value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sint32Value);
      }
      if (sint64Value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sint64Value);
      }
      if (fixed32Value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fixed32Value);
      }
      if (fixed64Value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fixed64Value);
      }
      if (sfixed32Value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sfixed32Value);
      }
      if (sfixed64Value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sfixed64Value);
      }
      if (floatValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FloatValue);
      }
      if (doubleValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DoubleValue);
      }
      if (stringValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringValue);
      }
      if (IsNull != false) {
        size += 2 + 1;
      }
      if (ObjectIdValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObjectIdValue);
      }
      return size;
    }

    public void MergeFrom(RpcParameter other) {
      if (other == null) {
        return;
      }
      if (other.protoValue_ != null) {
        if (protoValue_ == null) {
          protoValue_ = new global::NanoRpc.BytesValue();
        }
        ProtoValue.MergeFrom(other.ProtoValue);
      }
      if (other.boolValue_ != null) {
        if (boolValue_ == null) {
          boolValue_ = new global::NanoRpc.BoolValue();
        }
        BoolValue.MergeFrom(other.BoolValue);
      }
      if (other.int32Value_ != null) {
        if (int32Value_ == null) {
          int32Value_ = new global::NanoRpc.Int32Value();
        }
        Int32Value.MergeFrom(other.Int32Value);
      }
      if (other.int64Value_ != null) {
        if (int64Value_ == null) {
          int64Value_ = new global::NanoRpc.Int64Value();
        }
        Int64Value.MergeFrom(other.Int64Value);
      }
      if (other.uint32Value_ != null) {
        if (uint32Value_ == null) {
          uint32Value_ = new global::NanoRpc.UInt32Value();
        }
        Uint32Value.MergeFrom(other.Uint32Value);
      }
      if (other.uint64Value_ != null) {
        if (uint64Value_ == null) {
          uint64Value_ = new global::NanoRpc.UInt64Value();
        }
        Uint64Value.MergeFrom(other.Uint64Value);
      }
      if (other.sint32Value_ != null) {
        if (sint32Value_ == null) {
          sint32Value_ = new global::NanoRpc.SInt32Value();
        }
        Sint32Value.MergeFrom(other.Sint32Value);
      }
      if (other.sint64Value_ != null) {
        if (sint64Value_ == null) {
          sint64Value_ = new global::NanoRpc.SInt64Value();
        }
        Sint64Value.MergeFrom(other.Sint64Value);
      }
      if (other.fixed32Value_ != null) {
        if (fixed32Value_ == null) {
          fixed32Value_ = new global::NanoRpc.Fixed32Value();
        }
        Fixed32Value.MergeFrom(other.Fixed32Value);
      }
      if (other.fixed64Value_ != null) {
        if (fixed64Value_ == null) {
          fixed64Value_ = new global::NanoRpc.Fixed64Value();
        }
        Fixed64Value.MergeFrom(other.Fixed64Value);
      }
      if (other.sfixed32Value_ != null) {
        if (sfixed32Value_ == null) {
          sfixed32Value_ = new global::NanoRpc.SFixed32Value();
        }
        Sfixed32Value.MergeFrom(other.Sfixed32Value);
      }
      if (other.sfixed64Value_ != null) {
        if (sfixed64Value_ == null) {
          sfixed64Value_ = new global::NanoRpc.SFixed64Value();
        }
        Sfixed64Value.MergeFrom(other.Sfixed64Value);
      }
      if (other.floatValue_ != null) {
        if (floatValue_ == null) {
          floatValue_ = new global::NanoRpc.FloatValue();
        }
        FloatValue.MergeFrom(other.FloatValue);
      }
      if (other.doubleValue_ != null) {
        if (doubleValue_ == null) {
          doubleValue_ = new global::NanoRpc.DoubleValue();
        }
        DoubleValue.MergeFrom(other.DoubleValue);
      }
      if (other.stringValue_ != null) {
        if (stringValue_ == null) {
          stringValue_ = new global::NanoRpc.StringValue();
        }
        StringValue.MergeFrom(other.StringValue);
      }
      if (other.IsNull != false) {
        IsNull = other.IsNull;
      }
      if (other.ObjectIdValue != 0) {
        ObjectIdValue = other.ObjectIdValue;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (protoValue_ == null) {
              protoValue_ = new global::NanoRpc.BytesValue();
            }
            input.ReadMessage(protoValue_);
            break;
          }
          case 18: {
            if (boolValue_ == null) {
              boolValue_ = new global::NanoRpc.BoolValue();
            }
            input.ReadMessage(boolValue_);
            break;
          }
          case 26: {
            if (int32Value_ == null) {
              int32Value_ = new global::NanoRpc.Int32Value();
            }
            input.ReadMessage(int32Value_);
            break;
          }
          case 34: {
            if (int64Value_ == null) {
              int64Value_ = new global::NanoRpc.Int64Value();
            }
            input.ReadMessage(int64Value_);
            break;
          }
          case 42: {
            if (uint32Value_ == null) {
              uint32Value_ = new global::NanoRpc.UInt32Value();
            }
            input.ReadMessage(uint32Value_);
            break;
          }
          case 50: {
            if (uint64Value_ == null) {
              uint64Value_ = new global::NanoRpc.UInt64Value();
            }
            input.ReadMessage(uint64Value_);
            break;
          }
          case 58: {
            if (sint32Value_ == null) {
              sint32Value_ = new global::NanoRpc.SInt32Value();
            }
            input.ReadMessage(sint32Value_);
            break;
          }
          case 66: {
            if (sint64Value_ == null) {
              sint64Value_ = new global::NanoRpc.SInt64Value();
            }
            input.ReadMessage(sint64Value_);
            break;
          }
          case 74: {
            if (fixed32Value_ == null) {
              fixed32Value_ = new global::NanoRpc.Fixed32Value();
            }
            input.ReadMessage(fixed32Value_);
            break;
          }
          case 82: {
            if (fixed64Value_ == null) {
              fixed64Value_ = new global::NanoRpc.Fixed64Value();
            }
            input.ReadMessage(fixed64Value_);
            break;
          }
          case 90: {
            if (sfixed32Value_ == null) {
              sfixed32Value_ = new global::NanoRpc.SFixed32Value();
            }
            input.ReadMessage(sfixed32Value_);
            break;
          }
          case 98: {
            if (sfixed64Value_ == null) {
              sfixed64Value_ = new global::NanoRpc.SFixed64Value();
            }
            input.ReadMessage(sfixed64Value_);
            break;
          }
          case 106: {
            if (floatValue_ == null) {
              floatValue_ = new global::NanoRpc.FloatValue();
            }
            input.ReadMessage(floatValue_);
            break;
          }
          case 114: {
            if (doubleValue_ == null) {
              doubleValue_ = new global::NanoRpc.DoubleValue();
            }
            input.ReadMessage(doubleValue_);
            break;
          }
          case 122: {
            if (stringValue_ == null) {
              stringValue_ = new global::NanoRpc.StringValue();
            }
            input.ReadMessage(stringValue_);
            break;
          }
          case 128: {
            IsNull = input.ReadBool();
            break;
          }
          case 136: {
            ObjectIdValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcResult : pb::IMessage<RpcResult> {
    private static readonly pb::MessageParser<RpcResult> _parser = new pb::MessageParser<RpcResult>(() => new RpcResult());
    public static pb::MessageParser<RpcResult> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RpcResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RpcResult(RpcResult other) : this() {
      status_ = other.status_;
      errorMessage_ = other.errorMessage_;
      CallResult = other.callResult_ != null ? other.CallResult.Clone() : null;
    }

    public RpcResult Clone() {
      return new RpcResult(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::NanoRpc.RpcStatus status_ = 0;
    public global::NanoRpc.RpcStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 2;
    private string errorMessage_ = "";
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "call_result" field.</summary>
    public const int CallResultFieldNumber = 3;
    private global::NanoRpc.RpcParameter callResult_;
    public global::NanoRpc.RpcParameter CallResult {
      get { return callResult_; }
      set {
        callResult_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RpcResult);
    }

    public bool Equals(RpcResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (!object.Equals(CallResult, other.CallResult)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (callResult_ != null) hash ^= CallResult.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMessage);
      }
      if (callResult_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CallResult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (callResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallResult);
      }
      return size;
    }

    public void MergeFrom(RpcResult other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.callResult_ != null) {
        if (callResult_ == null) {
          callResult_ = new global::NanoRpc.RpcParameter();
        }
        CallResult.MergeFrom(other.CallResult);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::NanoRpc.RpcStatus) input.ReadEnum();
            break;
          }
          case 18: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 26: {
            if (callResult_ == null) {
              callResult_ = new global::NanoRpc.RpcParameter();
            }
            input.ReadMessage(callResult_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcCall : pb::IMessage<RpcCall> {
    private static readonly pb::MessageParser<RpcCall> _parser = new pb::MessageParser<RpcCall>(() => new RpcCall());
    public static pb::MessageParser<RpcCall> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RpcCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RpcCall(RpcCall other) : this() {
      service_ = other.service_;
      method_ = other.method_;
      parameters_ = other.parameters_.Clone();
      expectsResult_ = other.expectsResult_;
      objectId_ = other.objectId_;
    }

    public RpcCall Clone() {
      return new RpcCall(this);
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 1;
    private string service_ = "";
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 2;
    private string method_ = "";
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NanoRpc.RpcParameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(26, global::NanoRpc.RpcParameter.Parser);
    private readonly pbc::RepeatedField<global::NanoRpc.RpcParameter> parameters_ = new pbc::RepeatedField<global::NanoRpc.RpcParameter>();
    public pbc::RepeatedField<global::NanoRpc.RpcParameter> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "expects_result" field.</summary>
    public const int ExpectsResultFieldNumber = 4;
    private bool expectsResult_;
    public bool ExpectsResult {
      get { return expectsResult_; }
      set {
        expectsResult_ = value;
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 5;
    private uint objectId_;
    public uint ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RpcCall);
    }

    public bool Equals(RpcCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Service != other.Service) return false;
      if (Method != other.Method) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      if (ExpectsResult != other.ExpectsResult) return false;
      if (ObjectId != other.ObjectId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (ExpectsResult != false) hash ^= ExpectsResult.GetHashCode();
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Service.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Service);
      }
      if (Method.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Method);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (ExpectsResult != false) {
        output.WriteRawTag(32);
        output.WriteBool(ExpectsResult);
      }
      if (ObjectId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ObjectId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (ExpectsResult != false) {
        size += 1 + 1;
      }
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
      }
      return size;
    }

    public void MergeFrom(RpcCall other) {
      if (other == null) {
        return;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      parameters_.Add(other.parameters_);
      if (other.ExpectsResult != false) {
        ExpectsResult = other.ExpectsResult;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Service = input.ReadString();
            break;
          }
          case 18: {
            Method = input.ReadString();
            break;
          }
          case 26: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 32: {
            ExpectsResult = input.ReadBool();
            break;
          }
          case 40: {
            ObjectId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcMessage : pb::IMessage<RpcMessage> {
    private static readonly pb::MessageParser<RpcMessage> _parser = new pb::MessageParser<RpcMessage>(() => new RpcMessage());
    public static pb::MessageParser<RpcMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypesReflection.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RpcMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RpcMessage(RpcMessage other) : this() {
      id_ = other.id_;
      Call = other.call_ != null ? other.Call.Clone() : null;
      Result = other.result_ != null ? other.Result.Clone() : null;
    }

    public RpcMessage Clone() {
      return new RpcMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "call" field.</summary>
    public const int CallFieldNumber = 2;
    private global::NanoRpc.RpcCall call_;
    public global::NanoRpc.RpcCall Call {
      get { return call_; }
      set {
        call_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::NanoRpc.RpcResult result_;
    public global::NanoRpc.RpcResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RpcMessage);
    }

    public bool Equals(RpcMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Call, other.Call)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (call_ != null) hash ^= Call.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (call_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Call);
      }
      if (result_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Result);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (call_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Call);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      return size;
    }

    public void MergeFrom(RpcMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.call_ != null) {
        if (call_ == null) {
          call_ = new global::NanoRpc.RpcCall();
        }
        Call.MergeFrom(other.Call);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::NanoRpc.RpcResult();
        }
        Result.MergeFrom(other.Result);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (call_ == null) {
              call_ = new global::NanoRpc.RpcCall();
            }
            input.ReadMessage(call_);
            break;
          }
          case 26: {
            if (result_ == null) {
              result_ = new global::NanoRpc.RpcResult();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
