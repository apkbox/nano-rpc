// Generated by the protocol buffer compiler.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace NanoRpc {
  
  public static partial class RpcMessageTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_NanoRpc_RpcParameter__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NanoRpc.RpcParameter, global::NanoRpc.RpcParameter.Builder> internal__static_NanoRpc_RpcParameter__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NanoRpc_RpcResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NanoRpc.RpcResult, global::NanoRpc.RpcResult.Builder> internal__static_NanoRpc_RpcResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NanoRpc_RpcCall__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NanoRpc.RpcCall, global::NanoRpc.RpcCall.Builder> internal__static_NanoRpc_RpcCall__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NanoRpc_RpcMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NanoRpc.RpcMessage, global::NanoRpc.RpcMessage.Builder> internal__static_NanoRpc_RpcMessage__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static RpcMessageTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChVScGNNZXNzYWdlVHlwZXMucHJvdG8SB05hbm9ScGMiggMKDFJwY1BhcmFt" + 
          "ZXRlchITCgtwcm90b192YWx1ZRgBIAEoDBISCgpib29sX3ZhbHVlGAIgASgI" + 
          "EhMKC2ludDMyX3ZhbHVlGAMgASgFEhMKC2ludDY0X3ZhbHVlGAQgASgDEhQK" + 
          "DHVpbnQzMl92YWx1ZRgFIAEoDRIUCgx1aW50NjRfdmFsdWUYBiABKAQSFAoM" + 
          "c2ludDMyX3ZhbHVlGAcgASgREhQKDHNpbnQ2NF92YWx1ZRgIIAEoEhIVCg1m" + 
          "aXhlZDMyX3ZhbHVlGAkgASgHEhUKDWZpeGVkNjRfdmFsdWUYCiABKAYSFgoO" + 
          "c2ZpeGVkMzJfdmFsdWUYCyABKA8SFgoOc2ZpeGVkNjRfdmFsdWUYDCABKBAS" + 
          "EwoLZmxvYXRfdmFsdWUYDSABKAISFAoMZG91YmxlX3ZhbHVlGA4gASgBEhQK" + 
          "DHN0cmluZ192YWx1ZRgPIAEoCRIPCgdpc19udWxsGBAgASgIEhcKD29iamVj" + 
          "dF9pZF92YWx1ZRgRIAEoDSJyCglScGNSZXN1bHQSIgoGc3RhdHVzGAEgASgO" + 
          "MhIuTmFub1JwYy5ScGNTdGF0dXMSFQoNZXJyb3JfbWVzc2FnZRgCIAEoCRIq" + 
          "CgtjYWxsX3Jlc3VsdBgDIAEoCzIVLk5hbm9ScGMuUnBjUGFyYW1ldGVyIoAB" + 
          "CgdScGNDYWxsEg8KB3NlcnZpY2UYASABKAkSDgoGbWV0aG9kGAIgASgJEikK" + 
          "CnBhcmFtZXRlcnMYAyADKAsyFS5OYW5vUnBjLlJwY1BhcmFtZXRlchIWCg5l" + 
          "eHBlY3RzX3Jlc3VsdBgEIAEoCBIRCglvYmplY3RfaWQYBSABKA0iXAoKUnBj" + 
          "TWVzc2FnZRIKCgJpZBgBIAEoBRIeCgRjYWxsGAIgASgLMhAuTmFub1JwYy5S" + 
          "cGNDYWxsEiIKBnJlc3VsdBgDIAEoCzISLk5hbm9ScGMuUnBjUmVzdWx0KpYB" + 
          "CglScGNTdGF0dXMSEAoMUnBjU3VjY2VlZGVkEAASFQoRUnBjQ2hhbm5lbEZh" + 
          "aWx1cmUQARIUChBScGNVbmtub3duTWV0aG9kEAISFAoQUnBjUHJvdG9jb2xF" + 
          "cnJvchADEhcKE1JwY1Vua25vd25JbnRlcmZhY2UQBBIbChdScGNJbnZhbGlk" + 
          "Q2FsbFBhcmFtZXRlchAF");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_NanoRpc_RpcParameter__Descriptor = Descriptor.MessageTypes[0];
        internal__static_NanoRpc_RpcParameter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NanoRpc.RpcParameter, global::NanoRpc.RpcParameter.Builder>(internal__static_NanoRpc_RpcParameter__Descriptor,
                new string[] { "ProtoValue", "BoolValue", "Int32Value", "Int64Value", "Uint32Value", "Uint64Value", "Sint32Value", "Sint64Value", "Fixed32Value", "Fixed64Value", "Sfixed32Value", "Sfixed64Value", "FloatValue", "DoubleValue", "StringValue", "IsNull", "ObjectIdValue", });
        internal__static_NanoRpc_RpcResult__Descriptor = Descriptor.MessageTypes[1];
        internal__static_NanoRpc_RpcResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NanoRpc.RpcResult, global::NanoRpc.RpcResult.Builder>(internal__static_NanoRpc_RpcResult__Descriptor,
                new string[] { "Status", "ErrorMessage", "CallResult", });
        internal__static_NanoRpc_RpcCall__Descriptor = Descriptor.MessageTypes[2];
        internal__static_NanoRpc_RpcCall__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NanoRpc.RpcCall, global::NanoRpc.RpcCall.Builder>(internal__static_NanoRpc_RpcCall__Descriptor,
                new string[] { "Service", "Method", "Parameters", "ExpectsResult", "ObjectId", });
        internal__static_NanoRpc_RpcMessage__Descriptor = Descriptor.MessageTypes[3];
        internal__static_NanoRpc_RpcMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NanoRpc.RpcMessage, global::NanoRpc.RpcMessage.Builder>(internal__static_NanoRpc_RpcMessage__Descriptor,
                new string[] { "Id", "Call", "Result", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum RpcStatus {
    RpcSucceeded = 0,
    RpcChannelFailure = 1,
    RpcUnknownMethod = 2,
    RpcProtocolError = 3,
    RpcUnknownInterface = 4,
    RpcInvalidCallParameter = 5,
  }
  
  #endregion
  
  #region Messages
  public sealed partial class RpcParameter : pb::GeneratedMessage<RpcParameter, RpcParameter.Builder> {
    private static readonly RpcParameter defaultInstance = new Builder().BuildPartial();
    public static RpcParameter DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcParameter DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RpcParameter ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypes.internal__static_NanoRpc_RpcParameter__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RpcParameter, RpcParameter.Builder> InternalFieldAccessors {
      get { return global::NanoRpc.RpcMessageTypes.internal__static_NanoRpc_RpcParameter__FieldAccessorTable; }
    }
    
    public const int ProtoValueFieldNumber = 1;
    private bool hasProtoValue;
    private pb::ByteString protoValue_ = pb::ByteString.Empty;
    public bool HasProtoValue {
      get { return hasProtoValue; }
    }
    public pb::ByteString ProtoValue {
      get { return protoValue_; }
    }
    
    public const int BoolValueFieldNumber = 2;
    private bool hasBoolValue;
    private bool boolValue_ = false;
    public bool HasBoolValue {
      get { return hasBoolValue; }
    }
    public bool BoolValue {
      get { return boolValue_; }
    }
    
    public const int Int32ValueFieldNumber = 3;
    private bool hasInt32Value;
    private int int32Value_ = 0;
    public bool HasInt32Value {
      get { return hasInt32Value; }
    }
    public int Int32Value {
      get { return int32Value_; }
    }
    
    public const int Int64ValueFieldNumber = 4;
    private bool hasInt64Value;
    private long int64Value_ = 0L;
    public bool HasInt64Value {
      get { return hasInt64Value; }
    }
    public long Int64Value {
      get { return int64Value_; }
    }
    
    public const int Uint32ValueFieldNumber = 5;
    private bool hasUint32Value;
    private uint uint32Value_ = 0;
    public bool HasUint32Value {
      get { return hasUint32Value; }
    }
    [global::System.CLSCompliant(false)]
    public uint Uint32Value {
      get { return uint32Value_; }
    }
    
    public const int Uint64ValueFieldNumber = 6;
    private bool hasUint64Value;
    private ulong uint64Value_ = 0UL;
    public bool HasUint64Value {
      get { return hasUint64Value; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Uint64Value {
      get { return uint64Value_; }
    }
    
    public const int Sint32ValueFieldNumber = 7;
    private bool hasSint32Value;
    private int sint32Value_ = 0;
    public bool HasSint32Value {
      get { return hasSint32Value; }
    }
    public int Sint32Value {
      get { return sint32Value_; }
    }
    
    public const int Sint64ValueFieldNumber = 8;
    private bool hasSint64Value;
    private long sint64Value_ = 0;
    public bool HasSint64Value {
      get { return hasSint64Value; }
    }
    public long Sint64Value {
      get { return sint64Value_; }
    }
    
    public const int Fixed32ValueFieldNumber = 9;
    private bool hasFixed32Value;
    private uint fixed32Value_ = 0;
    public bool HasFixed32Value {
      get { return hasFixed32Value; }
    }
    [global::System.CLSCompliant(false)]
    public uint Fixed32Value {
      get { return fixed32Value_; }
    }
    
    public const int Fixed64ValueFieldNumber = 10;
    private bool hasFixed64Value;
    private ulong fixed64Value_ = 0;
    public bool HasFixed64Value {
      get { return hasFixed64Value; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Fixed64Value {
      get { return fixed64Value_; }
    }
    
    public const int Sfixed32ValueFieldNumber = 11;
    private bool hasSfixed32Value;
    private int sfixed32Value_ = 0;
    public bool HasSfixed32Value {
      get { return hasSfixed32Value; }
    }
    public int Sfixed32Value {
      get { return sfixed32Value_; }
    }
    
    public const int Sfixed64ValueFieldNumber = 12;
    private bool hasSfixed64Value;
    private long sfixed64Value_ = 0;
    public bool HasSfixed64Value {
      get { return hasSfixed64Value; }
    }
    public long Sfixed64Value {
      get { return sfixed64Value_; }
    }
    
    public const int FloatValueFieldNumber = 13;
    private bool hasFloatValue;
    private float floatValue_ = 0F;
    public bool HasFloatValue {
      get { return hasFloatValue; }
    }
    public float FloatValue {
      get { return floatValue_; }
    }
    
    public const int DoubleValueFieldNumber = 14;
    private bool hasDoubleValue;
    private double doubleValue_ = 0D;
    public bool HasDoubleValue {
      get { return hasDoubleValue; }
    }
    public double DoubleValue {
      get { return doubleValue_; }
    }
    
    public const int StringValueFieldNumber = 15;
    private bool hasStringValue;
    private string stringValue_ = "";
    public bool HasStringValue {
      get { return hasStringValue; }
    }
    public string StringValue {
      get { return stringValue_; }
    }
    
    public const int IsNullFieldNumber = 16;
    private bool hasIsNull;
    private bool isNull_ = false;
    public bool HasIsNull {
      get { return hasIsNull; }
    }
    public bool IsNull {
      get { return isNull_; }
    }
    
    public const int ObjectIdValueFieldNumber = 17;
    private bool hasObjectIdValue;
    private uint objectIdValue_ = 0;
    public bool HasObjectIdValue {
      get { return hasObjectIdValue; }
    }
    [global::System.CLSCompliant(false)]
    public uint ObjectIdValue {
      get { return objectIdValue_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasProtoValue) {
        output.WriteBytes(1, ProtoValue);
      }
      if (HasBoolValue) {
        output.WriteBool(2, BoolValue);
      }
      if (HasInt32Value) {
        output.WriteInt32(3, Int32Value);
      }
      if (HasInt64Value) {
        output.WriteInt64(4, Int64Value);
      }
      if (HasUint32Value) {
        output.WriteUInt32(5, Uint32Value);
      }
      if (HasUint64Value) {
        output.WriteUInt64(6, Uint64Value);
      }
      if (HasSint32Value) {
        output.WriteSInt32(7, Sint32Value);
      }
      if (HasSint64Value) {
        output.WriteSInt64(8, Sint64Value);
      }
      if (HasFixed32Value) {
        output.WriteFixed32(9, Fixed32Value);
      }
      if (HasFixed64Value) {
        output.WriteFixed64(10, Fixed64Value);
      }
      if (HasSfixed32Value) {
        output.WriteSFixed32(11, Sfixed32Value);
      }
      if (HasSfixed64Value) {
        output.WriteSFixed64(12, Sfixed64Value);
      }
      if (HasFloatValue) {
        output.WriteFloat(13, FloatValue);
      }
      if (HasDoubleValue) {
        output.WriteDouble(14, DoubleValue);
      }
      if (HasStringValue) {
        output.WriteString(15, StringValue);
      }
      if (HasIsNull) {
        output.WriteBool(16, IsNull);
      }
      if (HasObjectIdValue) {
        output.WriteUInt32(17, ObjectIdValue);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasProtoValue) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, ProtoValue);
        }
        if (HasBoolValue) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, BoolValue);
        }
        if (HasInt32Value) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Int32Value);
        }
        if (HasInt64Value) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, Int64Value);
        }
        if (HasUint32Value) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, Uint32Value);
        }
        if (HasUint64Value) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, Uint64Value);
        }
        if (HasSint32Value) {
          size += pb::CodedOutputStream.ComputeSInt32Size(7, Sint32Value);
        }
        if (HasSint64Value) {
          size += pb::CodedOutputStream.ComputeSInt64Size(8, Sint64Value);
        }
        if (HasFixed32Value) {
          size += pb::CodedOutputStream.ComputeFixed32Size(9, Fixed32Value);
        }
        if (HasFixed64Value) {
          size += pb::CodedOutputStream.ComputeFixed64Size(10, Fixed64Value);
        }
        if (HasSfixed32Value) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(11, Sfixed32Value);
        }
        if (HasSfixed64Value) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(12, Sfixed64Value);
        }
        if (HasFloatValue) {
          size += pb::CodedOutputStream.ComputeFloatSize(13, FloatValue);
        }
        if (HasDoubleValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, DoubleValue);
        }
        if (HasStringValue) {
          size += pb::CodedOutputStream.ComputeStringSize(15, StringValue);
        }
        if (HasIsNull) {
          size += pb::CodedOutputStream.ComputeBoolSize(16, IsNull);
        }
        if (HasObjectIdValue) {
          size += pb::CodedOutputStream.ComputeUInt32Size(17, ObjectIdValue);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RpcParameter ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcParameter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcParameter ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcParameter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcParameter ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcParameter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcParameter ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcParameter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcParameter ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcParameter ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcParameter prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RpcParameter, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RpcParameter result = new RpcParameter();
      
      protected override RpcParameter MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RpcParameter();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NanoRpc.RpcParameter.Descriptor; }
      }
      
      public override RpcParameter DefaultInstanceForType {
        get { return global::NanoRpc.RpcParameter.DefaultInstance; }
      }
      
      public override RpcParameter BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        RpcParameter returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RpcParameter) {
          return MergeFrom((RpcParameter) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcParameter other) {
        if (other == global::NanoRpc.RpcParameter.DefaultInstance) return this;
        if (other.HasProtoValue) {
          ProtoValue = other.ProtoValue;
        }
        if (other.HasBoolValue) {
          BoolValue = other.BoolValue;
        }
        if (other.HasInt32Value) {
          Int32Value = other.Int32Value;
        }
        if (other.HasInt64Value) {
          Int64Value = other.Int64Value;
        }
        if (other.HasUint32Value) {
          Uint32Value = other.Uint32Value;
        }
        if (other.HasUint64Value) {
          Uint64Value = other.Uint64Value;
        }
        if (other.HasSint32Value) {
          Sint32Value = other.Sint32Value;
        }
        if (other.HasSint64Value) {
          Sint64Value = other.Sint64Value;
        }
        if (other.HasFixed32Value) {
          Fixed32Value = other.Fixed32Value;
        }
        if (other.HasFixed64Value) {
          Fixed64Value = other.Fixed64Value;
        }
        if (other.HasSfixed32Value) {
          Sfixed32Value = other.Sfixed32Value;
        }
        if (other.HasSfixed64Value) {
          Sfixed64Value = other.Sfixed64Value;
        }
        if (other.HasFloatValue) {
          FloatValue = other.FloatValue;
        }
        if (other.HasDoubleValue) {
          DoubleValue = other.DoubleValue;
        }
        if (other.HasStringValue) {
          StringValue = other.StringValue;
        }
        if (other.HasIsNull) {
          IsNull = other.IsNull;
        }
        if (other.HasObjectIdValue) {
          ObjectIdValue = other.ObjectIdValue;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              ProtoValue = input.ReadBytes();
              break;
            }
            case 16: {
              BoolValue = input.ReadBool();
              break;
            }
            case 24: {
              Int32Value = input.ReadInt32();
              break;
            }
            case 32: {
              Int64Value = input.ReadInt64();
              break;
            }
            case 40: {
              Uint32Value = input.ReadUInt32();
              break;
            }
            case 48: {
              Uint64Value = input.ReadUInt64();
              break;
            }
            case 56: {
              Sint32Value = input.ReadSInt32();
              break;
            }
            case 64: {
              Sint64Value = input.ReadSInt64();
              break;
            }
            case 77: {
              Fixed32Value = input.ReadFixed32();
              break;
            }
            case 81: {
              Fixed64Value = input.ReadFixed64();
              break;
            }
            case 93: {
              Sfixed32Value = input.ReadSFixed32();
              break;
            }
            case 97: {
              Sfixed64Value = input.ReadSFixed64();
              break;
            }
            case 109: {
              FloatValue = input.ReadFloat();
              break;
            }
            case 113: {
              DoubleValue = input.ReadDouble();
              break;
            }
            case 122: {
              StringValue = input.ReadString();
              break;
            }
            case 128: {
              IsNull = input.ReadBool();
              break;
            }
            case 136: {
              ObjectIdValue = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasProtoValue {
        get { return result.HasProtoValue; }
      }
      public pb::ByteString ProtoValue {
        get { return result.ProtoValue; }
        set { SetProtoValue(value); }
      }
      public Builder SetProtoValue(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasProtoValue = true;
        result.protoValue_ = value;
        return this;
      }
      public Builder ClearProtoValue() {
        result.hasProtoValue = false;
        result.protoValue_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasBoolValue {
        get { return result.HasBoolValue; }
      }
      public bool BoolValue {
        get { return result.BoolValue; }
        set { SetBoolValue(value); }
      }
      public Builder SetBoolValue(bool value) {
        result.hasBoolValue = true;
        result.boolValue_ = value;
        return this;
      }
      public Builder ClearBoolValue() {
        result.hasBoolValue = false;
        result.boolValue_ = false;
        return this;
      }
      
      public bool HasInt32Value {
        get { return result.HasInt32Value; }
      }
      public int Int32Value {
        get { return result.Int32Value; }
        set { SetInt32Value(value); }
      }
      public Builder SetInt32Value(int value) {
        result.hasInt32Value = true;
        result.int32Value_ = value;
        return this;
      }
      public Builder ClearInt32Value() {
        result.hasInt32Value = false;
        result.int32Value_ = 0;
        return this;
      }
      
      public bool HasInt64Value {
        get { return result.HasInt64Value; }
      }
      public long Int64Value {
        get { return result.Int64Value; }
        set { SetInt64Value(value); }
      }
      public Builder SetInt64Value(long value) {
        result.hasInt64Value = true;
        result.int64Value_ = value;
        return this;
      }
      public Builder ClearInt64Value() {
        result.hasInt64Value = false;
        result.int64Value_ = 0L;
        return this;
      }
      
      public bool HasUint32Value {
        get { return result.HasUint32Value; }
      }
      [global::System.CLSCompliant(false)]
      public uint Uint32Value {
        get { return result.Uint32Value; }
        set { SetUint32Value(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUint32Value(uint value) {
        result.hasUint32Value = true;
        result.uint32Value_ = value;
        return this;
      }
      public Builder ClearUint32Value() {
        result.hasUint32Value = false;
        result.uint32Value_ = 0;
        return this;
      }
      
      public bool HasUint64Value {
        get { return result.HasUint64Value; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Uint64Value {
        get { return result.Uint64Value; }
        set { SetUint64Value(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUint64Value(ulong value) {
        result.hasUint64Value = true;
        result.uint64Value_ = value;
        return this;
      }
      public Builder ClearUint64Value() {
        result.hasUint64Value = false;
        result.uint64Value_ = 0UL;
        return this;
      }
      
      public bool HasSint32Value {
        get { return result.HasSint32Value; }
      }
      public int Sint32Value {
        get { return result.Sint32Value; }
        set { SetSint32Value(value); }
      }
      public Builder SetSint32Value(int value) {
        result.hasSint32Value = true;
        result.sint32Value_ = value;
        return this;
      }
      public Builder ClearSint32Value() {
        result.hasSint32Value = false;
        result.sint32Value_ = 0;
        return this;
      }
      
      public bool HasSint64Value {
        get { return result.HasSint64Value; }
      }
      public long Sint64Value {
        get { return result.Sint64Value; }
        set { SetSint64Value(value); }
      }
      public Builder SetSint64Value(long value) {
        result.hasSint64Value = true;
        result.sint64Value_ = value;
        return this;
      }
      public Builder ClearSint64Value() {
        result.hasSint64Value = false;
        result.sint64Value_ = 0;
        return this;
      }
      
      public bool HasFixed32Value {
        get { return result.HasFixed32Value; }
      }
      [global::System.CLSCompliant(false)]
      public uint Fixed32Value {
        get { return result.Fixed32Value; }
        set { SetFixed32Value(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFixed32Value(uint value) {
        result.hasFixed32Value = true;
        result.fixed32Value_ = value;
        return this;
      }
      public Builder ClearFixed32Value() {
        result.hasFixed32Value = false;
        result.fixed32Value_ = 0;
        return this;
      }
      
      public bool HasFixed64Value {
        get { return result.HasFixed64Value; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Fixed64Value {
        get { return result.Fixed64Value; }
        set { SetFixed64Value(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFixed64Value(ulong value) {
        result.hasFixed64Value = true;
        result.fixed64Value_ = value;
        return this;
      }
      public Builder ClearFixed64Value() {
        result.hasFixed64Value = false;
        result.fixed64Value_ = 0;
        return this;
      }
      
      public bool HasSfixed32Value {
        get { return result.HasSfixed32Value; }
      }
      public int Sfixed32Value {
        get { return result.Sfixed32Value; }
        set { SetSfixed32Value(value); }
      }
      public Builder SetSfixed32Value(int value) {
        result.hasSfixed32Value = true;
        result.sfixed32Value_ = value;
        return this;
      }
      public Builder ClearSfixed32Value() {
        result.hasSfixed32Value = false;
        result.sfixed32Value_ = 0;
        return this;
      }
      
      public bool HasSfixed64Value {
        get { return result.HasSfixed64Value; }
      }
      public long Sfixed64Value {
        get { return result.Sfixed64Value; }
        set { SetSfixed64Value(value); }
      }
      public Builder SetSfixed64Value(long value) {
        result.hasSfixed64Value = true;
        result.sfixed64Value_ = value;
        return this;
      }
      public Builder ClearSfixed64Value() {
        result.hasSfixed64Value = false;
        result.sfixed64Value_ = 0;
        return this;
      }
      
      public bool HasFloatValue {
        get { return result.HasFloatValue; }
      }
      public float FloatValue {
        get { return result.FloatValue; }
        set { SetFloatValue(value); }
      }
      public Builder SetFloatValue(float value) {
        result.hasFloatValue = true;
        result.floatValue_ = value;
        return this;
      }
      public Builder ClearFloatValue() {
        result.hasFloatValue = false;
        result.floatValue_ = 0F;
        return this;
      }
      
      public bool HasDoubleValue {
        get { return result.HasDoubleValue; }
      }
      public double DoubleValue {
        get { return result.DoubleValue; }
        set { SetDoubleValue(value); }
      }
      public Builder SetDoubleValue(double value) {
        result.hasDoubleValue = true;
        result.doubleValue_ = value;
        return this;
      }
      public Builder ClearDoubleValue() {
        result.hasDoubleValue = false;
        result.doubleValue_ = 0D;
        return this;
      }
      
      public bool HasStringValue {
        get { return result.HasStringValue; }
      }
      public string StringValue {
        get { return result.StringValue; }
        set { SetStringValue(value); }
      }
      public Builder SetStringValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasStringValue = true;
        result.stringValue_ = value;
        return this;
      }
      public Builder ClearStringValue() {
        result.hasStringValue = false;
        result.stringValue_ = "";
        return this;
      }
      
      public bool HasIsNull {
        get { return result.HasIsNull; }
      }
      public bool IsNull {
        get { return result.IsNull; }
        set { SetIsNull(value); }
      }
      public Builder SetIsNull(bool value) {
        result.hasIsNull = true;
        result.isNull_ = value;
        return this;
      }
      public Builder ClearIsNull() {
        result.hasIsNull = false;
        result.isNull_ = false;
        return this;
      }
      
      public bool HasObjectIdValue {
        get { return result.HasObjectIdValue; }
      }
      [global::System.CLSCompliant(false)]
      public uint ObjectIdValue {
        get { return result.ObjectIdValue; }
        set { SetObjectIdValue(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetObjectIdValue(uint value) {
        result.hasObjectIdValue = true;
        result.objectIdValue_ = value;
        return this;
      }
      public Builder ClearObjectIdValue() {
        result.hasObjectIdValue = false;
        result.objectIdValue_ = 0;
        return this;
      }
    }
    static RpcParameter() {
      object.ReferenceEquals(global::NanoRpc.RpcMessageTypes.Descriptor, null);
    }
  }
  
  public sealed partial class RpcResult : pb::GeneratedMessage<RpcResult, RpcResult.Builder> {
    private static readonly RpcResult defaultInstance = new Builder().BuildPartial();
    public static RpcResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcResult DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RpcResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypes.internal__static_NanoRpc_RpcResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RpcResult, RpcResult.Builder> InternalFieldAccessors {
      get { return global::NanoRpc.RpcMessageTypes.internal__static_NanoRpc_RpcResult__FieldAccessorTable; }
    }
    
    public const int StatusFieldNumber = 1;
    private bool hasStatus;
    private global::NanoRpc.RpcStatus status_ = global::NanoRpc.RpcStatus.RpcSucceeded;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::NanoRpc.RpcStatus Status {
      get { return status_; }
    }
    
    public const int ErrorMessageFieldNumber = 2;
    private bool hasErrorMessage;
    private string errorMessage_ = "";
    public bool HasErrorMessage {
      get { return hasErrorMessage; }
    }
    public string ErrorMessage {
      get { return errorMessage_; }
    }
    
    public const int CallResultFieldNumber = 3;
    private bool hasCallResult;
    private global::NanoRpc.RpcParameter callResult_ = global::NanoRpc.RpcParameter.DefaultInstance;
    public bool HasCallResult {
      get { return hasCallResult; }
    }
    public global::NanoRpc.RpcParameter CallResult {
      get { return callResult_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasStatus) {
        output.WriteEnum(1, (int) Status);
      }
      if (HasErrorMessage) {
        output.WriteString(2, ErrorMessage);
      }
      if (HasCallResult) {
        output.WriteMessage(3, CallResult);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Status);
        }
        if (HasErrorMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ErrorMessage);
        }
        if (HasCallResult) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CallResult);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RpcResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcResult ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcResult ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcResult prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RpcResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RpcResult result = new RpcResult();
      
      protected override RpcResult MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RpcResult();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NanoRpc.RpcResult.Descriptor; }
      }
      
      public override RpcResult DefaultInstanceForType {
        get { return global::NanoRpc.RpcResult.DefaultInstance; }
      }
      
      public override RpcResult BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        RpcResult returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RpcResult) {
          return MergeFrom((RpcResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcResult other) {
        if (other == global::NanoRpc.RpcResult.DefaultInstance) return this;
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasErrorMessage) {
          ErrorMessage = other.ErrorMessage;
        }
        if (other.HasCallResult) {
          MergeCallResult(other.CallResult);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::NanoRpc.RpcStatus), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Status = (global::NanoRpc.RpcStatus) rawValue;
              }
              break;
            }
            case 18: {
              ErrorMessage = input.ReadString();
              break;
            }
            case 26: {
              global::NanoRpc.RpcParameter.Builder subBuilder = global::NanoRpc.RpcParameter.CreateBuilder();
              if (HasCallResult) {
                subBuilder.MergeFrom(CallResult);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CallResult = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasStatus {
       get { return result.HasStatus; }
      }
      public global::NanoRpc.RpcStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::NanoRpc.RpcStatus value) {
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        result.hasStatus = false;
        result.status_ = global::NanoRpc.RpcStatus.RpcSucceeded;
        return this;
      }
      
      public bool HasErrorMessage {
        get { return result.HasErrorMessage; }
      }
      public string ErrorMessage {
        get { return result.ErrorMessage; }
        set { SetErrorMessage(value); }
      }
      public Builder SetErrorMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasErrorMessage = true;
        result.errorMessage_ = value;
        return this;
      }
      public Builder ClearErrorMessage() {
        result.hasErrorMessage = false;
        result.errorMessage_ = "";
        return this;
      }
      
      public bool HasCallResult {
       get { return result.HasCallResult; }
      }
      public global::NanoRpc.RpcParameter CallResult {
        get { return result.CallResult; }
        set { SetCallResult(value); }
      }
      public Builder SetCallResult(global::NanoRpc.RpcParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCallResult = true;
        result.callResult_ = value;
        return this;
      }
      public Builder SetCallResult(global::NanoRpc.RpcParameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasCallResult = true;
        result.callResult_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCallResult(global::NanoRpc.RpcParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasCallResult &&
            result.callResult_ != global::NanoRpc.RpcParameter.DefaultInstance) {
            result.callResult_ = global::NanoRpc.RpcParameter.CreateBuilder(result.callResult_).MergeFrom(value).BuildPartial();
        } else {
          result.callResult_ = value;
        }
        result.hasCallResult = true;
        return this;
      }
      public Builder ClearCallResult() {
        result.hasCallResult = false;
        result.callResult_ = global::NanoRpc.RpcParameter.DefaultInstance;
        return this;
      }
    }
    static RpcResult() {
      object.ReferenceEquals(global::NanoRpc.RpcMessageTypes.Descriptor, null);
    }
  }
  
  public sealed partial class RpcCall : pb::GeneratedMessage<RpcCall, RpcCall.Builder> {
    private static readonly RpcCall defaultInstance = new Builder().BuildPartial();
    public static RpcCall DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcCall DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RpcCall ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypes.internal__static_NanoRpc_RpcCall__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RpcCall, RpcCall.Builder> InternalFieldAccessors {
      get { return global::NanoRpc.RpcMessageTypes.internal__static_NanoRpc_RpcCall__FieldAccessorTable; }
    }
    
    public const int ServiceFieldNumber = 1;
    private bool hasService;
    private string service_ = "";
    public bool HasService {
      get { return hasService; }
    }
    public string Service {
      get { return service_; }
    }
    
    public const int MethodFieldNumber = 2;
    private bool hasMethod;
    private string method_ = "";
    public bool HasMethod {
      get { return hasMethod; }
    }
    public string Method {
      get { return method_; }
    }
    
    public const int ParametersFieldNumber = 3;
    private pbc::PopsicleList<global::NanoRpc.RpcParameter> parameters_ = new pbc::PopsicleList<global::NanoRpc.RpcParameter>();
    public scg::IList<global::NanoRpc.RpcParameter> ParametersList {
      get { return parameters_; }
    }
    public int ParametersCount {
      get { return parameters_.Count; }
    }
    public global::NanoRpc.RpcParameter GetParameters(int index) {
      return parameters_[index];
    }
    
    public const int ExpectsResultFieldNumber = 4;
    private bool hasExpectsResult;
    private bool expectsResult_ = false;
    public bool HasExpectsResult {
      get { return hasExpectsResult; }
    }
    public bool ExpectsResult {
      get { return expectsResult_; }
    }
    
    public const int ObjectIdFieldNumber = 5;
    private bool hasObjectId;
    private uint objectId_ = 0;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ObjectId {
      get { return objectId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasService) {
        output.WriteString(1, Service);
      }
      if (HasMethod) {
        output.WriteString(2, Method);
      }
      foreach (global::NanoRpc.RpcParameter element in ParametersList) {
        output.WriteMessage(3, element);
      }
      if (HasExpectsResult) {
        output.WriteBool(4, ExpectsResult);
      }
      if (HasObjectId) {
        output.WriteUInt32(5, ObjectId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasService) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Service);
        }
        if (HasMethod) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Method);
        }
        foreach (global::NanoRpc.RpcParameter element in ParametersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (HasExpectsResult) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, ExpectsResult);
        }
        if (HasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, ObjectId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RpcCall ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcCall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcCall ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcCall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcCall ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcCall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcCall ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcCall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcCall ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcCall ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcCall prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RpcCall, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RpcCall result = new RpcCall();
      
      protected override RpcCall MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RpcCall();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NanoRpc.RpcCall.Descriptor; }
      }
      
      public override RpcCall DefaultInstanceForType {
        get { return global::NanoRpc.RpcCall.DefaultInstance; }
      }
      
      public override RpcCall BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.parameters_.MakeReadOnly();
        RpcCall returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RpcCall) {
          return MergeFrom((RpcCall) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcCall other) {
        if (other == global::NanoRpc.RpcCall.DefaultInstance) return this;
        if (other.HasService) {
          Service = other.Service;
        }
        if (other.HasMethod) {
          Method = other.Method;
        }
        if (other.parameters_.Count != 0) {
          base.AddRange(other.parameters_, result.parameters_);
        }
        if (other.HasExpectsResult) {
          ExpectsResult = other.ExpectsResult;
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Service = input.ReadString();
              break;
            }
            case 18: {
              Method = input.ReadString();
              break;
            }
            case 26: {
              global::NanoRpc.RpcParameter.Builder subBuilder = global::NanoRpc.RpcParameter.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddParameters(subBuilder.BuildPartial());
              break;
            }
            case 32: {
              ExpectsResult = input.ReadBool();
              break;
            }
            case 40: {
              ObjectId = input.ReadUInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasService {
        get { return result.HasService; }
      }
      public string Service {
        get { return result.Service; }
        set { SetService(value); }
      }
      public Builder SetService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasService = true;
        result.service_ = value;
        return this;
      }
      public Builder ClearService() {
        result.hasService = false;
        result.service_ = "";
        return this;
      }
      
      public bool HasMethod {
        get { return result.HasMethod; }
      }
      public string Method {
        get { return result.Method; }
        set { SetMethod(value); }
      }
      public Builder SetMethod(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMethod = true;
        result.method_ = value;
        return this;
      }
      public Builder ClearMethod() {
        result.hasMethod = false;
        result.method_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::NanoRpc.RpcParameter> ParametersList {
        get { return result.parameters_; }
      }
      public int ParametersCount {
        get { return result.ParametersCount; }
      }
      public global::NanoRpc.RpcParameter GetParameters(int index) {
        return result.GetParameters(index);
      }
      public Builder SetParameters(int index, global::NanoRpc.RpcParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.parameters_[index] = value;
        return this;
      }
      public Builder SetParameters(int index, global::NanoRpc.RpcParameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.parameters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParameters(global::NanoRpc.RpcParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.parameters_.Add(value);
        return this;
      }
      public Builder AddParameters(global::NanoRpc.RpcParameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.parameters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParameters(scg::IEnumerable<global::NanoRpc.RpcParameter> values) {
        base.AddRange(values, result.parameters_);
        return this;
      }
      public Builder ClearParameters() {
        result.parameters_.Clear();
        return this;
      }
      
      public bool HasExpectsResult {
        get { return result.HasExpectsResult; }
      }
      public bool ExpectsResult {
        get { return result.ExpectsResult; }
        set { SetExpectsResult(value); }
      }
      public Builder SetExpectsResult(bool value) {
        result.hasExpectsResult = true;
        result.expectsResult_ = value;
        return this;
      }
      public Builder ClearExpectsResult() {
        result.hasExpectsResult = false;
        result.expectsResult_ = false;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.HasObjectId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetObjectId(uint value) {
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        result.hasObjectId = false;
        result.objectId_ = 0;
        return this;
      }
    }
    static RpcCall() {
      object.ReferenceEquals(global::NanoRpc.RpcMessageTypes.Descriptor, null);
    }
  }
  
  public sealed partial class RpcMessage : pb::GeneratedMessage<RpcMessage, RpcMessage.Builder> {
    private static readonly RpcMessage defaultInstance = new Builder().BuildPartial();
    public static RpcMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override RpcMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NanoRpc.RpcMessageTypes.internal__static_NanoRpc_RpcMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RpcMessage, RpcMessage.Builder> InternalFieldAccessors {
      get { return global::NanoRpc.RpcMessageTypes.internal__static_NanoRpc_RpcMessage__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_ = 0;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int CallFieldNumber = 2;
    private bool hasCall;
    private global::NanoRpc.RpcCall call_ = global::NanoRpc.RpcCall.DefaultInstance;
    public bool HasCall {
      get { return hasCall; }
    }
    public global::NanoRpc.RpcCall Call {
      get { return call_; }
    }
    
    public const int ResultFieldNumber = 3;
    private bool hasResult;
    private global::NanoRpc.RpcResult result_ = global::NanoRpc.RpcResult.DefaultInstance;
    public bool HasResult {
      get { return hasResult; }
    }
    public global::NanoRpc.RpcResult Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteInt32(1, Id);
      }
      if (HasCall) {
        output.WriteMessage(2, Call);
      }
      if (HasResult) {
        output.WriteMessage(3, Result);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (HasCall) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Call);
        }
        if (HasResult) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Result);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RpcMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<RpcMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      RpcMessage result = new RpcMessage();
      
      protected override RpcMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new RpcMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NanoRpc.RpcMessage.Descriptor; }
      }
      
      public override RpcMessage DefaultInstanceForType {
        get { return global::NanoRpc.RpcMessage.DefaultInstance; }
      }
      
      public override RpcMessage BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        RpcMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RpcMessage) {
          return MergeFrom((RpcMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcMessage other) {
        if (other == global::NanoRpc.RpcMessage.DefaultInstance) return this;
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasCall) {
          MergeCall(other.Call);
        }
        if (other.HasResult) {
          MergeResult(other.Result);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Id = input.ReadInt32();
              break;
            }
            case 18: {
              global::NanoRpc.RpcCall.Builder subBuilder = global::NanoRpc.RpcCall.CreateBuilder();
              if (HasCall) {
                subBuilder.MergeFrom(Call);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Call = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::NanoRpc.RpcResult.Builder subBuilder = global::NanoRpc.RpcResult.CreateBuilder();
              if (HasResult) {
                subBuilder.MergeFrom(Result);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Result = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
        get { return result.HasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasCall {
       get { return result.HasCall; }
      }
      public global::NanoRpc.RpcCall Call {
        get { return result.Call; }
        set { SetCall(value); }
      }
      public Builder SetCall(global::NanoRpc.RpcCall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCall = true;
        result.call_ = value;
        return this;
      }
      public Builder SetCall(global::NanoRpc.RpcCall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasCall = true;
        result.call_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCall(global::NanoRpc.RpcCall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasCall &&
            result.call_ != global::NanoRpc.RpcCall.DefaultInstance) {
            result.call_ = global::NanoRpc.RpcCall.CreateBuilder(result.call_).MergeFrom(value).BuildPartial();
        } else {
          result.call_ = value;
        }
        result.hasCall = true;
        return this;
      }
      public Builder ClearCall() {
        result.hasCall = false;
        result.call_ = global::NanoRpc.RpcCall.DefaultInstance;
        return this;
      }
      
      public bool HasResult {
       get { return result.HasResult; }
      }
      public global::NanoRpc.RpcResult Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(global::NanoRpc.RpcResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder SetResult(global::NanoRpc.RpcResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasResult = true;
        result.result_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResult(global::NanoRpc.RpcResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasResult &&
            result.result_ != global::NanoRpc.RpcResult.DefaultInstance) {
            result.result_ = global::NanoRpc.RpcResult.CreateBuilder(result.result_).MergeFrom(value).BuildPartial();
        } else {
          result.result_ = value;
        }
        result.hasResult = true;
        return this;
      }
      public Builder ClearResult() {
        result.hasResult = false;
        result.result_ = global::NanoRpc.RpcResult.DefaultInstance;
        return this;
      }
    }
    static RpcMessage() {
      object.ReferenceEquals(global::NanoRpc.RpcMessageTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}
