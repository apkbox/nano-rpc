// Generated by the nanorpc protobuf plugin.
// If you make any local change, they will be lost.
// source: arizona_api_server.proto
#ifndef NANORPC_arizona_5fapi_5fserver_2eproto__INCLUDED
#define NANORPC_arizona_5fapi_5fserver_2eproto__INCLUDED

#include "arizona_api_server.pb.h"
#include "nanorpc/nanorpc2.h"

namespace arizona_api_service {

class SoftwareUpdateEvents {
public:
  virtual ~SoftwareUpdateEvents() {}

  virtual void PackageListChanged() = 0;
};

class ProductInfoInterface {
public:
  virtual ~ProductInfoInterface() {}

  virtual void GetProductInfo(ProductInfo *out__) = 0;
};

class SoftwareUpdateInterface {
public:
  virtual ~SoftwareUpdateInterface() {}

  virtual void GetAvailablePackages(SoftwarePackageList *out__) = 0;
  virtual bool StartPackageInstallation(const std::string &value) = 0;
  virtual bool DeletePackage(const std::string &value) = 0;
  virtual void GetPackageStorePath(std::string *out__) = 0;
};

class SoftwareUpdateEvents_Stub : public nanorpc::ServiceInterface {
public:
  explicit SoftwareUpdateEvents_Stub(SoftwareUpdateEvents* impl, nanorpc::ObjectManagerInterface* object_manager)
      : impl_(impl), object_manager_(object_manager) {}

  const std::string &GetInterfaceName() const override;
  bool CallMethod(const nanorpc::RpcCall &rpc_call, nanorpc::RpcResult *rpc_result) override;

private:
  static const std::string kServiceName;

  SoftwareUpdateEvents* impl_;
  nanorpc::ObjectManagerInterface* object_manager_;
};

class ProductInfoInterface_Stub : public nanorpc::ServiceInterface {
public:
  explicit ProductInfoInterface_Stub(ProductInfoInterface* impl, nanorpc::ObjectManagerInterface* object_manager)
      : impl_(impl), object_manager_(object_manager) {}

  const std::string &GetInterfaceName() const override;
  bool CallMethod(const nanorpc::RpcCall &rpc_call, nanorpc::RpcResult *rpc_result) override;

private:
  static const std::string kServiceName;

  ProductInfoInterface* impl_;
  nanorpc::ObjectManagerInterface* object_manager_;
};

class SoftwareUpdateInterface_Stub : public nanorpc::ServiceInterface {
public:
  explicit SoftwareUpdateInterface_Stub(SoftwareUpdateInterface* impl, nanorpc::ObjectManagerInterface* object_manager)
      : impl_(impl), object_manager_(object_manager) {}

  const std::string &GetInterfaceName() const override;
  bool CallMethod(const nanorpc::RpcCall &rpc_call, nanorpc::RpcResult *rpc_result) override;

private:
  static const std::string kServiceName;

  SoftwareUpdateInterface* impl_;
  nanorpc::ObjectManagerInterface* object_manager_;
};

class SoftwareUpdateEvents_EventProxy : public SoftwareUpdateEvents {
public:
  explicit SoftwareUpdateEvents_EventProxy(nanorpc::EventSourceInterface *event_source)
      : event_source_(event_source) {}

  virtual ~SoftwareUpdateEvents_EventProxy() {}

  void PackageListChanged() override;

private:
  nanorpc::EventSourceInterface *event_source_;
};

class ProductInfoInterface_Proxy : public ProductInfoInterface {
public:
  explicit ProductInfoInterface_Proxy(nanorpc::ServiceProxyInterface *client, nanorpc::RpcObjectId object_id = 0)
      : client_(client), object_id_(object_id) {}

  virtual ~ProductInfoInterface_Proxy();

  void GetProductInfo(ProductInfo *out__) override;

private:
  nanorpc::ServiceProxyInterface *client_;
  nanorpc::RpcObjectId object_id_;
};

class SoftwareUpdateInterface_Proxy : public SoftwareUpdateInterface {
public:
  explicit SoftwareUpdateInterface_Proxy(nanorpc::ServiceProxyInterface *client, nanorpc::RpcObjectId object_id = 0)
      : client_(client), object_id_(object_id) {}

  virtual ~SoftwareUpdateInterface_Proxy();

  void GetAvailablePackages(SoftwarePackageList *out__) override;
  bool StartPackageInstallation(const std::string &value) override;
  bool DeletePackage(const std::string &value) override;
  void GetPackageStorePath(std::string *out__) override;

private:
  nanorpc::ServiceProxyInterface *client_;
  nanorpc::RpcObjectId object_id_;
};

}  // namespace arizona_api_service


#endif  // NANORPC_arizona_5fapi_5fserver_2eproto__INCLUDED
