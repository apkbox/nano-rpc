Index: src/ProtoGen/Generator.cs
===================================================================
--- src/ProtoGen/Generator.cs	(revision 1)
+++ src/ProtoGen/Generator.cs	(working copy)
@@ -90,7 +90,7 @@
 
     private string GetOutputFile(FileDescriptor descriptor) {
       CSharpFileOptions fileOptions = descriptor.CSharpOptions;
-      string filename = descriptor.CSharpOptions.UmbrellaClassname + ".cs";
+      string filename = descriptor.CSharpOptions.UmbrellaClassname + options.OutputFileSuffix;
       string outputDirectory = options.OutputDirectory;
       if (fileOptions.ExpandNamespaceDirectories) {
         string package = fileOptions.Namespace;
Index: src/ProtoGen/GeneratorOptions.cs
===================================================================
--- src/ProtoGen/GeneratorOptions.cs	(revision 1)
+++ src/ProtoGen/GeneratorOptions.cs	(working copy)
@@ -45,6 +45,7 @@
   /// </summary>
   public sealed class GeneratorOptions {
 
+    public string OutputFileSuffix { get; set; }
     public string OutputDirectory { get; set; }
     public IList<string> InputFiles { get; set; }
 
Index: src/ProtoGen/Program.cs
===================================================================
--- src/ProtoGen/Program.cs	(revision 1)
+++ src/ProtoGen/Program.cs	(working copy)
@@ -71,8 +71,29 @@
       //string baseDir = "c:\\Users\\Jon\\Documents\\Visual Studio 2008\\Projects\\ProtocolBuffers";
       //options.OutputDirectory = baseDir + "\\tmp";
       //options.InputFiles = new[] { baseDir + "\\protos\\nwind-solo.protobin" };
-      options.OutputDirectory = ".";
-      options.InputFiles = args;
+
+      options.OutputFileSuffix = string.Empty;
+      options.OutputDirectory = string.Empty;
+
+      List<string> arguments = new List<string>();
+      foreach (var s in args)
+      {
+          if (s.StartsWith("--output-extension=")) {
+              options.OutputFileSuffix = s.Split(new[] { '=' }, 2)[1].Trim();
+          } else if (s.StartsWith("--output-directory=")) {
+              options.OutputDirectory = s.Split(new[] { '=' }, 2)[1].Trim();
+          } else {
+              arguments.Add(s);
+          }
+      }
+
+      if (options.OutputFileSuffix.Length == 0)
+          options.OutputFileSuffix = ".cs";
+
+      if (options.OutputDirectory.Length == 0)
+          options.OutputDirectory = ".";
+
+      options.InputFiles = arguments;
       return options;
     }
   }
