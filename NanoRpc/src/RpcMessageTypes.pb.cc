// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RpcMessageTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NanoRpc {

namespace {

const ::google::protobuf::Descriptor* RpcParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RpcMessageTypes_2eproto() {
  protobuf_AddDesc_RpcMessageTypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RpcMessageTypes.proto");
  GOOGLE_CHECK(file != NULL);
  RpcParameter_descriptor_ = file->message_type(0);
  static const int RpcParameter_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, proto_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, bool_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, int32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, int64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, uint32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, uint64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, sint32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, sint64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, fixed32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, fixed64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, sfixed32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, sfixed64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, is_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, object_id_value_),
  };
  RpcParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcParameter_descriptor_,
      RpcParameter::default_instance_,
      RpcParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcParameter));
  RpcResult_descriptor_ = file->message_type(1);
  static const int RpcResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResult, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResult, call_result_),
  };
  RpcResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcResult_descriptor_,
      RpcResult::default_instance_,
      RpcResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcResult));
  RpcCall_descriptor_ = file->message_type(2);
  static const int RpcCall_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, expects_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, object_id_),
  };
  RpcCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcCall_descriptor_,
      RpcCall::default_instance_,
      RpcCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcCall));
  RpcMessage_descriptor_ = file->message_type(3);
  static const int RpcMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, result_),
  };
  RpcMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcMessage_descriptor_,
      RpcMessage::default_instance_,
      RpcMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcMessage));
  RpcStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RpcMessageTypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcParameter_descriptor_, &RpcParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcResult_descriptor_, &RpcResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcCall_descriptor_, &RpcCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcMessage_descriptor_, &RpcMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RpcMessageTypes_2eproto() {
  delete RpcParameter::default_instance_;
  delete RpcParameter_reflection_;
  delete RpcResult::default_instance_;
  delete RpcResult_reflection_;
  delete RpcCall::default_instance_;
  delete RpcCall_reflection_;
  delete RpcMessage::default_instance_;
  delete RpcMessage_reflection_;
}

void protobuf_AddDesc_RpcMessageTypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025RpcMessageTypes.proto\022\007NanoRpc\"\202\003\n\014Rpc"
    "Parameter\022\023\n\013proto_value\030\001 \001(\014\022\022\n\nbool_v"
    "alue\030\002 \001(\010\022\023\n\013int32_value\030\003 \001(\005\022\023\n\013int64"
    "_value\030\004 \001(\003\022\024\n\014uint32_value\030\005 \001(\r\022\024\n\014ui"
    "nt64_value\030\006 \001(\004\022\024\n\014sint32_value\030\007 \001(\021\022\024"
    "\n\014sint64_value\030\010 \001(\022\022\025\n\rfixed32_value\030\t "
    "\001(\007\022\025\n\rfixed64_value\030\n \001(\006\022\026\n\016sfixed32_v"
    "alue\030\013 \001(\017\022\026\n\016sfixed64_value\030\014 \001(\020\022\023\n\013fl"
    "oat_value\030\r \001(\002\022\024\n\014double_value\030\016 \001(\001\022\024\n"
    "\014string_value\030\017 \001(\t\022\017\n\007is_null\030\020 \001(\010\022\027\n\017"
    "object_id_value\030\021 \001(\r\"r\n\tRpcResult\022\"\n\006st"
    "atus\030\001 \001(\0162\022.NanoRpc.RpcStatus\022\025\n\rerror_"
    "message\030\002 \001(\t\022*\n\013call_result\030\003 \001(\0132\025.Nan"
    "oRpc.RpcParameter\"\200\001\n\007RpcCall\022\017\n\007service"
    "\030\001 \001(\t\022\016\n\006method\030\002 \001(\t\022)\n\nparameters\030\003 \003"
    "(\0132\025.NanoRpc.RpcParameter\022\026\n\016expects_res"
    "ult\030\004 \001(\010\022\021\n\tobject_id\030\005 \001(\r\"\\\n\nRpcMessa"
    "ge\022\n\n\002id\030\001 \001(\005\022\036\n\004call\030\002 \001(\0132\020.NanoRpc.R"
    "pcCall\022\"\n\006result\030\003 \001(\0132\022.NanoRpc.RpcResu"
    "lt*\226\001\n\tRpcStatus\022\020\n\014RpcSucceeded\020\000\022\025\n\021Rp"
    "cChannelFailure\020\001\022\024\n\020RpcUnknownMethod\020\002\022"
    "\024\n\020RpcProtocolError\020\003\022\027\n\023RpcUnknownInter"
    "face\020\004\022\033\n\027RpcInvalidCallParameter\020\005", 915);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RpcMessageTypes.proto", &protobuf_RegisterTypes);
  RpcParameter::default_instance_ = new RpcParameter();
  RpcResult::default_instance_ = new RpcResult();
  RpcCall::default_instance_ = new RpcCall();
  RpcMessage::default_instance_ = new RpcMessage();
  RpcParameter::default_instance_->InitAsDefaultInstance();
  RpcResult::default_instance_->InitAsDefaultInstance();
  RpcCall::default_instance_->InitAsDefaultInstance();
  RpcMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RpcMessageTypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RpcMessageTypes_2eproto {
  StaticDescriptorInitializer_RpcMessageTypes_2eproto() {
    protobuf_AddDesc_RpcMessageTypes_2eproto();
  }
} static_descriptor_initializer_RpcMessageTypes_2eproto_;

const ::google::protobuf::EnumDescriptor* RpcStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcStatus_descriptor_;
}
bool RpcStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RpcParameter::kProtoValueFieldNumber;
const int RpcParameter::kBoolValueFieldNumber;
const int RpcParameter::kInt32ValueFieldNumber;
const int RpcParameter::kInt64ValueFieldNumber;
const int RpcParameter::kUint32ValueFieldNumber;
const int RpcParameter::kUint64ValueFieldNumber;
const int RpcParameter::kSint32ValueFieldNumber;
const int RpcParameter::kSint64ValueFieldNumber;
const int RpcParameter::kFixed32ValueFieldNumber;
const int RpcParameter::kFixed64ValueFieldNumber;
const int RpcParameter::kSfixed32ValueFieldNumber;
const int RpcParameter::kSfixed64ValueFieldNumber;
const int RpcParameter::kFloatValueFieldNumber;
const int RpcParameter::kDoubleValueFieldNumber;
const int RpcParameter::kStringValueFieldNumber;
const int RpcParameter::kIsNullFieldNumber;
const int RpcParameter::kObjectIdValueFieldNumber;
#endif  // !_MSC_VER

RpcParameter::RpcParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcParameter::InitAsDefaultInstance() {
}

RpcParameter::RpcParameter(const RpcParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcParameter::SharedCtor() {
  _cached_size_ = 0;
  proto_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bool_value_ = false;
  int32_value_ = 0;
  int64_value_ = GOOGLE_LONGLONG(0);
  uint32_value_ = 0u;
  uint64_value_ = GOOGLE_ULONGLONG(0);
  sint32_value_ = 0;
  sint64_value_ = GOOGLE_LONGLONG(0);
  fixed32_value_ = 0u;
  fixed64_value_ = GOOGLE_ULONGLONG(0);
  sfixed32_value_ = 0;
  sfixed64_value_ = GOOGLE_LONGLONG(0);
  float_value_ = 0;
  double_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_null_ = false;
  object_id_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcParameter::~RpcParameter() {
  SharedDtor();
}

void RpcParameter::SharedDtor() {
  if (proto_value_ != &::google::protobuf::internal::kEmptyString) {
    delete proto_value_;
  }
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void RpcParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcParameter_descriptor_;
}

const RpcParameter& RpcParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();  return *default_instance_;
}

RpcParameter* RpcParameter::default_instance_ = NULL;

RpcParameter* RpcParameter::New() const {
  return new RpcParameter;
}

void RpcParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_proto_value()) {
      if (proto_value_ != &::google::protobuf::internal::kEmptyString) {
        proto_value_->clear();
      }
    }
    bool_value_ = false;
    int32_value_ = 0;
    int64_value_ = GOOGLE_LONGLONG(0);
    uint32_value_ = 0u;
    uint64_value_ = GOOGLE_ULONGLONG(0);
    sint32_value_ = 0;
    sint64_value_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fixed32_value_ = 0u;
    fixed64_value_ = GOOGLE_ULONGLONG(0);
    sfixed32_value_ = 0;
    sfixed64_value_ = GOOGLE_LONGLONG(0);
    float_value_ = 0;
    double_value_ = 0;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
    is_null_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    object_id_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes proto_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proto_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bool_value;
        break;
      }
      
      // optional bool bool_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bool_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int32_value;
        break;
      }
      
      // optional int32 int32_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_value_)));
          set_has_int32_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_int64_value;
        break;
      }
      
      // optional int64 int64_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64_value_)));
          set_has_int64_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uint32_value;
        break;
      }
      
      // optional uint32 uint32_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_value_)));
          set_has_uint32_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uint64_value;
        break;
      }
      
      // optional uint64 uint64_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_value_)));
          set_has_uint64_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sint32_value;
        break;
      }
      
      // optional sint32 sint32_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sint32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sint32_value_)));
          set_has_sint32_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sint64_value;
        break;
      }
      
      // optional sint64 sint64_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sint64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint64_value_)));
          set_has_sint64_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_fixed32_value;
        break;
      }
      
      // optional fixed32 fixed32_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fixed32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fixed32_value_)));
          set_has_fixed32_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_fixed64_value;
        break;
      }
      
      // optional fixed64 fixed64_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fixed64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fixed64_value_)));
          set_has_fixed64_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_sfixed32_value;
        break;
      }
      
      // optional sfixed32 sfixed32_value = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sfixed32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sfixed32_value_)));
          set_has_sfixed32_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_sfixed64_value;
        break;
      }
      
      // optional sfixed64 sfixed64_value = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sfixed64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &sfixed64_value_)));
          set_has_sfixed64_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_float_value;
        break;
      }
      
      // optional float float_value = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_double_value;
        break;
      }
      
      // optional double double_value = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_string_value;
        break;
      }
      
      // optional string string_value = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_is_null;
        break;
      }
      
      // optional bool is_null = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_null_)));
          set_has_is_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_object_id_value;
        break;
      }
      
      // optional uint32 object_id_value = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &object_id_value_)));
          set_has_object_id_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes proto_value = 1;
  if (has_proto_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->proto_value(), output);
  }
  
  // optional bool bool_value = 2;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bool_value(), output);
  }
  
  // optional int32 int32_value = 3;
  if (has_int32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int32_value(), output);
  }
  
  // optional int64 int64_value = 4;
  if (has_int64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int64_value(), output);
  }
  
  // optional uint32 uint32_value = 5;
  if (has_uint32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32_value(), output);
  }
  
  // optional uint64 uint64_value = 6;
  if (has_uint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->uint64_value(), output);
  }
  
  // optional sint32 sint32_value = 7;
  if (has_sint32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->sint32_value(), output);
  }
  
  // optional sint64 sint64_value = 8;
  if (has_sint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->sint64_value(), output);
  }
  
  // optional fixed32 fixed32_value = 9;
  if (has_fixed32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->fixed32_value(), output);
  }
  
  // optional fixed64 fixed64_value = 10;
  if (has_fixed64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->fixed64_value(), output);
  }
  
  // optional sfixed32 sfixed32_value = 11;
  if (has_sfixed32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(11, this->sfixed32_value(), output);
  }
  
  // optional sfixed64 sfixed64_value = 12;
  if (has_sfixed64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->sfixed64_value(), output);
  }
  
  // optional float float_value = 13;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->float_value(), output);
  }
  
  // optional double double_value = 14;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->double_value(), output);
  }
  
  // optional string string_value = 15;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->string_value(), output);
  }
  
  // optional bool is_null = 16;
  if (has_is_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_null(), output);
  }
  
  // optional uint32 object_id_value = 17;
  if (has_object_id_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->object_id_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes proto_value = 1;
  if (has_proto_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->proto_value(), target);
  }
  
  // optional bool bool_value = 2;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bool_value(), target);
  }
  
  // optional int32 int32_value = 3;
  if (has_int32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int32_value(), target);
  }
  
  // optional int64 int64_value = 4;
  if (has_int64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int64_value(), target);
  }
  
  // optional uint32 uint32_value = 5;
  if (has_uint32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_value(), target);
  }
  
  // optional uint64 uint64_value = 6;
  if (has_uint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->uint64_value(), target);
  }
  
  // optional sint32 sint32_value = 7;
  if (has_sint32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->sint32_value(), target);
  }
  
  // optional sint64 sint64_value = 8;
  if (has_sint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->sint64_value(), target);
  }
  
  // optional fixed32 fixed32_value = 9;
  if (has_fixed32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->fixed32_value(), target);
  }
  
  // optional fixed64 fixed64_value = 10;
  if (has_fixed64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->fixed64_value(), target);
  }
  
  // optional sfixed32 sfixed32_value = 11;
  if (has_sfixed32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(11, this->sfixed32_value(), target);
  }
  
  // optional sfixed64 sfixed64_value = 12;
  if (has_sfixed64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->sfixed64_value(), target);
  }
  
  // optional float float_value = 13;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->float_value(), target);
  }
  
  // optional double double_value = 14;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->double_value(), target);
  }
  
  // optional string string_value = 15;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->string_value(), target);
  }
  
  // optional bool is_null = 16;
  if (has_is_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_null(), target);
  }
  
  // optional uint32 object_id_value = 17;
  if (has_object_id_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->object_id_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes proto_value = 1;
    if (has_proto_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proto_value());
    }
    
    // optional bool bool_value = 2;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }
    
    // optional int32 int32_value = 3;
    if (has_int32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_value());
    }
    
    // optional int64 int64_value = 4;
    if (has_int64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_value());
    }
    
    // optional uint32 uint32_value = 5;
    if (has_uint32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_value());
    }
    
    // optional uint64 uint64_value = 6;
    if (has_uint64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_value());
    }
    
    // optional sint32 sint32_value = 7;
    if (has_sint32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sint32_value());
    }
    
    // optional sint64 sint64_value = 8;
    if (has_sint64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint64_value());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 fixed32_value = 9;
    if (has_fixed32_value()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 fixed64_value = 10;
    if (has_fixed64_value()) {
      total_size += 1 + 8;
    }
    
    // optional sfixed32 sfixed32_value = 11;
    if (has_sfixed32_value()) {
      total_size += 1 + 4;
    }
    
    // optional sfixed64 sfixed64_value = 12;
    if (has_sfixed64_value()) {
      total_size += 1 + 8;
    }
    
    // optional float float_value = 13;
    if (has_float_value()) {
      total_size += 1 + 4;
    }
    
    // optional double double_value = 14;
    if (has_double_value()) {
      total_size += 1 + 8;
    }
    
    // optional string string_value = 15;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }
    
    // optional bool is_null = 16;
    if (has_is_null()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 object_id_value = 17;
    if (has_object_id_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->object_id_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcParameter::MergeFrom(const RpcParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_value()) {
      set_proto_value(from.proto_value());
    }
    if (from.has_bool_value()) {
      set_bool_value(from.bool_value());
    }
    if (from.has_int32_value()) {
      set_int32_value(from.int32_value());
    }
    if (from.has_int64_value()) {
      set_int64_value(from.int64_value());
    }
    if (from.has_uint32_value()) {
      set_uint32_value(from.uint32_value());
    }
    if (from.has_uint64_value()) {
      set_uint64_value(from.uint64_value());
    }
    if (from.has_sint32_value()) {
      set_sint32_value(from.sint32_value());
    }
    if (from.has_sint64_value()) {
      set_sint64_value(from.sint64_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fixed32_value()) {
      set_fixed32_value(from.fixed32_value());
    }
    if (from.has_fixed64_value()) {
      set_fixed64_value(from.fixed64_value());
    }
    if (from.has_sfixed32_value()) {
      set_sfixed32_value(from.sfixed32_value());
    }
    if (from.has_sfixed64_value()) {
      set_sfixed64_value(from.sfixed64_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
    if (from.has_is_null()) {
      set_is_null(from.is_null());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_object_id_value()) {
      set_object_id_value(from.object_id_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcParameter::CopyFrom(const RpcParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcParameter::IsInitialized() const {
  
  return true;
}

void RpcParameter::Swap(RpcParameter* other) {
  if (other != this) {
    std::swap(proto_value_, other->proto_value_);
    std::swap(bool_value_, other->bool_value_);
    std::swap(int32_value_, other->int32_value_);
    std::swap(int64_value_, other->int64_value_);
    std::swap(uint32_value_, other->uint32_value_);
    std::swap(uint64_value_, other->uint64_value_);
    std::swap(sint32_value_, other->sint32_value_);
    std::swap(sint64_value_, other->sint64_value_);
    std::swap(fixed32_value_, other->fixed32_value_);
    std::swap(fixed64_value_, other->fixed64_value_);
    std::swap(sfixed32_value_, other->sfixed32_value_);
    std::swap(sfixed64_value_, other->sfixed64_value_);
    std::swap(float_value_, other->float_value_);
    std::swap(double_value_, other->double_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(is_null_, other->is_null_);
    std::swap(object_id_value_, other->object_id_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcParameter_descriptor_;
  metadata.reflection = RpcParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpcResult::kStatusFieldNumber;
const int RpcResult::kErrorMessageFieldNumber;
const int RpcResult::kCallResultFieldNumber;
#endif  // !_MSC_VER

RpcResult::RpcResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcResult::InitAsDefaultInstance() {
  call_result_ = const_cast< ::NanoRpc::RpcParameter*>(&::NanoRpc::RpcParameter::default_instance());
}

RpcResult::RpcResult(const RpcResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcResult::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  call_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcResult::~RpcResult() {
  SharedDtor();
}

void RpcResult::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
    delete call_result_;
  }
}

void RpcResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcResult_descriptor_;
}

const RpcResult& RpcResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();  return *default_instance_;
}

RpcResult* RpcResult::default_instance_ = NULL;

RpcResult* RpcResult::New() const {
  return new RpcResult;
}

void RpcResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
    if (has_call_result()) {
      if (call_result_ != NULL) call_result_->::NanoRpc::RpcParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NanoRpc.RpcStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NanoRpc::RpcStatus_IsValid(value)) {
            set_status(static_cast< NanoRpc::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }
      
      // optional string error_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_call_result;
        break;
      }
      
      // optional .NanoRpc.RpcParameter call_result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NanoRpc.RpcStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_message(), output);
  }
  
  // optional .NanoRpc.RpcParameter call_result = 3;
  if (has_call_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->call_result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NanoRpc.RpcStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }
  
  // optional .NanoRpc.RpcParameter call_result = 3;
  if (has_call_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->call_result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NanoRpc.RpcStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }
    
    // optional .NanoRpc.RpcParameter call_result = 3;
    if (has_call_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcResult::MergeFrom(const RpcResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
    if (from.has_call_result()) {
      mutable_call_result()->::NanoRpc::RpcParameter::MergeFrom(from.call_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcResult::CopyFrom(const RpcResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResult::IsInitialized() const {
  
  return true;
}

void RpcResult::Swap(RpcResult* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_message_, other->error_message_);
    std::swap(call_result_, other->call_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcResult_descriptor_;
  metadata.reflection = RpcResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpcCall::kServiceFieldNumber;
const int RpcCall::kMethodFieldNumber;
const int RpcCall::kParametersFieldNumber;
const int RpcCall::kExpectsResultFieldNumber;
const int RpcCall::kObjectIdFieldNumber;
#endif  // !_MSC_VER

RpcCall::RpcCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcCall::InitAsDefaultInstance() {
}

RpcCall::RpcCall(const RpcCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcCall::SharedCtor() {
  _cached_size_ = 0;
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expects_result_ = false;
  object_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcCall::~RpcCall() {
  SharedDtor();
}

void RpcCall::SharedDtor() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (this != default_instance_) {
  }
}

void RpcCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcCall_descriptor_;
}

const RpcCall& RpcCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();  return *default_instance_;
}

RpcCall* RpcCall::default_instance_ = NULL;

RpcCall* RpcCall::New() const {
  return new RpcCall;
}

void RpcCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::kEmptyString) {
        service_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::kEmptyString) {
        method_->clear();
      }
    }
    expects_result_ = false;
    object_id_ = 0u;
  }
  parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_method;
        break;
      }
      
      // optional string method = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameters;
        break;
      }
      
      // repeated .NanoRpc.RpcParameter parameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameters;
        if (input->ExpectTag(32)) goto parse_expects_result;
        break;
      }
      
      // optional bool expects_result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expects_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expects_result_)));
          set_has_expects_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_object_id;
        break;
      }
      
      // optional uint32 object_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service(), output);
  }
  
  // optional string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->method(), output);
  }
  
  // repeated .NanoRpc.RpcParameter parameters = 3;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parameters(i), output);
  }
  
  // optional bool expects_result = 4;
  if (has_expects_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->expects_result(), output);
  }
  
  // optional uint32 object_id = 5;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }
  
  // optional string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }
  
  // repeated .NanoRpc.RpcParameter parameters = 3;
  for (int i = 0; i < this->parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parameters(i), target);
  }
  
  // optional bool expects_result = 4;
  if (has_expects_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->expects_result(), target);
  }
  
  // optional uint32 object_id = 5;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcCall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service = 1;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }
    
    // optional string method = 2;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }
    
    // optional bool expects_result = 4;
    if (has_expects_result()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 object_id = 5;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->object_id());
    }
    
  }
  // repeated .NanoRpc.RpcParameter parameters = 3;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcCall::MergeFrom(const RpcCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_.MergeFrom(from.parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_expects_result()) {
      set_expects_result(from.expects_result());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcCall::CopyFrom(const RpcCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcCall::IsInitialized() const {
  
  return true;
}

void RpcCall::Swap(RpcCall* other) {
  if (other != this) {
    std::swap(service_, other->service_);
    std::swap(method_, other->method_);
    parameters_.Swap(&other->parameters_);
    std::swap(expects_result_, other->expects_result_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcCall_descriptor_;
  metadata.reflection = RpcCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpcMessage::kIdFieldNumber;
const int RpcMessage::kCallFieldNumber;
const int RpcMessage::kResultFieldNumber;
#endif  // !_MSC_VER

RpcMessage::RpcMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcMessage::InitAsDefaultInstance() {
  call_ = const_cast< ::NanoRpc::RpcCall*>(&::NanoRpc::RpcCall::default_instance());
  result_ = const_cast< ::NanoRpc::RpcResult*>(&::NanoRpc::RpcResult::default_instance());
}

RpcMessage::RpcMessage(const RpcMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  call_ = NULL;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcMessage::~RpcMessage() {
  SharedDtor();
}

void RpcMessage::SharedDtor() {
  if (this != default_instance_) {
    delete call_;
    delete result_;
  }
}

void RpcMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMessage_descriptor_;
}

const RpcMessage& RpcMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();  return *default_instance_;
}

RpcMessage* RpcMessage::default_instance_ = NULL;

RpcMessage* RpcMessage::New() const {
  return new RpcMessage;
}

void RpcMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_call()) {
      if (call_ != NULL) call_->::NanoRpc::RpcCall::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::NanoRpc::RpcResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_call;
        break;
      }
      
      // optional .NanoRpc.RpcCall call = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }
      
      // optional .NanoRpc.RpcResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .NanoRpc.RpcCall call = 2;
  if (has_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->call(), output);
  }
  
  // optional .NanoRpc.RpcResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .NanoRpc.RpcCall call = 2;
  if (has_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->call(), target);
  }
  
  // optional .NanoRpc.RpcResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NanoRpc.RpcCall call = 2;
    if (has_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call());
    }
    
    // optional .NanoRpc.RpcResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcMessage::MergeFrom(const RpcMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_call()) {
      mutable_call()->::NanoRpc::RpcCall::MergeFrom(from.call());
    }
    if (from.has_result()) {
      mutable_result()->::NanoRpc::RpcResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMessage::CopyFrom(const RpcMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMessage::IsInitialized() const {
  
  return true;
}

void RpcMessage::Swap(RpcMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(call_, other->call_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMessage_descriptor_;
  metadata.reflection = RpcMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NanoRpc

// @@protoc_insertion_point(global_scope)
