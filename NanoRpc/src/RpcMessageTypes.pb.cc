// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessageTypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RpcMessageTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NanoRpc {

namespace {

const ::google::protobuf::Descriptor* DoubleValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Int64Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Int64Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* UInt64Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UInt64Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* Int32Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Int32Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* UInt32Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UInt32Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoolValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoolValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* BytesValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BytesValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SInt32Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SInt32Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* SInt64Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SInt64Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fixed32Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fixed32Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fixed64Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fixed64Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* SFixed32Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SFixed32Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* SFixed64Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SFixed64Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RpcMessageTypes_2eproto() {
  protobuf_AddDesc_RpcMessageTypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RpcMessageTypes.proto");
  GOOGLE_CHECK(file != NULL);
  DoubleValue_descriptor_ = file->message_type(0);
  static const int DoubleValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleValue, value_),
  };
  DoubleValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DoubleValue_descriptor_,
      DoubleValue::default_instance_,
      DoubleValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(DoubleValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleValue, _is_default_instance_));
  FloatValue_descriptor_ = file->message_type(1);
  static const int FloatValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatValue, value_),
  };
  FloatValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FloatValue_descriptor_,
      FloatValue::default_instance_,
      FloatValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(FloatValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatValue, _is_default_instance_));
  Int64Value_descriptor_ = file->message_type(2);
  static const int Int64Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Value, value_),
  };
  Int64Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Int64Value_descriptor_,
      Int64Value::default_instance_,
      Int64Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(Int64Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Value, _is_default_instance_));
  UInt64Value_descriptor_ = file->message_type(3);
  static const int UInt64Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Value, value_),
  };
  UInt64Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UInt64Value_descriptor_,
      UInt64Value::default_instance_,
      UInt64Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(UInt64Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Value, _is_default_instance_));
  Int32Value_descriptor_ = file->message_type(4);
  static const int Int32Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Value, value_),
  };
  Int32Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Int32Value_descriptor_,
      Int32Value::default_instance_,
      Int32Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(Int32Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Value, _is_default_instance_));
  UInt32Value_descriptor_ = file->message_type(5);
  static const int UInt32Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Value, value_),
  };
  UInt32Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UInt32Value_descriptor_,
      UInt32Value::default_instance_,
      UInt32Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(UInt32Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Value, _is_default_instance_));
  BoolValue_descriptor_ = file->message_type(6);
  static const int BoolValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolValue, value_),
  };
  BoolValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoolValue_descriptor_,
      BoolValue::default_instance_,
      BoolValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(BoolValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolValue, _is_default_instance_));
  StringValue_descriptor_ = file->message_type(7);
  static const int StringValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringValue, value_),
  };
  StringValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringValue_descriptor_,
      StringValue::default_instance_,
      StringValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(StringValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringValue, _is_default_instance_));
  BytesValue_descriptor_ = file->message_type(8);
  static const int BytesValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesValue, value_),
  };
  BytesValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BytesValue_descriptor_,
      BytesValue::default_instance_,
      BytesValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(BytesValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesValue, _is_default_instance_));
  SInt32Value_descriptor_ = file->message_type(9);
  static const int SInt32Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Value, value_),
  };
  SInt32Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SInt32Value_descriptor_,
      SInt32Value::default_instance_,
      SInt32Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(SInt32Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Value, _is_default_instance_));
  SInt64Value_descriptor_ = file->message_type(10);
  static const int SInt64Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Value, value_),
  };
  SInt64Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SInt64Value_descriptor_,
      SInt64Value::default_instance_,
      SInt64Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(SInt64Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Value, _is_default_instance_));
  Fixed32Value_descriptor_ = file->message_type(11);
  static const int Fixed32Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Value, value_),
  };
  Fixed32Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Fixed32Value_descriptor_,
      Fixed32Value::default_instance_,
      Fixed32Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(Fixed32Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Value, _is_default_instance_));
  Fixed64Value_descriptor_ = file->message_type(12);
  static const int Fixed64Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Value, value_),
  };
  Fixed64Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Fixed64Value_descriptor_,
      Fixed64Value::default_instance_,
      Fixed64Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(Fixed64Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Value, _is_default_instance_));
  SFixed32Value_descriptor_ = file->message_type(13);
  static const int SFixed32Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Value, value_),
  };
  SFixed32Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SFixed32Value_descriptor_,
      SFixed32Value::default_instance_,
      SFixed32Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(SFixed32Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Value, _is_default_instance_));
  SFixed64Value_descriptor_ = file->message_type(14);
  static const int SFixed64Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Value, value_),
  };
  SFixed64Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SFixed64Value_descriptor_,
      SFixed64Value::default_instance_,
      SFixed64Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(SFixed64Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Value, _is_default_instance_));
  RpcParameter_descriptor_ = file->message_type(15);
  static const int RpcParameter_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, proto_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, bool_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, int32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, int64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, uint32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, uint64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, sint32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, sint64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, fixed32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, fixed64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, sfixed32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, sfixed64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, is_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, object_id_value_),
  };
  RpcParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcParameter_descriptor_,
      RpcParameter::default_instance_,
      RpcParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(RpcParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcParameter, _is_default_instance_));
  RpcResult_descriptor_ = file->message_type(16);
  static const int RpcResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResult, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResult, call_result_),
  };
  RpcResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcResult_descriptor_,
      RpcResult::default_instance_,
      RpcResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(RpcResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResult, _is_default_instance_));
  RpcCall_descriptor_ = file->message_type(17);
  static const int RpcCall_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, expects_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, object_id_),
  };
  RpcCall_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcCall_descriptor_,
      RpcCall::default_instance_,
      RpcCall_offsets_,
      -1,
      -1,
      -1,
      sizeof(RpcCall),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCall, _is_default_instance_));
  RpcMessage_descriptor_ = file->message_type(18);
  static const int RpcMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, result_),
  };
  RpcMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcMessage_descriptor_,
      RpcMessage::default_instance_,
      RpcMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(RpcMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _is_default_instance_));
  RpcStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RpcMessageTypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DoubleValue_descriptor_, &DoubleValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FloatValue_descriptor_, &FloatValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Int64Value_descriptor_, &Int64Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UInt64Value_descriptor_, &UInt64Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Int32Value_descriptor_, &Int32Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UInt32Value_descriptor_, &UInt32Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoolValue_descriptor_, &BoolValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringValue_descriptor_, &StringValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BytesValue_descriptor_, &BytesValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SInt32Value_descriptor_, &SInt32Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SInt64Value_descriptor_, &SInt64Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Fixed32Value_descriptor_, &Fixed32Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Fixed64Value_descriptor_, &Fixed64Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SFixed32Value_descriptor_, &SFixed32Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SFixed64Value_descriptor_, &SFixed64Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcParameter_descriptor_, &RpcParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcResult_descriptor_, &RpcResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcCall_descriptor_, &RpcCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcMessage_descriptor_, &RpcMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RpcMessageTypes_2eproto() {
  delete DoubleValue::default_instance_;
  delete DoubleValue_reflection_;
  delete FloatValue::default_instance_;
  delete FloatValue_reflection_;
  delete Int64Value::default_instance_;
  delete Int64Value_reflection_;
  delete UInt64Value::default_instance_;
  delete UInt64Value_reflection_;
  delete Int32Value::default_instance_;
  delete Int32Value_reflection_;
  delete UInt32Value::default_instance_;
  delete UInt32Value_reflection_;
  delete BoolValue::default_instance_;
  delete BoolValue_reflection_;
  delete StringValue::default_instance_;
  delete StringValue_reflection_;
  delete BytesValue::default_instance_;
  delete BytesValue_reflection_;
  delete SInt32Value::default_instance_;
  delete SInt32Value_reflection_;
  delete SInt64Value::default_instance_;
  delete SInt64Value_reflection_;
  delete Fixed32Value::default_instance_;
  delete Fixed32Value_reflection_;
  delete Fixed64Value::default_instance_;
  delete Fixed64Value_reflection_;
  delete SFixed32Value::default_instance_;
  delete SFixed32Value_reflection_;
  delete SFixed64Value::default_instance_;
  delete SFixed64Value_reflection_;
  delete RpcParameter::default_instance_;
  delete RpcParameter_reflection_;
  delete RpcResult::default_instance_;
  delete RpcResult_reflection_;
  delete RpcCall::default_instance_;
  delete RpcCall_reflection_;
  delete RpcMessage::default_instance_;
  delete RpcMessage_reflection_;
}

void protobuf_AddDesc_RpcMessageTypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025RpcMessageTypes.proto\022\007NanoRpc\"\034\n\013Doub"
    "leValue\022\r\n\005value\030\001 \001(\001\"\033\n\nFloatValue\022\r\n\005"
    "value\030\001 \001(\002\"\033\n\nInt64Value\022\r\n\005value\030\001 \001(\003"
    "\"\034\n\013UInt64Value\022\r\n\005value\030\001 \001(\004\"\033\n\nInt32V"
    "alue\022\r\n\005value\030\001 \001(\005\"\034\n\013UInt32Value\022\r\n\005va"
    "lue\030\001 \001(\r\"\032\n\tBoolValue\022\r\n\005value\030\001 \001(\010\"\034\n"
    "\013StringValue\022\r\n\005value\030\001 \001(\t\"\033\n\nBytesValu"
    "e\022\r\n\005value\030\001 \001(\014\"\034\n\013SInt32Value\022\r\n\005value"
    "\030\001 \001(\021\"\034\n\013SInt64Value\022\r\n\005value\030\001 \001(\022\"\035\n\014"
    "Fixed32Value\022\r\n\005value\030\001 \001(\007\"\035\n\014Fixed64Va"
    "lue\022\r\n\005value\030\001 \001(\006\"\036\n\rSFixed32Value\022\r\n\005v"
    "alue\030\001 \001(\017\"\036\n\rSFixed64Value\022\r\n\005value\030\001 \001"
    "(\020\"\314\005\n\014RpcParameter\022(\n\013proto_value\030\001 \001(\013"
    "2\023.NanoRpc.BytesValue\022&\n\nbool_value\030\002 \001("
    "\0132\022.NanoRpc.BoolValue\022(\n\013int32_value\030\003 \001"
    "(\0132\023.NanoRpc.Int32Value\022(\n\013int64_value\030\004"
    " \001(\0132\023.NanoRpc.Int64Value\022*\n\014uint32_valu"
    "e\030\005 \001(\0132\024.NanoRpc.UInt32Value\022*\n\014uint64_"
    "value\030\006 \001(\0132\024.NanoRpc.UInt64Value\022*\n\014sin"
    "t32_value\030\007 \001(\0132\024.NanoRpc.SInt32Value\022*\n"
    "\014sint64_value\030\010 \001(\0132\024.NanoRpc.SInt64Valu"
    "e\022,\n\rfixed32_value\030\t \001(\0132\025.NanoRpc.Fixed"
    "32Value\022,\n\rfixed64_value\030\n \001(\0132\025.NanoRpc"
    ".Fixed64Value\022.\n\016sfixed32_value\030\013 \001(\0132\026."
    "NanoRpc.SFixed32Value\022.\n\016sfixed64_value\030"
    "\014 \001(\0132\026.NanoRpc.SFixed64Value\022(\n\013float_v"
    "alue\030\r \001(\0132\023.NanoRpc.FloatValue\022*\n\014doubl"
    "e_value\030\016 \001(\0132\024.NanoRpc.DoubleValue\022*\n\014s"
    "tring_value\030\017 \001(\0132\024.NanoRpc.StringValue\022"
    "\017\n\007is_null\030\020 \001(\010\022\027\n\017object_id_value\030\021 \001("
    "\r\"r\n\tRpcResult\022\"\n\006status\030\001 \001(\0162\022.NanoRpc"
    ".RpcStatus\022\025\n\rerror_message\030\002 \001(\t\022*\n\013cal"
    "l_result\030\003 \001(\0132\025.NanoRpc.RpcParameter\"\200\001"
    "\n\007RpcCall\022\017\n\007service\030\001 \001(\t\022\016\n\006method\030\002 \001"
    "(\t\022)\n\nparameters\030\003 \003(\0132\025.NanoRpc.RpcPara"
    "meter\022\026\n\016expects_result\030\004 \001(\010\022\021\n\tobject_"
    "id\030\005 \001(\r\"\\\n\nRpcMessage\022\n\n\002id\030\001 \001(\005\022\036\n\004ca"
    "ll\030\002 \001(\0132\020.NanoRpc.RpcCall\022\"\n\006result\030\003 \001"
    "(\0132\022.NanoRpc.RpcResult*\226\001\n\tRpcStatus\022\020\n\014"
    "RpcSucceeded\020\000\022\025\n\021RpcChannelFailure\020\001\022\024\n"
    "\020RpcUnknownMethod\020\002\022\024\n\020RpcProtocolError\020"
    "\003\022\027\n\023RpcUnknownInterface\020\004\022\033\n\027RpcInvalid"
    "CallParameter\020\005b\006proto3", 1703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RpcMessageTypes.proto", &protobuf_RegisterTypes);
  DoubleValue::default_instance_ = new DoubleValue();
  FloatValue::default_instance_ = new FloatValue();
  Int64Value::default_instance_ = new Int64Value();
  UInt64Value::default_instance_ = new UInt64Value();
  Int32Value::default_instance_ = new Int32Value();
  UInt32Value::default_instance_ = new UInt32Value();
  BoolValue::default_instance_ = new BoolValue();
  StringValue::default_instance_ = new StringValue();
  BytesValue::default_instance_ = new BytesValue();
  SInt32Value::default_instance_ = new SInt32Value();
  SInt64Value::default_instance_ = new SInt64Value();
  Fixed32Value::default_instance_ = new Fixed32Value();
  Fixed64Value::default_instance_ = new Fixed64Value();
  SFixed32Value::default_instance_ = new SFixed32Value();
  SFixed64Value::default_instance_ = new SFixed64Value();
  RpcParameter::default_instance_ = new RpcParameter();
  RpcResult::default_instance_ = new RpcResult();
  RpcCall::default_instance_ = new RpcCall();
  RpcMessage::default_instance_ = new RpcMessage();
  DoubleValue::default_instance_->InitAsDefaultInstance();
  FloatValue::default_instance_->InitAsDefaultInstance();
  Int64Value::default_instance_->InitAsDefaultInstance();
  UInt64Value::default_instance_->InitAsDefaultInstance();
  Int32Value::default_instance_->InitAsDefaultInstance();
  UInt32Value::default_instance_->InitAsDefaultInstance();
  BoolValue::default_instance_->InitAsDefaultInstance();
  StringValue::default_instance_->InitAsDefaultInstance();
  BytesValue::default_instance_->InitAsDefaultInstance();
  SInt32Value::default_instance_->InitAsDefaultInstance();
  SInt64Value::default_instance_->InitAsDefaultInstance();
  Fixed32Value::default_instance_->InitAsDefaultInstance();
  Fixed64Value::default_instance_->InitAsDefaultInstance();
  SFixed32Value::default_instance_->InitAsDefaultInstance();
  SFixed64Value::default_instance_->InitAsDefaultInstance();
  RpcParameter::default_instance_->InitAsDefaultInstance();
  RpcResult::default_instance_->InitAsDefaultInstance();
  RpcCall::default_instance_->InitAsDefaultInstance();
  RpcMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RpcMessageTypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RpcMessageTypes_2eproto {
  StaticDescriptorInitializer_RpcMessageTypes_2eproto() {
    protobuf_AddDesc_RpcMessageTypes_2eproto();
  }
} static_descriptor_initializer_RpcMessageTypes_2eproto_;
const ::google::protobuf::EnumDescriptor* RpcStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcStatus_descriptor_;
}
bool RpcStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleValue::DoubleValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.DoubleValue)
}

void DoubleValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DoubleValue::DoubleValue(const DoubleValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.DoubleValue)
}

void DoubleValue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0;
}

DoubleValue::~DoubleValue() {
  // @@protoc_insertion_point(destructor:NanoRpc.DoubleValue)
  SharedDtor();
}

void DoubleValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleValue_descriptor_;
}

const DoubleValue& DoubleValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

DoubleValue* DoubleValue::default_instance_ = NULL;

DoubleValue* DoubleValue::New(::google::protobuf::Arena* arena) const {
  DoubleValue* n = new DoubleValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleValue::Clear() {
  value_ = 0;
}

bool DoubleValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.DoubleValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.DoubleValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.DoubleValue)
  return false;
#undef DO_
}

void DoubleValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.DoubleValue)
  // optional double value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.DoubleValue)
}

::google::protobuf::uint8* DoubleValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.DoubleValue)
  // optional double value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.DoubleValue)
  return target;
}

int DoubleValue::ByteSize() const {
  int total_size = 0;

  // optional double value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DoubleValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleValue::MergeFrom(const DoubleValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void DoubleValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleValue::CopyFrom(const DoubleValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleValue::IsInitialized() const {

  return true;
}

void DoubleValue::Swap(DoubleValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleValue::InternalSwap(DoubleValue* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleValue_descriptor_;
  metadata.reflection = DoubleValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleValue

// optional double value = 1;
void DoubleValue::clear_value() {
  value_ = 0;
}
 double DoubleValue::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.DoubleValue.value)
  return value_;
}
 void DoubleValue::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.DoubleValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatValue::FloatValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.FloatValue)
}

void FloatValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FloatValue::FloatValue(const FloatValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.FloatValue)
}

void FloatValue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0;
}

FloatValue::~FloatValue() {
  // @@protoc_insertion_point(destructor:NanoRpc.FloatValue)
  SharedDtor();
}

void FloatValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatValue_descriptor_;
}

const FloatValue& FloatValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

FloatValue* FloatValue::default_instance_ = NULL;

FloatValue* FloatValue::New(::google::protobuf::Arena* arena) const {
  FloatValue* n = new FloatValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FloatValue::Clear() {
  value_ = 0;
}

bool FloatValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.FloatValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.FloatValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.FloatValue)
  return false;
#undef DO_
}

void FloatValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.FloatValue)
  // optional float value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.FloatValue)
}

::google::protobuf::uint8* FloatValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.FloatValue)
  // optional float value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.FloatValue)
  return target;
}

int FloatValue::ByteSize() const {
  int total_size = 0;

  // optional float value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FloatValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatValue::MergeFrom(const FloatValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void FloatValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatValue::CopyFrom(const FloatValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatValue::IsInitialized() const {

  return true;
}

void FloatValue::Swap(FloatValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatValue::InternalSwap(FloatValue* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FloatValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatValue_descriptor_;
  metadata.reflection = FloatValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatValue

// optional float value = 1;
void FloatValue::clear_value() {
  value_ = 0;
}
 float FloatValue::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.FloatValue.value)
  return value_;
}
 void FloatValue::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.FloatValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int64Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int64Value::Int64Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.Int64Value)
}

void Int64Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Int64Value::Int64Value(const Int64Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.Int64Value)
}

void Int64Value::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
}

Int64Value::~Int64Value() {
  // @@protoc_insertion_point(destructor:NanoRpc.Int64Value)
  SharedDtor();
}

void Int64Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Int64Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int64Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Int64Value_descriptor_;
}

const Int64Value& Int64Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

Int64Value* Int64Value::default_instance_ = NULL;

Int64Value* Int64Value::New(::google::protobuf::Arena* arena) const {
  Int64Value* n = new Int64Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Int64Value::Clear() {
  value_ = GOOGLE_LONGLONG(0);
}

bool Int64Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.Int64Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.Int64Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.Int64Value)
  return false;
#undef DO_
}

void Int64Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.Int64Value)
  // optional int64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.Int64Value)
}

::google::protobuf::uint8* Int64Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.Int64Value)
  // optional int64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.Int64Value)
  return target;
}

int Int64Value::ByteSize() const {
  int total_size = 0;

  // optional int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int64Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Int64Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Int64Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Int64Value::MergeFrom(const Int64Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Int64Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64Value::CopyFrom(const Int64Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Value::IsInitialized() const {

  return true;
}

void Int64Value::Swap(Int64Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int64Value::InternalSwap(Int64Value* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int64Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Int64Value_descriptor_;
  metadata.reflection = Int64Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Int64Value

// optional int64 value = 1;
void Int64Value::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Int64Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.Int64Value.value)
  return value_;
}
 void Int64Value::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.Int64Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt64Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt64Value::UInt64Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.UInt64Value)
}

void UInt64Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UInt64Value::UInt64Value(const UInt64Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.UInt64Value)
}

void UInt64Value::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
}

UInt64Value::~UInt64Value() {
  // @@protoc_insertion_point(destructor:NanoRpc.UInt64Value)
  SharedDtor();
}

void UInt64Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UInt64Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UInt64Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UInt64Value_descriptor_;
}

const UInt64Value& UInt64Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

UInt64Value* UInt64Value::default_instance_ = NULL;

UInt64Value* UInt64Value::New(::google::protobuf::Arena* arena) const {
  UInt64Value* n = new UInt64Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UInt64Value::Clear() {
  value_ = GOOGLE_ULONGLONG(0);
}

bool UInt64Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.UInt64Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.UInt64Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.UInt64Value)
  return false;
#undef DO_
}

void UInt64Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.UInt64Value)
  // optional uint64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.UInt64Value)
}

::google::protobuf::uint8* UInt64Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.UInt64Value)
  // optional uint64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.UInt64Value)
  return target;
}

int UInt64Value::ByteSize() const {
  int total_size = 0;

  // optional uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UInt64Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UInt64Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt64Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UInt64Value::MergeFrom(const UInt64Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void UInt64Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt64Value::CopyFrom(const UInt64Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt64Value::IsInitialized() const {

  return true;
}

void UInt64Value::Swap(UInt64Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt64Value::InternalSwap(UInt64Value* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UInt64Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UInt64Value_descriptor_;
  metadata.reflection = UInt64Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UInt64Value

// optional uint64 value = 1;
void UInt64Value::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UInt64Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.UInt64Value.value)
  return value_;
}
 void UInt64Value::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.UInt64Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int32Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int32Value::Int32Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.Int32Value)
}

void Int32Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Int32Value::Int32Value(const Int32Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.Int32Value)
}

void Int32Value::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0;
}

Int32Value::~Int32Value() {
  // @@protoc_insertion_point(destructor:NanoRpc.Int32Value)
  SharedDtor();
}

void Int32Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Int32Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int32Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Int32Value_descriptor_;
}

const Int32Value& Int32Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

Int32Value* Int32Value::default_instance_ = NULL;

Int32Value* Int32Value::New(::google::protobuf::Arena* arena) const {
  Int32Value* n = new Int32Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Int32Value::Clear() {
  value_ = 0;
}

bool Int32Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.Int32Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.Int32Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.Int32Value)
  return false;
#undef DO_
}

void Int32Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.Int32Value)
  // optional int32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.Int32Value)
}

::google::protobuf::uint8* Int32Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.Int32Value)
  // optional int32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.Int32Value)
  return target;
}

int Int32Value::ByteSize() const {
  int total_size = 0;

  // optional int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int32Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Int32Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Int32Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Int32Value::MergeFrom(const Int32Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Int32Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int32Value::CopyFrom(const Int32Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Value::IsInitialized() const {

  return true;
}

void Int32Value::Swap(Int32Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int32Value::InternalSwap(Int32Value* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int32Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Int32Value_descriptor_;
  metadata.reflection = Int32Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Int32Value

// optional int32 value = 1;
void Int32Value::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 Int32Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.Int32Value.value)
  return value_;
}
 void Int32Value::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.Int32Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt32Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt32Value::UInt32Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.UInt32Value)
}

void UInt32Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UInt32Value::UInt32Value(const UInt32Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.UInt32Value)
}

void UInt32Value::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0u;
}

UInt32Value::~UInt32Value() {
  // @@protoc_insertion_point(destructor:NanoRpc.UInt32Value)
  SharedDtor();
}

void UInt32Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UInt32Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UInt32Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UInt32Value_descriptor_;
}

const UInt32Value& UInt32Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

UInt32Value* UInt32Value::default_instance_ = NULL;

UInt32Value* UInt32Value::New(::google::protobuf::Arena* arena) const {
  UInt32Value* n = new UInt32Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UInt32Value::Clear() {
  value_ = 0u;
}

bool UInt32Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.UInt32Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.UInt32Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.UInt32Value)
  return false;
#undef DO_
}

void UInt32Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.UInt32Value)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.UInt32Value)
}

::google::protobuf::uint8* UInt32Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.UInt32Value)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.UInt32Value)
  return target;
}

int UInt32Value::ByteSize() const {
  int total_size = 0;

  // optional uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UInt32Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UInt32Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt32Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UInt32Value::MergeFrom(const UInt32Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void UInt32Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt32Value::CopyFrom(const UInt32Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt32Value::IsInitialized() const {

  return true;
}

void UInt32Value::Swap(UInt32Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt32Value::InternalSwap(UInt32Value* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UInt32Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UInt32Value_descriptor_;
  metadata.reflection = UInt32Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UInt32Value

// optional uint32 value = 1;
void UInt32Value::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 UInt32Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.UInt32Value.value)
  return value_;
}
 void UInt32Value::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.UInt32Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolValue::BoolValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.BoolValue)
}

void BoolValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BoolValue::BoolValue(const BoolValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.BoolValue)
}

void BoolValue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = false;
}

BoolValue::~BoolValue() {
  // @@protoc_insertion_point(destructor:NanoRpc.BoolValue)
  SharedDtor();
}

void BoolValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoolValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoolValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoolValue_descriptor_;
}

const BoolValue& BoolValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

BoolValue* BoolValue::default_instance_ = NULL;

BoolValue* BoolValue::New(::google::protobuf::Arena* arena) const {
  BoolValue* n = new BoolValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoolValue::Clear() {
  value_ = false;
}

bool BoolValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.BoolValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.BoolValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.BoolValue)
  return false;
#undef DO_
}

void BoolValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.BoolValue)
  // optional bool value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.BoolValue)
}

::google::protobuf::uint8* BoolValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.BoolValue)
  // optional bool value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.BoolValue)
  return target;
}

int BoolValue::ByteSize() const {
  int total_size = 0;

  // optional bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoolValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BoolValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoolValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoolValue::MergeFrom(const BoolValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void BoolValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolValue::CopyFrom(const BoolValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolValue::IsInitialized() const {

  return true;
}

void BoolValue::Swap(BoolValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolValue::InternalSwap(BoolValue* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoolValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoolValue_descriptor_;
  metadata.reflection = BoolValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoolValue

// optional bool value = 1;
void BoolValue::clear_value() {
  value_ = false;
}
 bool BoolValue::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.BoolValue.value)
  return value_;
}
 void BoolValue::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.BoolValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringValue::StringValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.StringValue)
}

void StringValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StringValue::StringValue(const StringValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.StringValue)
}

void StringValue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StringValue::~StringValue() {
  // @@protoc_insertion_point(destructor:NanoRpc.StringValue)
  SharedDtor();
}

void StringValue::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StringValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringValue_descriptor_;
}

const StringValue& StringValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

StringValue* StringValue::default_instance_ = NULL;

StringValue* StringValue::New(::google::protobuf::Arena* arena) const {
  StringValue* n = new StringValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringValue::Clear() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StringValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.StringValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NanoRpc.StringValue.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.StringValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.StringValue)
  return false;
#undef DO_
}

void StringValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.StringValue)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NanoRpc.StringValue.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.StringValue)
}

::google::protobuf::uint8* StringValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.StringValue)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NanoRpc.StringValue.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.StringValue)
  return target;
}

int StringValue::ByteSize() const {
  int total_size = 0;

  // optional string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StringValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StringValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringValue::MergeFrom(const StringValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void StringValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringValue::CopyFrom(const StringValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringValue::IsInitialized() const {

  return true;
}

void StringValue::Swap(StringValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringValue::InternalSwap(StringValue* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringValue_descriptor_;
  metadata.reflection = StringValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringValue

// optional string value = 1;
void StringValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StringValue::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.StringValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.StringValue.value)
}
 void StringValue::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.StringValue.value)
}
 void StringValue::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.StringValue.value)
}
 ::std::string* StringValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.StringValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StringValue::release_value() {
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.StringValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BytesValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BytesValue::BytesValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.BytesValue)
}

void BytesValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BytesValue::BytesValue(const BytesValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.BytesValue)
}

void BytesValue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BytesValue::~BytesValue() {
  // @@protoc_insertion_point(destructor:NanoRpc.BytesValue)
  SharedDtor();
}

void BytesValue::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BytesValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BytesValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BytesValue_descriptor_;
}

const BytesValue& BytesValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

BytesValue* BytesValue::default_instance_ = NULL;

BytesValue* BytesValue::New(::google::protobuf::Arena* arena) const {
  BytesValue* n = new BytesValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BytesValue::Clear() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BytesValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.BytesValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.BytesValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.BytesValue)
  return false;
#undef DO_
}

void BytesValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.BytesValue)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.BytesValue)
}

::google::protobuf::uint8* BytesValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.BytesValue)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.BytesValue)
  return target;
}

int BytesValue::ByteSize() const {
  int total_size = 0;

  // optional bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BytesValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BytesValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BytesValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BytesValue::MergeFrom(const BytesValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void BytesValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BytesValue::CopyFrom(const BytesValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesValue::IsInitialized() const {

  return true;
}

void BytesValue::Swap(BytesValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BytesValue::InternalSwap(BytesValue* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BytesValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BytesValue_descriptor_;
  metadata.reflection = BytesValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BytesValue

// optional bytes value = 1;
void BytesValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BytesValue::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.BytesValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BytesValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.BytesValue.value)
}
 void BytesValue::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.BytesValue.value)
}
 void BytesValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.BytesValue.value)
}
 ::std::string* BytesValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.BytesValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BytesValue::release_value() {
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BytesValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.BytesValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SInt32Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SInt32Value::SInt32Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.SInt32Value)
}

void SInt32Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SInt32Value::SInt32Value(const SInt32Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.SInt32Value)
}

void SInt32Value::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0;
}

SInt32Value::~SInt32Value() {
  // @@protoc_insertion_point(destructor:NanoRpc.SInt32Value)
  SharedDtor();
}

void SInt32Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SInt32Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SInt32Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SInt32Value_descriptor_;
}

const SInt32Value& SInt32Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

SInt32Value* SInt32Value::default_instance_ = NULL;

SInt32Value* SInt32Value::New(::google::protobuf::Arena* arena) const {
  SInt32Value* n = new SInt32Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SInt32Value::Clear() {
  value_ = 0;
}

bool SInt32Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.SInt32Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.SInt32Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.SInt32Value)
  return false;
#undef DO_
}

void SInt32Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.SInt32Value)
  // optional sint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.SInt32Value)
}

::google::protobuf::uint8* SInt32Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.SInt32Value)
  // optional sint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.SInt32Value)
  return target;
}

int SInt32Value::ByteSize() const {
  int total_size = 0;

  // optional sint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SInt32Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SInt32Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SInt32Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SInt32Value::MergeFrom(const SInt32Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void SInt32Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SInt32Value::CopyFrom(const SInt32Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInt32Value::IsInitialized() const {

  return true;
}

void SInt32Value::Swap(SInt32Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SInt32Value::InternalSwap(SInt32Value* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SInt32Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SInt32Value_descriptor_;
  metadata.reflection = SInt32Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SInt32Value

// optional sint32 value = 1;
void SInt32Value::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 SInt32Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.SInt32Value.value)
  return value_;
}
 void SInt32Value::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.SInt32Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SInt64Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SInt64Value::SInt64Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.SInt64Value)
}

void SInt64Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SInt64Value::SInt64Value(const SInt64Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.SInt64Value)
}

void SInt64Value::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
}

SInt64Value::~SInt64Value() {
  // @@protoc_insertion_point(destructor:NanoRpc.SInt64Value)
  SharedDtor();
}

void SInt64Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SInt64Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SInt64Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SInt64Value_descriptor_;
}

const SInt64Value& SInt64Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

SInt64Value* SInt64Value::default_instance_ = NULL;

SInt64Value* SInt64Value::New(::google::protobuf::Arena* arena) const {
  SInt64Value* n = new SInt64Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SInt64Value::Clear() {
  value_ = GOOGLE_LONGLONG(0);
}

bool SInt64Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.SInt64Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.SInt64Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.SInt64Value)
  return false;
#undef DO_
}

void SInt64Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.SInt64Value)
  // optional sint64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.SInt64Value)
}

::google::protobuf::uint8* SInt64Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.SInt64Value)
  // optional sint64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.SInt64Value)
  return target;
}

int SInt64Value::ByteSize() const {
  int total_size = 0;

  // optional sint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SInt64Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SInt64Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SInt64Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SInt64Value::MergeFrom(const SInt64Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void SInt64Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SInt64Value::CopyFrom(const SInt64Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInt64Value::IsInitialized() const {

  return true;
}

void SInt64Value::Swap(SInt64Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SInt64Value::InternalSwap(SInt64Value* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SInt64Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SInt64Value_descriptor_;
  metadata.reflection = SInt64Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SInt64Value

// optional sint64 value = 1;
void SInt64Value::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SInt64Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.SInt64Value.value)
  return value_;
}
 void SInt64Value::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.SInt64Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fixed32Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fixed32Value::Fixed32Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.Fixed32Value)
}

void Fixed32Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Fixed32Value::Fixed32Value(const Fixed32Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.Fixed32Value)
}

void Fixed32Value::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0u;
}

Fixed32Value::~Fixed32Value() {
  // @@protoc_insertion_point(destructor:NanoRpc.Fixed32Value)
  SharedDtor();
}

void Fixed32Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fixed32Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fixed32Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fixed32Value_descriptor_;
}

const Fixed32Value& Fixed32Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

Fixed32Value* Fixed32Value::default_instance_ = NULL;

Fixed32Value* Fixed32Value::New(::google::protobuf::Arena* arena) const {
  Fixed32Value* n = new Fixed32Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fixed32Value::Clear() {
  value_ = 0u;
}

bool Fixed32Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.Fixed32Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.Fixed32Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.Fixed32Value)
  return false;
#undef DO_
}

void Fixed32Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.Fixed32Value)
  // optional fixed32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.Fixed32Value)
}

::google::protobuf::uint8* Fixed32Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.Fixed32Value)
  // optional fixed32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.Fixed32Value)
  return target;
}

int Fixed32Value::ByteSize() const {
  int total_size = 0;

  // optional fixed32 value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fixed32Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Fixed32Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Fixed32Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fixed32Value::MergeFrom(const Fixed32Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Fixed32Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fixed32Value::CopyFrom(const Fixed32Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fixed32Value::IsInitialized() const {

  return true;
}

void Fixed32Value::Swap(Fixed32Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fixed32Value::InternalSwap(Fixed32Value* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fixed32Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fixed32Value_descriptor_;
  metadata.reflection = Fixed32Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fixed32Value

// optional fixed32 value = 1;
void Fixed32Value::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 Fixed32Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.Fixed32Value.value)
  return value_;
}
 void Fixed32Value::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.Fixed32Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fixed64Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fixed64Value::Fixed64Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.Fixed64Value)
}

void Fixed64Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Fixed64Value::Fixed64Value(const Fixed64Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.Fixed64Value)
}

void Fixed64Value::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
}

Fixed64Value::~Fixed64Value() {
  // @@protoc_insertion_point(destructor:NanoRpc.Fixed64Value)
  SharedDtor();
}

void Fixed64Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fixed64Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fixed64Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fixed64Value_descriptor_;
}

const Fixed64Value& Fixed64Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

Fixed64Value* Fixed64Value::default_instance_ = NULL;

Fixed64Value* Fixed64Value::New(::google::protobuf::Arena* arena) const {
  Fixed64Value* n = new Fixed64Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fixed64Value::Clear() {
  value_ = GOOGLE_ULONGLONG(0);
}

bool Fixed64Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.Fixed64Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.Fixed64Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.Fixed64Value)
  return false;
#undef DO_
}

void Fixed64Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.Fixed64Value)
  // optional fixed64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.Fixed64Value)
}

::google::protobuf::uint8* Fixed64Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.Fixed64Value)
  // optional fixed64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.Fixed64Value)
  return target;
}

int Fixed64Value::ByteSize() const {
  int total_size = 0;

  // optional fixed64 value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fixed64Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Fixed64Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Fixed64Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fixed64Value::MergeFrom(const Fixed64Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Fixed64Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fixed64Value::CopyFrom(const Fixed64Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fixed64Value::IsInitialized() const {

  return true;
}

void Fixed64Value::Swap(Fixed64Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fixed64Value::InternalSwap(Fixed64Value* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fixed64Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fixed64Value_descriptor_;
  metadata.reflection = Fixed64Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fixed64Value

// optional fixed64 value = 1;
void Fixed64Value::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Fixed64Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.Fixed64Value.value)
  return value_;
}
 void Fixed64Value::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.Fixed64Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SFixed32Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SFixed32Value::SFixed32Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.SFixed32Value)
}

void SFixed32Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SFixed32Value::SFixed32Value(const SFixed32Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.SFixed32Value)
}

void SFixed32Value::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0;
}

SFixed32Value::~SFixed32Value() {
  // @@protoc_insertion_point(destructor:NanoRpc.SFixed32Value)
  SharedDtor();
}

void SFixed32Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SFixed32Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SFixed32Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SFixed32Value_descriptor_;
}

const SFixed32Value& SFixed32Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

SFixed32Value* SFixed32Value::default_instance_ = NULL;

SFixed32Value* SFixed32Value::New(::google::protobuf::Arena* arena) const {
  SFixed32Value* n = new SFixed32Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SFixed32Value::Clear() {
  value_ = 0;
}

bool SFixed32Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.SFixed32Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.SFixed32Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.SFixed32Value)
  return false;
#undef DO_
}

void SFixed32Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.SFixed32Value)
  // optional sfixed32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.SFixed32Value)
}

::google::protobuf::uint8* SFixed32Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.SFixed32Value)
  // optional sfixed32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.SFixed32Value)
  return target;
}

int SFixed32Value::ByteSize() const {
  int total_size = 0;

  // optional sfixed32 value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SFixed32Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SFixed32Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SFixed32Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SFixed32Value::MergeFrom(const SFixed32Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void SFixed32Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SFixed32Value::CopyFrom(const SFixed32Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFixed32Value::IsInitialized() const {

  return true;
}

void SFixed32Value::Swap(SFixed32Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SFixed32Value::InternalSwap(SFixed32Value* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SFixed32Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SFixed32Value_descriptor_;
  metadata.reflection = SFixed32Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SFixed32Value

// optional sfixed32 value = 1;
void SFixed32Value::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 SFixed32Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.SFixed32Value.value)
  return value_;
}
 void SFixed32Value::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.SFixed32Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SFixed64Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SFixed64Value::SFixed64Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.SFixed64Value)
}

void SFixed64Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SFixed64Value::SFixed64Value(const SFixed64Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.SFixed64Value)
}

void SFixed64Value::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
}

SFixed64Value::~SFixed64Value() {
  // @@protoc_insertion_point(destructor:NanoRpc.SFixed64Value)
  SharedDtor();
}

void SFixed64Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SFixed64Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SFixed64Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SFixed64Value_descriptor_;
}

const SFixed64Value& SFixed64Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

SFixed64Value* SFixed64Value::default_instance_ = NULL;

SFixed64Value* SFixed64Value::New(::google::protobuf::Arena* arena) const {
  SFixed64Value* n = new SFixed64Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SFixed64Value::Clear() {
  value_ = GOOGLE_LONGLONG(0);
}

bool SFixed64Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.SFixed64Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.SFixed64Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.SFixed64Value)
  return false;
#undef DO_
}

void SFixed64Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.SFixed64Value)
  // optional sfixed64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.SFixed64Value)
}

::google::protobuf::uint8* SFixed64Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.SFixed64Value)
  // optional sfixed64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.SFixed64Value)
  return target;
}

int SFixed64Value::ByteSize() const {
  int total_size = 0;

  // optional sfixed64 value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SFixed64Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SFixed64Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SFixed64Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SFixed64Value::MergeFrom(const SFixed64Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void SFixed64Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SFixed64Value::CopyFrom(const SFixed64Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFixed64Value::IsInitialized() const {

  return true;
}

void SFixed64Value::Swap(SFixed64Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SFixed64Value::InternalSwap(SFixed64Value* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SFixed64Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SFixed64Value_descriptor_;
  metadata.reflection = SFixed64Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SFixed64Value

// optional sfixed64 value = 1;
void SFixed64Value::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SFixed64Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.SFixed64Value.value)
  return value_;
}
 void SFixed64Value::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.SFixed64Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcParameter::kProtoValueFieldNumber;
const int RpcParameter::kBoolValueFieldNumber;
const int RpcParameter::kInt32ValueFieldNumber;
const int RpcParameter::kInt64ValueFieldNumber;
const int RpcParameter::kUint32ValueFieldNumber;
const int RpcParameter::kUint64ValueFieldNumber;
const int RpcParameter::kSint32ValueFieldNumber;
const int RpcParameter::kSint64ValueFieldNumber;
const int RpcParameter::kFixed32ValueFieldNumber;
const int RpcParameter::kFixed64ValueFieldNumber;
const int RpcParameter::kSfixed32ValueFieldNumber;
const int RpcParameter::kSfixed64ValueFieldNumber;
const int RpcParameter::kFloatValueFieldNumber;
const int RpcParameter::kDoubleValueFieldNumber;
const int RpcParameter::kStringValueFieldNumber;
const int RpcParameter::kIsNullFieldNumber;
const int RpcParameter::kObjectIdValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcParameter::RpcParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.RpcParameter)
}

void RpcParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  proto_value_ = const_cast< ::NanoRpc::BytesValue*>(&::NanoRpc::BytesValue::default_instance());
  bool_value_ = const_cast< ::NanoRpc::BoolValue*>(&::NanoRpc::BoolValue::default_instance());
  int32_value_ = const_cast< ::NanoRpc::Int32Value*>(&::NanoRpc::Int32Value::default_instance());
  int64_value_ = const_cast< ::NanoRpc::Int64Value*>(&::NanoRpc::Int64Value::default_instance());
  uint32_value_ = const_cast< ::NanoRpc::UInt32Value*>(&::NanoRpc::UInt32Value::default_instance());
  uint64_value_ = const_cast< ::NanoRpc::UInt64Value*>(&::NanoRpc::UInt64Value::default_instance());
  sint32_value_ = const_cast< ::NanoRpc::SInt32Value*>(&::NanoRpc::SInt32Value::default_instance());
  sint64_value_ = const_cast< ::NanoRpc::SInt64Value*>(&::NanoRpc::SInt64Value::default_instance());
  fixed32_value_ = const_cast< ::NanoRpc::Fixed32Value*>(&::NanoRpc::Fixed32Value::default_instance());
  fixed64_value_ = const_cast< ::NanoRpc::Fixed64Value*>(&::NanoRpc::Fixed64Value::default_instance());
  sfixed32_value_ = const_cast< ::NanoRpc::SFixed32Value*>(&::NanoRpc::SFixed32Value::default_instance());
  sfixed64_value_ = const_cast< ::NanoRpc::SFixed64Value*>(&::NanoRpc::SFixed64Value::default_instance());
  float_value_ = const_cast< ::NanoRpc::FloatValue*>(&::NanoRpc::FloatValue::default_instance());
  double_value_ = const_cast< ::NanoRpc::DoubleValue*>(&::NanoRpc::DoubleValue::default_instance());
  string_value_ = const_cast< ::NanoRpc::StringValue*>(&::NanoRpc::StringValue::default_instance());
}

RpcParameter::RpcParameter(const RpcParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.RpcParameter)
}

void RpcParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  proto_value_ = NULL;
  bool_value_ = NULL;
  int32_value_ = NULL;
  int64_value_ = NULL;
  uint32_value_ = NULL;
  uint64_value_ = NULL;
  sint32_value_ = NULL;
  sint64_value_ = NULL;
  fixed32_value_ = NULL;
  fixed64_value_ = NULL;
  sfixed32_value_ = NULL;
  sfixed64_value_ = NULL;
  float_value_ = NULL;
  double_value_ = NULL;
  string_value_ = NULL;
  is_null_ = false;
  object_id_value_ = 0u;
}

RpcParameter::~RpcParameter() {
  // @@protoc_insertion_point(destructor:NanoRpc.RpcParameter)
  SharedDtor();
}

void RpcParameter::SharedDtor() {
  if (this != default_instance_) {
    delete proto_value_;
    delete bool_value_;
    delete int32_value_;
    delete int64_value_;
    delete uint32_value_;
    delete uint64_value_;
    delete sint32_value_;
    delete sint64_value_;
    delete fixed32_value_;
    delete fixed64_value_;
    delete sfixed32_value_;
    delete sfixed64_value_;
    delete float_value_;
    delete double_value_;
    delete string_value_;
  }
}

void RpcParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcParameter_descriptor_;
}

const RpcParameter& RpcParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

RpcParameter* RpcParameter::default_instance_ = NULL;

RpcParameter* RpcParameter::New(::google::protobuf::Arena* arena) const {
  RpcParameter* n = new RpcParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcParameter::Clear() {
  if (GetArenaNoVirtual() == NULL && proto_value_ != NULL) delete proto_value_;
  proto_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && bool_value_ != NULL) delete bool_value_;
  bool_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && int32_value_ != NULL) delete int32_value_;
  int32_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && int64_value_ != NULL) delete int64_value_;
  int64_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && uint32_value_ != NULL) delete uint32_value_;
  uint32_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && uint64_value_ != NULL) delete uint64_value_;
  uint64_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && sint32_value_ != NULL) delete sint32_value_;
  sint32_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && sint64_value_ != NULL) delete sint64_value_;
  sint64_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && fixed32_value_ != NULL) delete fixed32_value_;
  fixed32_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && fixed64_value_ != NULL) delete fixed64_value_;
  fixed64_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && sfixed32_value_ != NULL) delete sfixed32_value_;
  sfixed32_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && sfixed64_value_ != NULL) delete sfixed64_value_;
  sfixed64_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && float_value_ != NULL) delete float_value_;
  float_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && double_value_ != NULL) delete double_value_;
  double_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && string_value_ != NULL) delete string_value_;
  string_value_ = NULL;
  is_null_ = false;
  object_id_value_ = 0u;
}

bool RpcParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.RpcParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NanoRpc.BytesValue proto_value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proto_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bool_value;
        break;
      }

      // optional .NanoRpc.BoolValue bool_value = 2;
      case 2: {
        if (tag == 18) {
         parse_bool_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bool_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_int32_value;
        break;
      }

      // optional .NanoRpc.Int32Value int32_value = 3;
      case 3: {
        if (tag == 26) {
         parse_int32_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int32_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_int64_value;
        break;
      }

      // optional .NanoRpc.Int64Value int64_value = 4;
      case 4: {
        if (tag == 34) {
         parse_int64_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int64_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_uint32_value;
        break;
      }

      // optional .NanoRpc.UInt32Value uint32_value = 5;
      case 5: {
        if (tag == 42) {
         parse_uint32_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uint32_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_uint64_value;
        break;
      }

      // optional .NanoRpc.UInt64Value uint64_value = 6;
      case 6: {
        if (tag == 50) {
         parse_uint64_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uint64_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sint32_value;
        break;
      }

      // optional .NanoRpc.SInt32Value sint32_value = 7;
      case 7: {
        if (tag == 58) {
         parse_sint32_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sint32_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sint64_value;
        break;
      }

      // optional .NanoRpc.SInt64Value sint64_value = 8;
      case 8: {
        if (tag == 66) {
         parse_sint64_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sint64_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_fixed32_value;
        break;
      }

      // optional .NanoRpc.Fixed32Value fixed32_value = 9;
      case 9: {
        if (tag == 74) {
         parse_fixed32_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed32_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_fixed64_value;
        break;
      }

      // optional .NanoRpc.Fixed64Value fixed64_value = 10;
      case 10: {
        if (tag == 82) {
         parse_fixed64_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed64_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sfixed32_value;
        break;
      }

      // optional .NanoRpc.SFixed32Value sfixed32_value = 11;
      case 11: {
        if (tag == 90) {
         parse_sfixed32_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sfixed32_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sfixed64_value;
        break;
      }

      // optional .NanoRpc.SFixed64Value sfixed64_value = 12;
      case 12: {
        if (tag == 98) {
         parse_sfixed64_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sfixed64_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_float_value;
        break;
      }

      // optional .NanoRpc.FloatValue float_value = 13;
      case 13: {
        if (tag == 106) {
         parse_float_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_double_value;
        break;
      }

      // optional .NanoRpc.DoubleValue double_value = 14;
      case 14: {
        if (tag == 114) {
         parse_double_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_double_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_string_value;
        break;
      }

      // optional .NanoRpc.StringValue string_value = 15;
      case 15: {
        if (tag == 122) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_is_null;
        break;
      }

      // optional bool is_null = 16;
      case 16: {
        if (tag == 128) {
         parse_is_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_null_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_object_id_value;
        break;
      }

      // optional uint32 object_id_value = 17;
      case 17: {
        if (tag == 136) {
         parse_object_id_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &object_id_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.RpcParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.RpcParameter)
  return false;
#undef DO_
}

void RpcParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.RpcParameter)
  // optional .NanoRpc.BytesValue proto_value = 1;
  if (this->has_proto_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->proto_value_, output);
  }

  // optional .NanoRpc.BoolValue bool_value = 2;
  if (this->has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bool_value_, output);
  }

  // optional .NanoRpc.Int32Value int32_value = 3;
  if (this->has_int32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->int32_value_, output);
  }

  // optional .NanoRpc.Int64Value int64_value = 4;
  if (this->has_int64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->int64_value_, output);
  }

  // optional .NanoRpc.UInt32Value uint32_value = 5;
  if (this->has_uint32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->uint32_value_, output);
  }

  // optional .NanoRpc.UInt64Value uint64_value = 6;
  if (this->has_uint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->uint64_value_, output);
  }

  // optional .NanoRpc.SInt32Value sint32_value = 7;
  if (this->has_sint32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->sint32_value_, output);
  }

  // optional .NanoRpc.SInt64Value sint64_value = 8;
  if (this->has_sint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->sint64_value_, output);
  }

  // optional .NanoRpc.Fixed32Value fixed32_value = 9;
  if (this->has_fixed32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->fixed32_value_, output);
  }

  // optional .NanoRpc.Fixed64Value fixed64_value = 10;
  if (this->has_fixed64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->fixed64_value_, output);
  }

  // optional .NanoRpc.SFixed32Value sfixed32_value = 11;
  if (this->has_sfixed32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->sfixed32_value_, output);
  }

  // optional .NanoRpc.SFixed64Value sfixed64_value = 12;
  if (this->has_sfixed64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->sfixed64_value_, output);
  }

  // optional .NanoRpc.FloatValue float_value = 13;
  if (this->has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->float_value_, output);
  }

  // optional .NanoRpc.DoubleValue double_value = 14;
  if (this->has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->double_value_, output);
  }

  // optional .NanoRpc.StringValue string_value = 15;
  if (this->has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->string_value_, output);
  }

  // optional bool is_null = 16;
  if (this->is_null() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_null(), output);
  }

  // optional uint32 object_id_value = 17;
  if (this->object_id_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->object_id_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.RpcParameter)
}

::google::protobuf::uint8* RpcParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.RpcParameter)
  // optional .NanoRpc.BytesValue proto_value = 1;
  if (this->has_proto_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->proto_value_, target);
  }

  // optional .NanoRpc.BoolValue bool_value = 2;
  if (this->has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->bool_value_, target);
  }

  // optional .NanoRpc.Int32Value int32_value = 3;
  if (this->has_int32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->int32_value_, target);
  }

  // optional .NanoRpc.Int64Value int64_value = 4;
  if (this->has_int64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->int64_value_, target);
  }

  // optional .NanoRpc.UInt32Value uint32_value = 5;
  if (this->has_uint32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->uint32_value_, target);
  }

  // optional .NanoRpc.UInt64Value uint64_value = 6;
  if (this->has_uint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->uint64_value_, target);
  }

  // optional .NanoRpc.SInt32Value sint32_value = 7;
  if (this->has_sint32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->sint32_value_, target);
  }

  // optional .NanoRpc.SInt64Value sint64_value = 8;
  if (this->has_sint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->sint64_value_, target);
  }

  // optional .NanoRpc.Fixed32Value fixed32_value = 9;
  if (this->has_fixed32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->fixed32_value_, target);
  }

  // optional .NanoRpc.Fixed64Value fixed64_value = 10;
  if (this->has_fixed64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->fixed64_value_, target);
  }

  // optional .NanoRpc.SFixed32Value sfixed32_value = 11;
  if (this->has_sfixed32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->sfixed32_value_, target);
  }

  // optional .NanoRpc.SFixed64Value sfixed64_value = 12;
  if (this->has_sfixed64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->sfixed64_value_, target);
  }

  // optional .NanoRpc.FloatValue float_value = 13;
  if (this->has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->float_value_, target);
  }

  // optional .NanoRpc.DoubleValue double_value = 14;
  if (this->has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->double_value_, target);
  }

  // optional .NanoRpc.StringValue string_value = 15;
  if (this->has_string_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->string_value_, target);
  }

  // optional bool is_null = 16;
  if (this->is_null() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_null(), target);
  }

  // optional uint32 object_id_value = 17;
  if (this->object_id_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->object_id_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.RpcParameter)
  return target;
}

int RpcParameter::ByteSize() const {
  int total_size = 0;

  // optional .NanoRpc.BytesValue proto_value = 1;
  if (this->has_proto_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->proto_value_);
  }

  // optional .NanoRpc.BoolValue bool_value = 2;
  if (this->has_bool_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bool_value_);
  }

  // optional .NanoRpc.Int32Value int32_value = 3;
  if (this->has_int32_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->int32_value_);
  }

  // optional .NanoRpc.Int64Value int64_value = 4;
  if (this->has_int64_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->int64_value_);
  }

  // optional .NanoRpc.UInt32Value uint32_value = 5;
  if (this->has_uint32_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uint32_value_);
  }

  // optional .NanoRpc.UInt64Value uint64_value = 6;
  if (this->has_uint64_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uint64_value_);
  }

  // optional .NanoRpc.SInt32Value sint32_value = 7;
  if (this->has_sint32_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sint32_value_);
  }

  // optional .NanoRpc.SInt64Value sint64_value = 8;
  if (this->has_sint64_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sint64_value_);
  }

  // optional .NanoRpc.Fixed32Value fixed32_value = 9;
  if (this->has_fixed32_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fixed32_value_);
  }

  // optional .NanoRpc.Fixed64Value fixed64_value = 10;
  if (this->has_fixed64_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fixed64_value_);
  }

  // optional .NanoRpc.SFixed32Value sfixed32_value = 11;
  if (this->has_sfixed32_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sfixed32_value_);
  }

  // optional .NanoRpc.SFixed64Value sfixed64_value = 12;
  if (this->has_sfixed64_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sfixed64_value_);
  }

  // optional .NanoRpc.FloatValue float_value = 13;
  if (this->has_float_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->float_value_);
  }

  // optional .NanoRpc.DoubleValue double_value = 14;
  if (this->has_double_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->double_value_);
  }

  // optional .NanoRpc.StringValue string_value = 15;
  if (this->has_string_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->string_value_);
  }

  // optional bool is_null = 16;
  if (this->is_null() != 0) {
    total_size += 2 + 1;
  }

  // optional uint32 object_id_value = 17;
  if (this->object_id_value() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->object_id_value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcParameter::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RpcParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcParameter>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcParameter::MergeFrom(const RpcParameter& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_proto_value()) {
    mutable_proto_value()->::NanoRpc::BytesValue::MergeFrom(from.proto_value());
  }
  if (from.has_bool_value()) {
    mutable_bool_value()->::NanoRpc::BoolValue::MergeFrom(from.bool_value());
  }
  if (from.has_int32_value()) {
    mutable_int32_value()->::NanoRpc::Int32Value::MergeFrom(from.int32_value());
  }
  if (from.has_int64_value()) {
    mutable_int64_value()->::NanoRpc::Int64Value::MergeFrom(from.int64_value());
  }
  if (from.has_uint32_value()) {
    mutable_uint32_value()->::NanoRpc::UInt32Value::MergeFrom(from.uint32_value());
  }
  if (from.has_uint64_value()) {
    mutable_uint64_value()->::NanoRpc::UInt64Value::MergeFrom(from.uint64_value());
  }
  if (from.has_sint32_value()) {
    mutable_sint32_value()->::NanoRpc::SInt32Value::MergeFrom(from.sint32_value());
  }
  if (from.has_sint64_value()) {
    mutable_sint64_value()->::NanoRpc::SInt64Value::MergeFrom(from.sint64_value());
  }
  if (from.has_fixed32_value()) {
    mutable_fixed32_value()->::NanoRpc::Fixed32Value::MergeFrom(from.fixed32_value());
  }
  if (from.has_fixed64_value()) {
    mutable_fixed64_value()->::NanoRpc::Fixed64Value::MergeFrom(from.fixed64_value());
  }
  if (from.has_sfixed32_value()) {
    mutable_sfixed32_value()->::NanoRpc::SFixed32Value::MergeFrom(from.sfixed32_value());
  }
  if (from.has_sfixed64_value()) {
    mutable_sfixed64_value()->::NanoRpc::SFixed64Value::MergeFrom(from.sfixed64_value());
  }
  if (from.has_float_value()) {
    mutable_float_value()->::NanoRpc::FloatValue::MergeFrom(from.float_value());
  }
  if (from.has_double_value()) {
    mutable_double_value()->::NanoRpc::DoubleValue::MergeFrom(from.double_value());
  }
  if (from.has_string_value()) {
    mutable_string_value()->::NanoRpc::StringValue::MergeFrom(from.string_value());
  }
  if (from.is_null() != 0) {
    set_is_null(from.is_null());
  }
  if (from.object_id_value() != 0) {
    set_object_id_value(from.object_id_value());
  }
}

void RpcParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcParameter::CopyFrom(const RpcParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcParameter::IsInitialized() const {

  return true;
}

void RpcParameter::Swap(RpcParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcParameter::InternalSwap(RpcParameter* other) {
  std::swap(proto_value_, other->proto_value_);
  std::swap(bool_value_, other->bool_value_);
  std::swap(int32_value_, other->int32_value_);
  std::swap(int64_value_, other->int64_value_);
  std::swap(uint32_value_, other->uint32_value_);
  std::swap(uint64_value_, other->uint64_value_);
  std::swap(sint32_value_, other->sint32_value_);
  std::swap(sint64_value_, other->sint64_value_);
  std::swap(fixed32_value_, other->fixed32_value_);
  std::swap(fixed64_value_, other->fixed64_value_);
  std::swap(sfixed32_value_, other->sfixed32_value_);
  std::swap(sfixed64_value_, other->sfixed64_value_);
  std::swap(float_value_, other->float_value_);
  std::swap(double_value_, other->double_value_);
  std::swap(string_value_, other->string_value_);
  std::swap(is_null_, other->is_null_);
  std::swap(object_id_value_, other->object_id_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcParameter_descriptor_;
  metadata.reflection = RpcParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcParameter

// optional .NanoRpc.BytesValue proto_value = 1;
bool RpcParameter::has_proto_value() const {
  return !_is_default_instance_ && proto_value_ != NULL;
}
void RpcParameter::clear_proto_value() {
  if (GetArenaNoVirtual() == NULL && proto_value_ != NULL) delete proto_value_;
  proto_value_ = NULL;
}
const ::NanoRpc::BytesValue& RpcParameter::proto_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.proto_value)
  return proto_value_ != NULL ? *proto_value_ : *default_instance_->proto_value_;
}
::NanoRpc::BytesValue* RpcParameter::mutable_proto_value() {
  
  if (proto_value_ == NULL) {
    proto_value_ = new ::NanoRpc::BytesValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.proto_value)
  return proto_value_;
}
::NanoRpc::BytesValue* RpcParameter::release_proto_value() {
  
  ::NanoRpc::BytesValue* temp = proto_value_;
  proto_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_proto_value(::NanoRpc::BytesValue* proto_value) {
  delete proto_value_;
  proto_value_ = proto_value;
  if (proto_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.proto_value)
}

// optional .NanoRpc.BoolValue bool_value = 2;
bool RpcParameter::has_bool_value() const {
  return !_is_default_instance_ && bool_value_ != NULL;
}
void RpcParameter::clear_bool_value() {
  if (GetArenaNoVirtual() == NULL && bool_value_ != NULL) delete bool_value_;
  bool_value_ = NULL;
}
const ::NanoRpc::BoolValue& RpcParameter::bool_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.bool_value)
  return bool_value_ != NULL ? *bool_value_ : *default_instance_->bool_value_;
}
::NanoRpc::BoolValue* RpcParameter::mutable_bool_value() {
  
  if (bool_value_ == NULL) {
    bool_value_ = new ::NanoRpc::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.bool_value)
  return bool_value_;
}
::NanoRpc::BoolValue* RpcParameter::release_bool_value() {
  
  ::NanoRpc::BoolValue* temp = bool_value_;
  bool_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_bool_value(::NanoRpc::BoolValue* bool_value) {
  delete bool_value_;
  bool_value_ = bool_value;
  if (bool_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.bool_value)
}

// optional .NanoRpc.Int32Value int32_value = 3;
bool RpcParameter::has_int32_value() const {
  return !_is_default_instance_ && int32_value_ != NULL;
}
void RpcParameter::clear_int32_value() {
  if (GetArenaNoVirtual() == NULL && int32_value_ != NULL) delete int32_value_;
  int32_value_ = NULL;
}
const ::NanoRpc::Int32Value& RpcParameter::int32_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.int32_value)
  return int32_value_ != NULL ? *int32_value_ : *default_instance_->int32_value_;
}
::NanoRpc::Int32Value* RpcParameter::mutable_int32_value() {
  
  if (int32_value_ == NULL) {
    int32_value_ = new ::NanoRpc::Int32Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.int32_value)
  return int32_value_;
}
::NanoRpc::Int32Value* RpcParameter::release_int32_value() {
  
  ::NanoRpc::Int32Value* temp = int32_value_;
  int32_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_int32_value(::NanoRpc::Int32Value* int32_value) {
  delete int32_value_;
  int32_value_ = int32_value;
  if (int32_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.int32_value)
}

// optional .NanoRpc.Int64Value int64_value = 4;
bool RpcParameter::has_int64_value() const {
  return !_is_default_instance_ && int64_value_ != NULL;
}
void RpcParameter::clear_int64_value() {
  if (GetArenaNoVirtual() == NULL && int64_value_ != NULL) delete int64_value_;
  int64_value_ = NULL;
}
const ::NanoRpc::Int64Value& RpcParameter::int64_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.int64_value)
  return int64_value_ != NULL ? *int64_value_ : *default_instance_->int64_value_;
}
::NanoRpc::Int64Value* RpcParameter::mutable_int64_value() {
  
  if (int64_value_ == NULL) {
    int64_value_ = new ::NanoRpc::Int64Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.int64_value)
  return int64_value_;
}
::NanoRpc::Int64Value* RpcParameter::release_int64_value() {
  
  ::NanoRpc::Int64Value* temp = int64_value_;
  int64_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_int64_value(::NanoRpc::Int64Value* int64_value) {
  delete int64_value_;
  int64_value_ = int64_value;
  if (int64_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.int64_value)
}

// optional .NanoRpc.UInt32Value uint32_value = 5;
bool RpcParameter::has_uint32_value() const {
  return !_is_default_instance_ && uint32_value_ != NULL;
}
void RpcParameter::clear_uint32_value() {
  if (GetArenaNoVirtual() == NULL && uint32_value_ != NULL) delete uint32_value_;
  uint32_value_ = NULL;
}
const ::NanoRpc::UInt32Value& RpcParameter::uint32_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.uint32_value)
  return uint32_value_ != NULL ? *uint32_value_ : *default_instance_->uint32_value_;
}
::NanoRpc::UInt32Value* RpcParameter::mutable_uint32_value() {
  
  if (uint32_value_ == NULL) {
    uint32_value_ = new ::NanoRpc::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.uint32_value)
  return uint32_value_;
}
::NanoRpc::UInt32Value* RpcParameter::release_uint32_value() {
  
  ::NanoRpc::UInt32Value* temp = uint32_value_;
  uint32_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_uint32_value(::NanoRpc::UInt32Value* uint32_value) {
  delete uint32_value_;
  uint32_value_ = uint32_value;
  if (uint32_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.uint32_value)
}

// optional .NanoRpc.UInt64Value uint64_value = 6;
bool RpcParameter::has_uint64_value() const {
  return !_is_default_instance_ && uint64_value_ != NULL;
}
void RpcParameter::clear_uint64_value() {
  if (GetArenaNoVirtual() == NULL && uint64_value_ != NULL) delete uint64_value_;
  uint64_value_ = NULL;
}
const ::NanoRpc::UInt64Value& RpcParameter::uint64_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.uint64_value)
  return uint64_value_ != NULL ? *uint64_value_ : *default_instance_->uint64_value_;
}
::NanoRpc::UInt64Value* RpcParameter::mutable_uint64_value() {
  
  if (uint64_value_ == NULL) {
    uint64_value_ = new ::NanoRpc::UInt64Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.uint64_value)
  return uint64_value_;
}
::NanoRpc::UInt64Value* RpcParameter::release_uint64_value() {
  
  ::NanoRpc::UInt64Value* temp = uint64_value_;
  uint64_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_uint64_value(::NanoRpc::UInt64Value* uint64_value) {
  delete uint64_value_;
  uint64_value_ = uint64_value;
  if (uint64_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.uint64_value)
}

// optional .NanoRpc.SInt32Value sint32_value = 7;
bool RpcParameter::has_sint32_value() const {
  return !_is_default_instance_ && sint32_value_ != NULL;
}
void RpcParameter::clear_sint32_value() {
  if (GetArenaNoVirtual() == NULL && sint32_value_ != NULL) delete sint32_value_;
  sint32_value_ = NULL;
}
const ::NanoRpc::SInt32Value& RpcParameter::sint32_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.sint32_value)
  return sint32_value_ != NULL ? *sint32_value_ : *default_instance_->sint32_value_;
}
::NanoRpc::SInt32Value* RpcParameter::mutable_sint32_value() {
  
  if (sint32_value_ == NULL) {
    sint32_value_ = new ::NanoRpc::SInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.sint32_value)
  return sint32_value_;
}
::NanoRpc::SInt32Value* RpcParameter::release_sint32_value() {
  
  ::NanoRpc::SInt32Value* temp = sint32_value_;
  sint32_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_sint32_value(::NanoRpc::SInt32Value* sint32_value) {
  delete sint32_value_;
  sint32_value_ = sint32_value;
  if (sint32_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.sint32_value)
}

// optional .NanoRpc.SInt64Value sint64_value = 8;
bool RpcParameter::has_sint64_value() const {
  return !_is_default_instance_ && sint64_value_ != NULL;
}
void RpcParameter::clear_sint64_value() {
  if (GetArenaNoVirtual() == NULL && sint64_value_ != NULL) delete sint64_value_;
  sint64_value_ = NULL;
}
const ::NanoRpc::SInt64Value& RpcParameter::sint64_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.sint64_value)
  return sint64_value_ != NULL ? *sint64_value_ : *default_instance_->sint64_value_;
}
::NanoRpc::SInt64Value* RpcParameter::mutable_sint64_value() {
  
  if (sint64_value_ == NULL) {
    sint64_value_ = new ::NanoRpc::SInt64Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.sint64_value)
  return sint64_value_;
}
::NanoRpc::SInt64Value* RpcParameter::release_sint64_value() {
  
  ::NanoRpc::SInt64Value* temp = sint64_value_;
  sint64_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_sint64_value(::NanoRpc::SInt64Value* sint64_value) {
  delete sint64_value_;
  sint64_value_ = sint64_value;
  if (sint64_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.sint64_value)
}

// optional .NanoRpc.Fixed32Value fixed32_value = 9;
bool RpcParameter::has_fixed32_value() const {
  return !_is_default_instance_ && fixed32_value_ != NULL;
}
void RpcParameter::clear_fixed32_value() {
  if (GetArenaNoVirtual() == NULL && fixed32_value_ != NULL) delete fixed32_value_;
  fixed32_value_ = NULL;
}
const ::NanoRpc::Fixed32Value& RpcParameter::fixed32_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.fixed32_value)
  return fixed32_value_ != NULL ? *fixed32_value_ : *default_instance_->fixed32_value_;
}
::NanoRpc::Fixed32Value* RpcParameter::mutable_fixed32_value() {
  
  if (fixed32_value_ == NULL) {
    fixed32_value_ = new ::NanoRpc::Fixed32Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.fixed32_value)
  return fixed32_value_;
}
::NanoRpc::Fixed32Value* RpcParameter::release_fixed32_value() {
  
  ::NanoRpc::Fixed32Value* temp = fixed32_value_;
  fixed32_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_fixed32_value(::NanoRpc::Fixed32Value* fixed32_value) {
  delete fixed32_value_;
  fixed32_value_ = fixed32_value;
  if (fixed32_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.fixed32_value)
}

// optional .NanoRpc.Fixed64Value fixed64_value = 10;
bool RpcParameter::has_fixed64_value() const {
  return !_is_default_instance_ && fixed64_value_ != NULL;
}
void RpcParameter::clear_fixed64_value() {
  if (GetArenaNoVirtual() == NULL && fixed64_value_ != NULL) delete fixed64_value_;
  fixed64_value_ = NULL;
}
const ::NanoRpc::Fixed64Value& RpcParameter::fixed64_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.fixed64_value)
  return fixed64_value_ != NULL ? *fixed64_value_ : *default_instance_->fixed64_value_;
}
::NanoRpc::Fixed64Value* RpcParameter::mutable_fixed64_value() {
  
  if (fixed64_value_ == NULL) {
    fixed64_value_ = new ::NanoRpc::Fixed64Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.fixed64_value)
  return fixed64_value_;
}
::NanoRpc::Fixed64Value* RpcParameter::release_fixed64_value() {
  
  ::NanoRpc::Fixed64Value* temp = fixed64_value_;
  fixed64_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_fixed64_value(::NanoRpc::Fixed64Value* fixed64_value) {
  delete fixed64_value_;
  fixed64_value_ = fixed64_value;
  if (fixed64_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.fixed64_value)
}

// optional .NanoRpc.SFixed32Value sfixed32_value = 11;
bool RpcParameter::has_sfixed32_value() const {
  return !_is_default_instance_ && sfixed32_value_ != NULL;
}
void RpcParameter::clear_sfixed32_value() {
  if (GetArenaNoVirtual() == NULL && sfixed32_value_ != NULL) delete sfixed32_value_;
  sfixed32_value_ = NULL;
}
const ::NanoRpc::SFixed32Value& RpcParameter::sfixed32_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.sfixed32_value)
  return sfixed32_value_ != NULL ? *sfixed32_value_ : *default_instance_->sfixed32_value_;
}
::NanoRpc::SFixed32Value* RpcParameter::mutable_sfixed32_value() {
  
  if (sfixed32_value_ == NULL) {
    sfixed32_value_ = new ::NanoRpc::SFixed32Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.sfixed32_value)
  return sfixed32_value_;
}
::NanoRpc::SFixed32Value* RpcParameter::release_sfixed32_value() {
  
  ::NanoRpc::SFixed32Value* temp = sfixed32_value_;
  sfixed32_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_sfixed32_value(::NanoRpc::SFixed32Value* sfixed32_value) {
  delete sfixed32_value_;
  sfixed32_value_ = sfixed32_value;
  if (sfixed32_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.sfixed32_value)
}

// optional .NanoRpc.SFixed64Value sfixed64_value = 12;
bool RpcParameter::has_sfixed64_value() const {
  return !_is_default_instance_ && sfixed64_value_ != NULL;
}
void RpcParameter::clear_sfixed64_value() {
  if (GetArenaNoVirtual() == NULL && sfixed64_value_ != NULL) delete sfixed64_value_;
  sfixed64_value_ = NULL;
}
const ::NanoRpc::SFixed64Value& RpcParameter::sfixed64_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.sfixed64_value)
  return sfixed64_value_ != NULL ? *sfixed64_value_ : *default_instance_->sfixed64_value_;
}
::NanoRpc::SFixed64Value* RpcParameter::mutable_sfixed64_value() {
  
  if (sfixed64_value_ == NULL) {
    sfixed64_value_ = new ::NanoRpc::SFixed64Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.sfixed64_value)
  return sfixed64_value_;
}
::NanoRpc::SFixed64Value* RpcParameter::release_sfixed64_value() {
  
  ::NanoRpc::SFixed64Value* temp = sfixed64_value_;
  sfixed64_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_sfixed64_value(::NanoRpc::SFixed64Value* sfixed64_value) {
  delete sfixed64_value_;
  sfixed64_value_ = sfixed64_value;
  if (sfixed64_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.sfixed64_value)
}

// optional .NanoRpc.FloatValue float_value = 13;
bool RpcParameter::has_float_value() const {
  return !_is_default_instance_ && float_value_ != NULL;
}
void RpcParameter::clear_float_value() {
  if (GetArenaNoVirtual() == NULL && float_value_ != NULL) delete float_value_;
  float_value_ = NULL;
}
const ::NanoRpc::FloatValue& RpcParameter::float_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.float_value)
  return float_value_ != NULL ? *float_value_ : *default_instance_->float_value_;
}
::NanoRpc::FloatValue* RpcParameter::mutable_float_value() {
  
  if (float_value_ == NULL) {
    float_value_ = new ::NanoRpc::FloatValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.float_value)
  return float_value_;
}
::NanoRpc::FloatValue* RpcParameter::release_float_value() {
  
  ::NanoRpc::FloatValue* temp = float_value_;
  float_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_float_value(::NanoRpc::FloatValue* float_value) {
  delete float_value_;
  float_value_ = float_value;
  if (float_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.float_value)
}

// optional .NanoRpc.DoubleValue double_value = 14;
bool RpcParameter::has_double_value() const {
  return !_is_default_instance_ && double_value_ != NULL;
}
void RpcParameter::clear_double_value() {
  if (GetArenaNoVirtual() == NULL && double_value_ != NULL) delete double_value_;
  double_value_ = NULL;
}
const ::NanoRpc::DoubleValue& RpcParameter::double_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.double_value)
  return double_value_ != NULL ? *double_value_ : *default_instance_->double_value_;
}
::NanoRpc::DoubleValue* RpcParameter::mutable_double_value() {
  
  if (double_value_ == NULL) {
    double_value_ = new ::NanoRpc::DoubleValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.double_value)
  return double_value_;
}
::NanoRpc::DoubleValue* RpcParameter::release_double_value() {
  
  ::NanoRpc::DoubleValue* temp = double_value_;
  double_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_double_value(::NanoRpc::DoubleValue* double_value) {
  delete double_value_;
  double_value_ = double_value;
  if (double_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.double_value)
}

// optional .NanoRpc.StringValue string_value = 15;
bool RpcParameter::has_string_value() const {
  return !_is_default_instance_ && string_value_ != NULL;
}
void RpcParameter::clear_string_value() {
  if (GetArenaNoVirtual() == NULL && string_value_ != NULL) delete string_value_;
  string_value_ = NULL;
}
const ::NanoRpc::StringValue& RpcParameter::string_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.string_value)
  return string_value_ != NULL ? *string_value_ : *default_instance_->string_value_;
}
::NanoRpc::StringValue* RpcParameter::mutable_string_value() {
  
  if (string_value_ == NULL) {
    string_value_ = new ::NanoRpc::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.string_value)
  return string_value_;
}
::NanoRpc::StringValue* RpcParameter::release_string_value() {
  
  ::NanoRpc::StringValue* temp = string_value_;
  string_value_ = NULL;
  return temp;
}
void RpcParameter::set_allocated_string_value(::NanoRpc::StringValue* string_value) {
  delete string_value_;
  string_value_ = string_value;
  if (string_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.string_value)
}

// optional bool is_null = 16;
void RpcParameter::clear_is_null() {
  is_null_ = false;
}
 bool RpcParameter::is_null() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.is_null)
  return is_null_;
}
 void RpcParameter::set_is_null(bool value) {
  
  is_null_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcParameter.is_null)
}

// optional uint32 object_id_value = 17;
void RpcParameter::clear_object_id_value() {
  object_id_value_ = 0u;
}
 ::google::protobuf::uint32 RpcParameter::object_id_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.object_id_value)
  return object_id_value_;
}
 void RpcParameter::set_object_id_value(::google::protobuf::uint32 value) {
  
  object_id_value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcParameter.object_id_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcResult::kStatusFieldNumber;
const int RpcResult::kErrorMessageFieldNumber;
const int RpcResult::kCallResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcResult::RpcResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.RpcResult)
}

void RpcResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  call_result_ = const_cast< ::NanoRpc::RpcParameter*>(&::NanoRpc::RpcParameter::default_instance());
}

RpcResult::RpcResult(const RpcResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.RpcResult)
}

void RpcResult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_result_ = NULL;
}

RpcResult::~RpcResult() {
  // @@protoc_insertion_point(destructor:NanoRpc.RpcResult)
  SharedDtor();
}

void RpcResult::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete call_result_;
  }
}

void RpcResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcResult_descriptor_;
}

const RpcResult& RpcResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

RpcResult* RpcResult::default_instance_ = NULL;

RpcResult* RpcResult::New(::google::protobuf::Arena* arena) const {
  RpcResult* n = new RpcResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcResult::Clear() {
  status_ = 0;
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && call_result_ != NULL) delete call_result_;
  call_result_ = NULL;
}

bool RpcResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.RpcResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NanoRpc.RpcStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::NanoRpc::RpcStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (tag == 18) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NanoRpc.RpcResult.error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_call_result;
        break;
      }

      // optional .NanoRpc.RpcParameter call_result = 3;
      case 3: {
        if (tag == 26) {
         parse_call_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.RpcResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.RpcResult)
  return false;
#undef DO_
}

void RpcResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.RpcResult)
  // optional .NanoRpc.RpcStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NanoRpc.RpcResult.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // optional .NanoRpc.RpcParameter call_result = 3;
  if (this->has_call_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->call_result_, output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.RpcResult)
}

::google::protobuf::uint8* RpcResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.RpcResult)
  // optional .NanoRpc.RpcStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NanoRpc.RpcResult.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // optional .NanoRpc.RpcParameter call_result = 3;
  if (this->has_call_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->call_result_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.RpcResult)
  return target;
}

int RpcResult::ByteSize() const {
  int total_size = 0;

  // optional .NanoRpc.RpcStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // optional .NanoRpc.RpcParameter call_result = 3;
  if (this->has_call_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->call_result_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RpcResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcResult::MergeFrom(const RpcResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_call_result()) {
    mutable_call_result()->::NanoRpc::RpcParameter::MergeFrom(from.call_result());
  }
}

void RpcResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcResult::CopyFrom(const RpcResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResult::IsInitialized() const {

  return true;
}

void RpcResult::Swap(RpcResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcResult::InternalSwap(RpcResult* other) {
  std::swap(status_, other->status_);
  error_message_.Swap(&other->error_message_);
  std::swap(call_result_, other->call_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcResult_descriptor_;
  metadata.reflection = RpcResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcResult

// optional .NanoRpc.RpcStatus status = 1;
void RpcResult::clear_status() {
  status_ = 0;
}
 ::NanoRpc::RpcStatus RpcResult::status() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcResult.status)
  return static_cast< ::NanoRpc::RpcStatus >(status_);
}
 void RpcResult::set_status(::NanoRpc::RpcStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcResult.status)
}

// optional string error_message = 2;
void RpcResult::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RpcResult::error_message() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcResult.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcResult::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcResult.error_message)
}
 void RpcResult::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcResult.error_message)
}
 void RpcResult::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcResult.error_message)
}
 ::std::string* RpcResult::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcResult.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RpcResult::release_error_message() {
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcResult::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcResult.error_message)
}

// optional .NanoRpc.RpcParameter call_result = 3;
bool RpcResult::has_call_result() const {
  return !_is_default_instance_ && call_result_ != NULL;
}
void RpcResult::clear_call_result() {
  if (GetArenaNoVirtual() == NULL && call_result_ != NULL) delete call_result_;
  call_result_ = NULL;
}
const ::NanoRpc::RpcParameter& RpcResult::call_result() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcResult.call_result)
  return call_result_ != NULL ? *call_result_ : *default_instance_->call_result_;
}
::NanoRpc::RpcParameter* RpcResult::mutable_call_result() {
  
  if (call_result_ == NULL) {
    call_result_ = new ::NanoRpc::RpcParameter;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcResult.call_result)
  return call_result_;
}
::NanoRpc::RpcParameter* RpcResult::release_call_result() {
  
  ::NanoRpc::RpcParameter* temp = call_result_;
  call_result_ = NULL;
  return temp;
}
void RpcResult::set_allocated_call_result(::NanoRpc::RpcParameter* call_result) {
  delete call_result_;
  call_result_ = call_result;
  if (call_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcResult.call_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcCall::kServiceFieldNumber;
const int RpcCall::kMethodFieldNumber;
const int RpcCall::kParametersFieldNumber;
const int RpcCall::kExpectsResultFieldNumber;
const int RpcCall::kObjectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcCall::RpcCall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.RpcCall)
}

void RpcCall::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RpcCall::RpcCall(const RpcCall& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.RpcCall)
}

void RpcCall::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expects_result_ = false;
  object_id_ = 0u;
}

RpcCall::~RpcCall() {
  // @@protoc_insertion_point(destructor:NanoRpc.RpcCall)
  SharedDtor();
}

void RpcCall::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RpcCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcCall_descriptor_;
}

const RpcCall& RpcCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

RpcCall* RpcCall::default_instance_ = NULL;

RpcCall* RpcCall::New(::google::protobuf::Arena* arena) const {
  RpcCall* n = new RpcCall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcCall::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RpcCall*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(expects_result_, object_id_);
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  parameters_.Clear();
}

bool RpcCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.RpcCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NanoRpc.RpcCall.service"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_method;
        break;
      }

      // optional string method = 2;
      case 2: {
        if (tag == 18) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NanoRpc.RpcCall.method"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parameters;
        break;
      }

      // repeated .NanoRpc.RpcParameter parameters = 3;
      case 3: {
        if (tag == 26) {
         parse_parameters:
          DO_(input->IncrementRecursionDepth());
         parse_loop_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_parameters;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_expects_result;
        break;
      }

      // optional bool expects_result = 4;
      case 4: {
        if (tag == 32) {
         parse_expects_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expects_result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_object_id;
        break;
      }

      // optional uint32 object_id = 5;
      case 5: {
        if (tag == 40) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &object_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.RpcCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.RpcCall)
  return false;
#undef DO_
}

void RpcCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.RpcCall)
  // optional string service = 1;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NanoRpc.RpcCall.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service(), output);
  }

  // optional string method = 2;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NanoRpc.RpcCall.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method(), output);
  }

  // repeated .NanoRpc.RpcParameter parameters = 3;
  for (unsigned int i = 0, n = this->parameters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parameters(i), output);
  }

  // optional bool expects_result = 4;
  if (this->expects_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->expects_result(), output);
  }

  // optional uint32 object_id = 5;
  if (this->object_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->object_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.RpcCall)
}

::google::protobuf::uint8* RpcCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.RpcCall)
  // optional string service = 1;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NanoRpc.RpcCall.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }

  // optional string method = 2;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NanoRpc.RpcCall.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }

  // repeated .NanoRpc.RpcParameter parameters = 3;
  for (unsigned int i = 0, n = this->parameters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parameters(i), target);
  }

  // optional bool expects_result = 4;
  if (this->expects_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->expects_result(), target);
  }

  // optional uint32 object_id = 5;
  if (this->object_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->object_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.RpcCall)
  return target;
}

int RpcCall::ByteSize() const {
  int total_size = 0;

  // optional string service = 1;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  // optional string method = 2;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  // optional bool expects_result = 4;
  if (this->expects_result() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 object_id = 5;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->object_id());
  }

  // repeated .NanoRpc.RpcParameter parameters = 3;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcCall::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RpcCall* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcCall>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcCall::MergeFrom(const RpcCall& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  parameters_.MergeFrom(from.parameters_);
  if (from.service().size() > 0) {

    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.expects_result() != 0) {
    set_expects_result(from.expects_result());
  }
  if (from.object_id() != 0) {
    set_object_id(from.object_id());
  }
}

void RpcCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcCall::CopyFrom(const RpcCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcCall::IsInitialized() const {

  return true;
}

void RpcCall::Swap(RpcCall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcCall::InternalSwap(RpcCall* other) {
  service_.Swap(&other->service_);
  method_.Swap(&other->method_);
  parameters_.UnsafeArenaSwap(&other->parameters_);
  std::swap(expects_result_, other->expects_result_);
  std::swap(object_id_, other->object_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcCall_descriptor_;
  metadata.reflection = RpcCall_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcCall

// optional string service = 1;
void RpcCall::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RpcCall::service() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcCall::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.service)
}
 void RpcCall::set_service(const char* value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcCall.service)
}
 void RpcCall::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcCall.service)
}
 ::std::string* RpcCall::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcCall.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RpcCall::release_service() {
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcCall::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcCall.service)
}

// optional string method = 2;
void RpcCall::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RpcCall::method() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcCall::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.method)
}
 void RpcCall::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcCall.method)
}
 void RpcCall::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcCall.method)
}
 ::std::string* RpcCall::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcCall.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RpcCall::release_method() {
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcCall::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcCall.method)
}

// repeated .NanoRpc.RpcParameter parameters = 3;
int RpcCall::parameters_size() const {
  return parameters_.size();
}
void RpcCall::clear_parameters() {
  parameters_.Clear();
}
const ::NanoRpc::RpcParameter& RpcCall::parameters(int index) const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.parameters)
  return parameters_.Get(index);
}
::NanoRpc::RpcParameter* RpcCall::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcCall.parameters)
  return parameters_.Mutable(index);
}
::NanoRpc::RpcParameter* RpcCall::add_parameters() {
  // @@protoc_insertion_point(field_add:NanoRpc.RpcCall.parameters)
  return parameters_.Add();
}
::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >*
RpcCall::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:NanoRpc.RpcCall.parameters)
  return &parameters_;
}
const ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >&
RpcCall::parameters() const {
  // @@protoc_insertion_point(field_list:NanoRpc.RpcCall.parameters)
  return parameters_;
}

// optional bool expects_result = 4;
void RpcCall::clear_expects_result() {
  expects_result_ = false;
}
 bool RpcCall::expects_result() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.expects_result)
  return expects_result_;
}
 void RpcCall::set_expects_result(bool value) {
  
  expects_result_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.expects_result)
}

// optional uint32 object_id = 5;
void RpcCall::clear_object_id() {
  object_id_ = 0u;
}
 ::google::protobuf::uint32 RpcCall::object_id() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.object_id)
  return object_id_;
}
 void RpcCall::set_object_id(::google::protobuf::uint32 value) {
  
  object_id_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.object_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMessage::kIdFieldNumber;
const int RpcMessage::kCallFieldNumber;
const int RpcMessage::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMessage::RpcMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoRpc.RpcMessage)
}

void RpcMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  call_ = const_cast< ::NanoRpc::RpcCall*>(&::NanoRpc::RpcCall::default_instance());
  result_ = const_cast< ::NanoRpc::RpcResult*>(&::NanoRpc::RpcResult::default_instance());
}

RpcMessage::RpcMessage(const RpcMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NanoRpc.RpcMessage)
}

void RpcMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  call_ = NULL;
  result_ = NULL;
}

RpcMessage::~RpcMessage() {
  // @@protoc_insertion_point(destructor:NanoRpc.RpcMessage)
  SharedDtor();
}

void RpcMessage::SharedDtor() {
  if (this != default_instance_) {
    delete call_;
    delete result_;
  }
}

void RpcMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMessage_descriptor_;
}

const RpcMessage& RpcMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessageTypes_2eproto();
  return *default_instance_;
}

RpcMessage* RpcMessage::default_instance_ = NULL;

RpcMessage* RpcMessage::New(::google::protobuf::Arena* arena) const {
  RpcMessage* n = new RpcMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcMessage::Clear() {
  id_ = 0;
  if (GetArenaNoVirtual() == NULL && call_ != NULL) delete call_;
  call_ = NULL;
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}

bool RpcMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoRpc.RpcMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_call;
        break;
      }

      // optional .NanoRpc.RpcCall call = 2;
      case 2: {
        if (tag == 18) {
         parse_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional .NanoRpc.RpcResult result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoRpc.RpcMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoRpc.RpcMessage)
  return false;
#undef DO_
}

void RpcMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoRpc.RpcMessage)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .NanoRpc.RpcCall call = 2;
  if (this->has_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->call_, output);
  }

  // optional .NanoRpc.RpcResult result = 3;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->result_, output);
  }

  // @@protoc_insertion_point(serialize_end:NanoRpc.RpcMessage)
}

::google::protobuf::uint8* RpcMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoRpc.RpcMessage)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .NanoRpc.RpcCall call = 2;
  if (this->has_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->call_, target);
  }

  // optional .NanoRpc.RpcResult result = 3;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->result_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NanoRpc.RpcMessage)
  return target;
}

int RpcMessage::ByteSize() const {
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .NanoRpc.RpcCall call = 2;
  if (this->has_call()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->call_);
  }

  // optional .NanoRpc.RpcResult result = 3;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RpcMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcMessage::MergeFrom(const RpcMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_call()) {
    mutable_call()->::NanoRpc::RpcCall::MergeFrom(from.call());
  }
  if (from.has_result()) {
    mutable_result()->::NanoRpc::RpcResult::MergeFrom(from.result());
  }
}

void RpcMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMessage::CopyFrom(const RpcMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMessage::IsInitialized() const {

  return true;
}

void RpcMessage::Swap(RpcMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMessage::InternalSwap(RpcMessage* other) {
  std::swap(id_, other->id_);
  std::swap(call_, other->call_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMessage_descriptor_;
  metadata.reflection = RpcMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcMessage

// optional int32 id = 1;
void RpcMessage::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 RpcMessage::id() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcMessage.id)
  return id_;
}
 void RpcMessage::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcMessage.id)
}

// optional .NanoRpc.RpcCall call = 2;
bool RpcMessage::has_call() const {
  return !_is_default_instance_ && call_ != NULL;
}
void RpcMessage::clear_call() {
  if (GetArenaNoVirtual() == NULL && call_ != NULL) delete call_;
  call_ = NULL;
}
const ::NanoRpc::RpcCall& RpcMessage::call() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcMessage.call)
  return call_ != NULL ? *call_ : *default_instance_->call_;
}
::NanoRpc::RpcCall* RpcMessage::mutable_call() {
  
  if (call_ == NULL) {
    call_ = new ::NanoRpc::RpcCall;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcMessage.call)
  return call_;
}
::NanoRpc::RpcCall* RpcMessage::release_call() {
  
  ::NanoRpc::RpcCall* temp = call_;
  call_ = NULL;
  return temp;
}
void RpcMessage::set_allocated_call(::NanoRpc::RpcCall* call) {
  delete call_;
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcMessage.call)
}

// optional .NanoRpc.RpcResult result = 3;
bool RpcMessage::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
void RpcMessage::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::NanoRpc::RpcResult& RpcMessage::result() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcMessage.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::NanoRpc::RpcResult* RpcMessage::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::NanoRpc::RpcResult;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcMessage.result)
  return result_;
}
::NanoRpc::RpcResult* RpcMessage::release_result() {
  
  ::NanoRpc::RpcResult* temp = result_;
  result_ = NULL;
  return temp;
}
void RpcMessage::set_allocated_result(::NanoRpc::RpcResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcMessage.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NanoRpc

// @@protoc_insertion_point(global_scope)
