// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessageTypes.proto

#ifndef PROTOBUF_RpcMessageTypes_2eproto__INCLUDED
#define PROTOBUF_RpcMessageTypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace NanoRpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RpcMessageTypes_2eproto();
void protobuf_AssignDesc_RpcMessageTypes_2eproto();
void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

class RpcParameter;
class RpcResult;
class RpcCall;
class RpcMessage;

enum RpcStatus {
  RpcSucceeded = 0,
  RpcChannelFailure = 1,
  RpcUnknownMethod = 2,
  RpcProtocolError = 3,
  RpcUnknownInterface = 4,
  RpcInvalidCallParameter = 5
};
bool RpcStatus_IsValid(int value);
const RpcStatus RpcStatus_MIN = RpcSucceeded;
const RpcStatus RpcStatus_MAX = RpcInvalidCallParameter;
const int RpcStatus_ARRAYSIZE = RpcStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcStatus_descriptor();
inline const ::std::string& RpcStatus_Name(RpcStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcStatus_descriptor(), value);
}
inline bool RpcStatus_Parse(
    const ::std::string& name, RpcStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcStatus>(
    RpcStatus_descriptor(), name, value);
}
// ===================================================================

class RpcParameter : public ::google::protobuf::Message {
 public:
  RpcParameter();
  virtual ~RpcParameter();
  
  RpcParameter(const RpcParameter& from);
  
  inline RpcParameter& operator=(const RpcParameter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcParameter& default_instance();
  
  void Swap(RpcParameter* other);
  
  // implements Message ----------------------------------------------
  
  RpcParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcParameter& from);
  void MergeFrom(const RpcParameter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes proto_value = 1;
  inline bool has_proto_value() const;
  inline void clear_proto_value();
  static const int kProtoValueFieldNumber = 1;
  inline const ::std::string& proto_value() const;
  inline void set_proto_value(const ::std::string& value);
  inline void set_proto_value(const char* value);
  inline void set_proto_value(const void* value, size_t size);
  inline ::std::string* mutable_proto_value();
  inline ::std::string* release_proto_value();
  
  // optional bool bool_value = 2;
  inline bool has_bool_value() const;
  inline void clear_bool_value();
  static const int kBoolValueFieldNumber = 2;
  inline bool bool_value() const;
  inline void set_bool_value(bool value);
  
  // optional int32 int32_value = 3;
  inline bool has_int32_value() const;
  inline void clear_int32_value();
  static const int kInt32ValueFieldNumber = 3;
  inline ::google::protobuf::int32 int32_value() const;
  inline void set_int32_value(::google::protobuf::int32 value);
  
  // optional int64 int64_value = 4;
  inline bool has_int64_value() const;
  inline void clear_int64_value();
  static const int kInt64ValueFieldNumber = 4;
  inline ::google::protobuf::int64 int64_value() const;
  inline void set_int64_value(::google::protobuf::int64 value);
  
  // optional uint32 uint32_value = 5;
  inline bool has_uint32_value() const;
  inline void clear_uint32_value();
  static const int kUint32ValueFieldNumber = 5;
  inline ::google::protobuf::uint32 uint32_value() const;
  inline void set_uint32_value(::google::protobuf::uint32 value);
  
  // optional uint64 uint64_value = 6;
  inline bool has_uint64_value() const;
  inline void clear_uint64_value();
  static const int kUint64ValueFieldNumber = 6;
  inline ::google::protobuf::uint64 uint64_value() const;
  inline void set_uint64_value(::google::protobuf::uint64 value);
  
  // optional sint32 sint32_value = 7;
  inline bool has_sint32_value() const;
  inline void clear_sint32_value();
  static const int kSint32ValueFieldNumber = 7;
  inline ::google::protobuf::int32 sint32_value() const;
  inline void set_sint32_value(::google::protobuf::int32 value);
  
  // optional sint64 sint64_value = 8;
  inline bool has_sint64_value() const;
  inline void clear_sint64_value();
  static const int kSint64ValueFieldNumber = 8;
  inline ::google::protobuf::int64 sint64_value() const;
  inline void set_sint64_value(::google::protobuf::int64 value);
  
  // optional fixed32 fixed32_value = 9;
  inline bool has_fixed32_value() const;
  inline void clear_fixed32_value();
  static const int kFixed32ValueFieldNumber = 9;
  inline ::google::protobuf::uint32 fixed32_value() const;
  inline void set_fixed32_value(::google::protobuf::uint32 value);
  
  // optional fixed64 fixed64_value = 10;
  inline bool has_fixed64_value() const;
  inline void clear_fixed64_value();
  static const int kFixed64ValueFieldNumber = 10;
  inline ::google::protobuf::uint64 fixed64_value() const;
  inline void set_fixed64_value(::google::protobuf::uint64 value);
  
  // optional sfixed32 sfixed32_value = 11;
  inline bool has_sfixed32_value() const;
  inline void clear_sfixed32_value();
  static const int kSfixed32ValueFieldNumber = 11;
  inline ::google::protobuf::int32 sfixed32_value() const;
  inline void set_sfixed32_value(::google::protobuf::int32 value);
  
  // optional sfixed64 sfixed64_value = 12;
  inline bool has_sfixed64_value() const;
  inline void clear_sfixed64_value();
  static const int kSfixed64ValueFieldNumber = 12;
  inline ::google::protobuf::int64 sfixed64_value() const;
  inline void set_sfixed64_value(::google::protobuf::int64 value);
  
  // optional float float_value = 13;
  inline bool has_float_value() const;
  inline void clear_float_value();
  static const int kFloatValueFieldNumber = 13;
  inline float float_value() const;
  inline void set_float_value(float value);
  
  // optional double double_value = 14;
  inline bool has_double_value() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 14;
  inline double double_value() const;
  inline void set_double_value(double value);
  
  // optional string string_value = 15;
  inline bool has_string_value() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 15;
  inline const ::std::string& string_value() const;
  inline void set_string_value(const ::std::string& value);
  inline void set_string_value(const char* value);
  inline void set_string_value(const char* value, size_t size);
  inline ::std::string* mutable_string_value();
  inline ::std::string* release_string_value();
  
  // optional bool is_null = 16;
  inline bool has_is_null() const;
  inline void clear_is_null();
  static const int kIsNullFieldNumber = 16;
  inline bool is_null() const;
  inline void set_is_null(bool value);
  
  // optional uint32 object_id_value = 17;
  inline bool has_object_id_value() const;
  inline void clear_object_id_value();
  static const int kObjectIdValueFieldNumber = 17;
  inline ::google::protobuf::uint32 object_id_value() const;
  inline void set_object_id_value(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:NanoRpc.RpcParameter)
 private:
  inline void set_has_proto_value();
  inline void clear_has_proto_value();
  inline void set_has_bool_value();
  inline void clear_has_bool_value();
  inline void set_has_int32_value();
  inline void clear_has_int32_value();
  inline void set_has_int64_value();
  inline void clear_has_int64_value();
  inline void set_has_uint32_value();
  inline void clear_has_uint32_value();
  inline void set_has_uint64_value();
  inline void clear_has_uint64_value();
  inline void set_has_sint32_value();
  inline void clear_has_sint32_value();
  inline void set_has_sint64_value();
  inline void clear_has_sint64_value();
  inline void set_has_fixed32_value();
  inline void clear_has_fixed32_value();
  inline void set_has_fixed64_value();
  inline void clear_has_fixed64_value();
  inline void set_has_sfixed32_value();
  inline void clear_has_sfixed32_value();
  inline void set_has_sfixed64_value();
  inline void clear_has_sfixed64_value();
  inline void set_has_float_value();
  inline void clear_has_float_value();
  inline void set_has_double_value();
  inline void clear_has_double_value();
  inline void set_has_string_value();
  inline void clear_has_string_value();
  inline void set_has_is_null();
  inline void clear_has_is_null();
  inline void set_has_object_id_value();
  inline void clear_has_object_id_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* proto_value_;
  ::google::protobuf::int64 int64_value_;
  ::google::protobuf::int32 int32_value_;
  ::google::protobuf::uint32 uint32_value_;
  ::google::protobuf::uint64 uint64_value_;
  ::google::protobuf::int64 sint64_value_;
  ::google::protobuf::int32 sint32_value_;
  ::google::protobuf::uint32 fixed32_value_;
  bool bool_value_;
  bool is_null_;
  ::google::protobuf::int32 sfixed32_value_;
  ::google::protobuf::uint64 fixed64_value_;
  ::google::protobuf::int64 sfixed64_value_;
  double double_value_;
  ::std::string* string_value_;
  float float_value_;
  ::google::protobuf::uint32 object_id_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();
  
  void InitAsDefaultInstance();
  static RpcParameter* default_instance_;
};
// -------------------------------------------------------------------

class RpcResult : public ::google::protobuf::Message {
 public:
  RpcResult();
  virtual ~RpcResult();
  
  RpcResult(const RpcResult& from);
  
  inline RpcResult& operator=(const RpcResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResult& default_instance();
  
  void Swap(RpcResult* other);
  
  // implements Message ----------------------------------------------
  
  RpcResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcResult& from);
  void MergeFrom(const RpcResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .NanoRpc.RpcStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline NanoRpc::RpcStatus status() const;
  inline void set_status(NanoRpc::RpcStatus value);
  
  // optional string error_message = 2;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  
  // optional .NanoRpc.RpcParameter call_result = 3;
  inline bool has_call_result() const;
  inline void clear_call_result();
  static const int kCallResultFieldNumber = 3;
  inline const ::NanoRpc::RpcParameter& call_result() const;
  inline ::NanoRpc::RpcParameter* mutable_call_result();
  inline ::NanoRpc::RpcParameter* release_call_result();
  
  // @@protoc_insertion_point(class_scope:NanoRpc.RpcResult)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_error_message();
  inline void clear_has_error_message();
  inline void set_has_call_result();
  inline void clear_has_call_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* error_message_;
  ::NanoRpc::RpcParameter* call_result_;
  int status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();
  
  void InitAsDefaultInstance();
  static RpcResult* default_instance_;
};
// -------------------------------------------------------------------

class RpcCall : public ::google::protobuf::Message {
 public:
  RpcCall();
  virtual ~RpcCall();
  
  RpcCall(const RpcCall& from);
  
  inline RpcCall& operator=(const RpcCall& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcCall& default_instance();
  
  void Swap(RpcCall* other);
  
  // implements Message ----------------------------------------------
  
  RpcCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcCall& from);
  void MergeFrom(const RpcCall& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string service = 1;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 1;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  
  // optional string method = 2;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  
  // repeated .NanoRpc.RpcParameter parameters = 3;
  inline int parameters_size() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 3;
  inline const ::NanoRpc::RpcParameter& parameters(int index) const;
  inline ::NanoRpc::RpcParameter* mutable_parameters(int index);
  inline ::NanoRpc::RpcParameter* add_parameters();
  inline const ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >&
      parameters() const;
  inline ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >*
      mutable_parameters();
  
  // optional bool expects_result = 4;
  inline bool has_expects_result() const;
  inline void clear_expects_result();
  static const int kExpectsResultFieldNumber = 4;
  inline bool expects_result() const;
  inline void set_expects_result(bool value);
  
  // optional uint32 object_id = 5;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 5;
  inline ::google::protobuf::uint32 object_id() const;
  inline void set_object_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:NanoRpc.RpcCall)
 private:
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_expects_result();
  inline void clear_has_expects_result();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_;
  ::std::string* method_;
  ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter > parameters_;
  bool expects_result_;
  ::google::protobuf::uint32 object_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();
  
  void InitAsDefaultInstance();
  static RpcCall* default_instance_;
};
// -------------------------------------------------------------------

class RpcMessage : public ::google::protobuf::Message {
 public:
  RpcMessage();
  virtual ~RpcMessage();
  
  RpcMessage(const RpcMessage& from);
  
  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();
  
  void Swap(RpcMessage* other);
  
  // implements Message ----------------------------------------------
  
  RpcMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NanoRpc.RpcCall call = 2;
  inline bool has_call() const;
  inline void clear_call();
  static const int kCallFieldNumber = 2;
  inline const ::NanoRpc::RpcCall& call() const;
  inline ::NanoRpc::RpcCall* mutable_call();
  inline ::NanoRpc::RpcCall* release_call();
  
  // optional .NanoRpc.RpcResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::NanoRpc::RpcResult& result() const;
  inline ::NanoRpc::RpcResult* mutable_result();
  inline ::NanoRpc::RpcResult* release_result();
  
  // @@protoc_insertion_point(class_scope:NanoRpc.RpcMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_call();
  inline void clear_has_call();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NanoRpc::RpcCall* call_;
  ::NanoRpc::RpcResult* result_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();
  
  void InitAsDefaultInstance();
  static RpcMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcParameter

// optional bytes proto_value = 1;
inline bool RpcParameter::has_proto_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcParameter::set_has_proto_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcParameter::clear_has_proto_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcParameter::clear_proto_value() {
  if (proto_value_ != &::google::protobuf::internal::kEmptyString) {
    proto_value_->clear();
  }
  clear_has_proto_value();
}
inline const ::std::string& RpcParameter::proto_value() const {
  return *proto_value_;
}
inline void RpcParameter::set_proto_value(const ::std::string& value) {
  set_has_proto_value();
  if (proto_value_ == &::google::protobuf::internal::kEmptyString) {
    proto_value_ = new ::std::string;
  }
  proto_value_->assign(value);
}
inline void RpcParameter::set_proto_value(const char* value) {
  set_has_proto_value();
  if (proto_value_ == &::google::protobuf::internal::kEmptyString) {
    proto_value_ = new ::std::string;
  }
  proto_value_->assign(value);
}
inline void RpcParameter::set_proto_value(const void* value, size_t size) {
  set_has_proto_value();
  if (proto_value_ == &::google::protobuf::internal::kEmptyString) {
    proto_value_ = new ::std::string;
  }
  proto_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcParameter::mutable_proto_value() {
  set_has_proto_value();
  if (proto_value_ == &::google::protobuf::internal::kEmptyString) {
    proto_value_ = new ::std::string;
  }
  return proto_value_;
}
inline ::std::string* RpcParameter::release_proto_value() {
  clear_has_proto_value();
  if (proto_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = proto_value_;
    proto_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool bool_value = 2;
inline bool RpcParameter::has_bool_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcParameter::set_has_bool_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcParameter::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcParameter::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool RpcParameter::bool_value() const {
  return bool_value_;
}
inline void RpcParameter::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
}

// optional int32 int32_value = 3;
inline bool RpcParameter::has_int32_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcParameter::set_has_int32_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcParameter::clear_has_int32_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcParameter::clear_int32_value() {
  int32_value_ = 0;
  clear_has_int32_value();
}
inline ::google::protobuf::int32 RpcParameter::int32_value() const {
  return int32_value_;
}
inline void RpcParameter::set_int32_value(::google::protobuf::int32 value) {
  set_has_int32_value();
  int32_value_ = value;
}

// optional int64 int64_value = 4;
inline bool RpcParameter::has_int64_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcParameter::set_has_int64_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcParameter::clear_has_int64_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcParameter::clear_int64_value() {
  int64_value_ = GOOGLE_LONGLONG(0);
  clear_has_int64_value();
}
inline ::google::protobuf::int64 RpcParameter::int64_value() const {
  return int64_value_;
}
inline void RpcParameter::set_int64_value(::google::protobuf::int64 value) {
  set_has_int64_value();
  int64_value_ = value;
}

// optional uint32 uint32_value = 5;
inline bool RpcParameter::has_uint32_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcParameter::set_has_uint32_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcParameter::clear_has_uint32_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcParameter::clear_uint32_value() {
  uint32_value_ = 0u;
  clear_has_uint32_value();
}
inline ::google::protobuf::uint32 RpcParameter::uint32_value() const {
  return uint32_value_;
}
inline void RpcParameter::set_uint32_value(::google::protobuf::uint32 value) {
  set_has_uint32_value();
  uint32_value_ = value;
}

// optional uint64 uint64_value = 6;
inline bool RpcParameter::has_uint64_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcParameter::set_has_uint64_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpcParameter::clear_has_uint64_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpcParameter::clear_uint64_value() {
  uint64_value_ = GOOGLE_ULONGLONG(0);
  clear_has_uint64_value();
}
inline ::google::protobuf::uint64 RpcParameter::uint64_value() const {
  return uint64_value_;
}
inline void RpcParameter::set_uint64_value(::google::protobuf::uint64 value) {
  set_has_uint64_value();
  uint64_value_ = value;
}

// optional sint32 sint32_value = 7;
inline bool RpcParameter::has_sint32_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RpcParameter::set_has_sint32_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RpcParameter::clear_has_sint32_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RpcParameter::clear_sint32_value() {
  sint32_value_ = 0;
  clear_has_sint32_value();
}
inline ::google::protobuf::int32 RpcParameter::sint32_value() const {
  return sint32_value_;
}
inline void RpcParameter::set_sint32_value(::google::protobuf::int32 value) {
  set_has_sint32_value();
  sint32_value_ = value;
}

// optional sint64 sint64_value = 8;
inline bool RpcParameter::has_sint64_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RpcParameter::set_has_sint64_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RpcParameter::clear_has_sint64_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RpcParameter::clear_sint64_value() {
  sint64_value_ = GOOGLE_LONGLONG(0);
  clear_has_sint64_value();
}
inline ::google::protobuf::int64 RpcParameter::sint64_value() const {
  return sint64_value_;
}
inline void RpcParameter::set_sint64_value(::google::protobuf::int64 value) {
  set_has_sint64_value();
  sint64_value_ = value;
}

// optional fixed32 fixed32_value = 9;
inline bool RpcParameter::has_fixed32_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RpcParameter::set_has_fixed32_value() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RpcParameter::clear_has_fixed32_value() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RpcParameter::clear_fixed32_value() {
  fixed32_value_ = 0u;
  clear_has_fixed32_value();
}
inline ::google::protobuf::uint32 RpcParameter::fixed32_value() const {
  return fixed32_value_;
}
inline void RpcParameter::set_fixed32_value(::google::protobuf::uint32 value) {
  set_has_fixed32_value();
  fixed32_value_ = value;
}

// optional fixed64 fixed64_value = 10;
inline bool RpcParameter::has_fixed64_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RpcParameter::set_has_fixed64_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RpcParameter::clear_has_fixed64_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RpcParameter::clear_fixed64_value() {
  fixed64_value_ = GOOGLE_ULONGLONG(0);
  clear_has_fixed64_value();
}
inline ::google::protobuf::uint64 RpcParameter::fixed64_value() const {
  return fixed64_value_;
}
inline void RpcParameter::set_fixed64_value(::google::protobuf::uint64 value) {
  set_has_fixed64_value();
  fixed64_value_ = value;
}

// optional sfixed32 sfixed32_value = 11;
inline bool RpcParameter::has_sfixed32_value() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RpcParameter::set_has_sfixed32_value() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RpcParameter::clear_has_sfixed32_value() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RpcParameter::clear_sfixed32_value() {
  sfixed32_value_ = 0;
  clear_has_sfixed32_value();
}
inline ::google::protobuf::int32 RpcParameter::sfixed32_value() const {
  return sfixed32_value_;
}
inline void RpcParameter::set_sfixed32_value(::google::protobuf::int32 value) {
  set_has_sfixed32_value();
  sfixed32_value_ = value;
}

// optional sfixed64 sfixed64_value = 12;
inline bool RpcParameter::has_sfixed64_value() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RpcParameter::set_has_sfixed64_value() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RpcParameter::clear_has_sfixed64_value() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RpcParameter::clear_sfixed64_value() {
  sfixed64_value_ = GOOGLE_LONGLONG(0);
  clear_has_sfixed64_value();
}
inline ::google::protobuf::int64 RpcParameter::sfixed64_value() const {
  return sfixed64_value_;
}
inline void RpcParameter::set_sfixed64_value(::google::protobuf::int64 value) {
  set_has_sfixed64_value();
  sfixed64_value_ = value;
}

// optional float float_value = 13;
inline bool RpcParameter::has_float_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RpcParameter::set_has_float_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RpcParameter::clear_has_float_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RpcParameter::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float RpcParameter::float_value() const {
  return float_value_;
}
inline void RpcParameter::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
}

// optional double double_value = 14;
inline bool RpcParameter::has_double_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RpcParameter::set_has_double_value() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RpcParameter::clear_has_double_value() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RpcParameter::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double RpcParameter::double_value() const {
  return double_value_;
}
inline void RpcParameter::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
}

// optional string string_value = 15;
inline bool RpcParameter::has_string_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RpcParameter::set_has_string_value() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RpcParameter::clear_has_string_value() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RpcParameter::clear_string_value() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    string_value_->clear();
  }
  clear_has_string_value();
}
inline const ::std::string& RpcParameter::string_value() const {
  return *string_value_;
}
inline void RpcParameter::set_string_value(const ::std::string& value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void RpcParameter::set_string_value(const char* value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void RpcParameter::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcParameter::mutable_string_value() {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  return string_value_;
}
inline ::std::string* RpcParameter::release_string_value() {
  clear_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_value_;
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_null = 16;
inline bool RpcParameter::has_is_null() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RpcParameter::set_has_is_null() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RpcParameter::clear_has_is_null() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RpcParameter::clear_is_null() {
  is_null_ = false;
  clear_has_is_null();
}
inline bool RpcParameter::is_null() const {
  return is_null_;
}
inline void RpcParameter::set_is_null(bool value) {
  set_has_is_null();
  is_null_ = value;
}

// optional uint32 object_id_value = 17;
inline bool RpcParameter::has_object_id_value() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RpcParameter::set_has_object_id_value() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RpcParameter::clear_has_object_id_value() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RpcParameter::clear_object_id_value() {
  object_id_value_ = 0u;
  clear_has_object_id_value();
}
inline ::google::protobuf::uint32 RpcParameter::object_id_value() const {
  return object_id_value_;
}
inline void RpcParameter::set_object_id_value(::google::protobuf::uint32 value) {
  set_has_object_id_value();
  object_id_value_ = value;
}

// -------------------------------------------------------------------

// RpcResult

// optional .NanoRpc.RpcStatus status = 1;
inline bool RpcResult::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcResult::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcResult::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline NanoRpc::RpcStatus RpcResult::status() const {
  return static_cast< NanoRpc::RpcStatus >(status_);
}
inline void RpcResult::set_status(NanoRpc::RpcStatus value) {
  GOOGLE_DCHECK(NanoRpc::RpcStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string error_message = 2;
inline bool RpcResult::has_error_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcResult::set_has_error_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcResult::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcResult::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& RpcResult::error_message() const {
  return *error_message_;
}
inline void RpcResult::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void RpcResult::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void RpcResult::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResult::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* RpcResult::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .NanoRpc.RpcParameter call_result = 3;
inline bool RpcResult::has_call_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcResult::set_has_call_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcResult::clear_has_call_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcResult::clear_call_result() {
  if (call_result_ != NULL) call_result_->::NanoRpc::RpcParameter::Clear();
  clear_has_call_result();
}
inline const ::NanoRpc::RpcParameter& RpcResult::call_result() const {
  return call_result_ != NULL ? *call_result_ : *default_instance_->call_result_;
}
inline ::NanoRpc::RpcParameter* RpcResult::mutable_call_result() {
  set_has_call_result();
  if (call_result_ == NULL) call_result_ = new ::NanoRpc::RpcParameter;
  return call_result_;
}
inline ::NanoRpc::RpcParameter* RpcResult::release_call_result() {
  clear_has_call_result();
  ::NanoRpc::RpcParameter* temp = call_result_;
  call_result_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RpcCall

// optional string service = 1;
inline bool RpcCall::has_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcCall::set_has_service() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcCall::clear_has_service() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcCall::clear_service() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& RpcCall::service() const {
  return *service_;
}
inline void RpcCall::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RpcCall::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RpcCall::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcCall::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  return service_;
}
inline ::std::string* RpcCall::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string method = 2;
inline bool RpcCall::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcCall::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcCall::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcCall::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& RpcCall::method() const {
  return *method_;
}
inline void RpcCall::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcCall::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcCall::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcCall::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* RpcCall::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .NanoRpc.RpcParameter parameters = 3;
inline int RpcCall::parameters_size() const {
  return parameters_.size();
}
inline void RpcCall::clear_parameters() {
  parameters_.Clear();
}
inline const ::NanoRpc::RpcParameter& RpcCall::parameters(int index) const {
  return parameters_.Get(index);
}
inline ::NanoRpc::RpcParameter* RpcCall::mutable_parameters(int index) {
  return parameters_.Mutable(index);
}
inline ::NanoRpc::RpcParameter* RpcCall::add_parameters() {
  return parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >&
RpcCall::parameters() const {
  return parameters_;
}
inline ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >*
RpcCall::mutable_parameters() {
  return &parameters_;
}

// optional bool expects_result = 4;
inline bool RpcCall::has_expects_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcCall::set_has_expects_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcCall::clear_has_expects_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcCall::clear_expects_result() {
  expects_result_ = false;
  clear_has_expects_result();
}
inline bool RpcCall::expects_result() const {
  return expects_result_;
}
inline void RpcCall::set_expects_result(bool value) {
  set_has_expects_result();
  expects_result_ = value;
}

// optional uint32 object_id = 5;
inline bool RpcCall::has_object_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcCall::set_has_object_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcCall::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcCall::clear_object_id() {
  object_id_ = 0u;
  clear_has_object_id();
}
inline ::google::protobuf::uint32 RpcCall::object_id() const {
  return object_id_;
}
inline void RpcCall::set_object_id(::google::protobuf::uint32 value) {
  set_has_object_id();
  object_id_ = value;
}

// -------------------------------------------------------------------

// RpcMessage

// optional int32 id = 1;
inline bool RpcMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RpcMessage::id() const {
  return id_;
}
inline void RpcMessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NanoRpc.RpcCall call = 2;
inline bool RpcMessage::has_call() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMessage::set_has_call() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMessage::clear_has_call() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMessage::clear_call() {
  if (call_ != NULL) call_->::NanoRpc::RpcCall::Clear();
  clear_has_call();
}
inline const ::NanoRpc::RpcCall& RpcMessage::call() const {
  return call_ != NULL ? *call_ : *default_instance_->call_;
}
inline ::NanoRpc::RpcCall* RpcMessage::mutable_call() {
  set_has_call();
  if (call_ == NULL) call_ = new ::NanoRpc::RpcCall;
  return call_;
}
inline ::NanoRpc::RpcCall* RpcMessage::release_call() {
  clear_has_call();
  ::NanoRpc::RpcCall* temp = call_;
  call_ = NULL;
  return temp;
}

// optional .NanoRpc.RpcResult result = 3;
inline bool RpcMessage::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMessage::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMessage::clear_result() {
  if (result_ != NULL) result_->::NanoRpc::RpcResult::Clear();
  clear_has_result();
}
inline const ::NanoRpc::RpcResult& RpcMessage::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::NanoRpc::RpcResult* RpcMessage::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::NanoRpc::RpcResult;
  return result_;
}
inline ::NanoRpc::RpcResult* RpcMessage::release_result() {
  clear_has_result();
  ::NanoRpc::RpcResult* temp = result_;
  result_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NanoRpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< NanoRpc::RpcStatus>() {
  return NanoRpc::RpcStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RpcMessageTypes_2eproto__INCLUDED
