// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessageTypes.proto

#ifndef PROTOBUF_RpcMessageTypes_2eproto__INCLUDED
#define PROTOBUF_RpcMessageTypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)

namespace NanoRpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_RpcMessageTypes_2eproto();
void protobuf_AssignDesc_RpcMessageTypes_2eproto();
void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

class RpcCall;
class RpcMessage;
class RpcParameter;
class RpcResult;
class RpcVoid;

enum RpcStatus {
  RpcSucceeded = 0,
  RpcChannelFailure = 1,
  RpcUnknownMethod = 2,
  RpcProtocolError = 3,
  RpcUnknownInterface = 4,
  RpcInvalidCallParameter = 5,
  RpcStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RpcStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RpcStatus_IsValid(int value);
const RpcStatus RpcStatus_MIN = RpcSucceeded;
const RpcStatus RpcStatus_MAX = RpcInvalidCallParameter;
const int RpcStatus_ARRAYSIZE = RpcStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcStatus_descriptor();
inline const ::std::string& RpcStatus_Name(RpcStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcStatus_descriptor(), value);
}
inline bool RpcStatus_Parse(
    const ::std::string& name, RpcStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcStatus>(
    RpcStatus_descriptor(), name, value);
}
// ===================================================================

class RpcParameter : public ::google::protobuf::Message {
 public:
  RpcParameter();
  virtual ~RpcParameter();

  RpcParameter(const RpcParameter& from);

  inline RpcParameter& operator=(const RpcParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcParameter& default_instance();

  enum ControlCase {
    kObjectIdValue = 17,
    kEventName = 18,
    CONTROL_NOT_SET = 0,
  };

  void Swap(RpcParameter* other);

  // implements Message ----------------------------------------------

  inline RpcParameter* New() const { return New(NULL); }

  RpcParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcParameter& from);
  void MergeFrom(const RpcParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.BytesValue proto_value = 1;
  bool has_proto_value() const;
  void clear_proto_value();
  static const int kProtoValueFieldNumber = 1;
  const ::google::protobuf::BytesValue& proto_value() const;
  ::google::protobuf::BytesValue* mutable_proto_value();
  ::google::protobuf::BytesValue* release_proto_value();
  void set_allocated_proto_value(::google::protobuf::BytesValue* proto_value);

  // optional .google.protobuf.Any any_value = 2;
  bool has_any_value() const;
  void clear_any_value();
  static const int kAnyValueFieldNumber = 2;
  const ::google::protobuf::Any& any_value() const;
  ::google::protobuf::Any* mutable_any_value();
  ::google::protobuf::Any* release_any_value();
  void set_allocated_any_value(::google::protobuf::Any* any_value);

  // optional bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional uint32 object_id_value = 17;
  private:
  bool has_object_id_value() const;
  public:
  void clear_object_id_value();
  static const int kObjectIdValueFieldNumber = 17;
  ::google::protobuf::uint32 object_id_value() const;
  void set_object_id_value(::google::protobuf::uint32 value);

  // optional string event_name = 18;
  private:
  bool has_event_name() const;
  public:
  void clear_event_name();
  static const int kEventNameFieldNumber = 18;
  const ::std::string& event_name() const;
  void set_event_name(const ::std::string& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  ::std::string* mutable_event_name();
  ::std::string* release_event_name();
  void set_allocated_event_name(::std::string* event_name);

  ControlCase control_case() const;
  // @@protoc_insertion_point(class_scope:NanoRpc.RpcParameter)
 private:
  inline void set_has_object_id_value();
  inline void set_has_event_name();

  inline bool has_control() const;
  void clear_control();
  inline void clear_has_control();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::BytesValue* proto_value_;
  ::google::protobuf::Any* any_value_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  union ControlUnion {
    ControlUnion() {}
    ::google::protobuf::uint32 object_id_value_;
    ::google::protobuf::internal::ArenaStringPtr event_name_;
  } control_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static RpcParameter* default_instance_;
};
// -------------------------------------------------------------------

class RpcResult : public ::google::protobuf::Message {
 public:
  RpcResult();
  virtual ~RpcResult();

  RpcResult(const RpcResult& from);

  inline RpcResult& operator=(const RpcResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResult& default_instance();

  void Swap(RpcResult* other);

  // implements Message ----------------------------------------------

  inline RpcResult* New() const { return New(NULL); }

  RpcResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcResult& from);
  void MergeFrom(const RpcResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NanoRpc.RpcStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::NanoRpc::RpcStatus status() const;
  void set_status(::NanoRpc::RpcStatus value);

  // optional string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // optional .NanoRpc.RpcParameter call_result = 3;
  bool has_call_result() const;
  void clear_call_result();
  static const int kCallResultFieldNumber = 3;
  const ::NanoRpc::RpcParameter& call_result() const;
  ::NanoRpc::RpcParameter* mutable_call_result();
  ::NanoRpc::RpcParameter* release_call_result();
  void set_allocated_call_result(::NanoRpc::RpcParameter* call_result);

  // @@protoc_insertion_point(class_scope:NanoRpc.RpcResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::NanoRpc::RpcParameter* call_result_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static RpcResult* default_instance_;
};
// -------------------------------------------------------------------

class RpcCall : public ::google::protobuf::Message {
 public:
  RpcCall();
  virtual ~RpcCall();

  RpcCall(const RpcCall& from);

  inline RpcCall& operator=(const RpcCall& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcCall& default_instance();

  void Swap(RpcCall* other);

  // implements Message ----------------------------------------------

  inline RpcCall* New() const { return New(NULL); }

  RpcCall* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcCall& from);
  void MergeFrom(const RpcCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcCall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // optional string method = 2;
  void clear_method();
  static const int kMethodFieldNumber = 2;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // repeated .NanoRpc.RpcParameter parameters = 3;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 3;
  const ::NanoRpc::RpcParameter& parameters(int index) const;
  ::NanoRpc::RpcParameter* mutable_parameters(int index);
  ::NanoRpc::RpcParameter* add_parameters();
  ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >*
      mutable_parameters();
  const ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >&
      parameters() const;

  // optional bool expects_result = 4;
  void clear_expects_result();
  static const int kExpectsResultFieldNumber = 4;
  bool expects_result() const;
  void set_expects_result(bool value);

  // optional uint32 object_id = 5;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 5;
  ::google::protobuf::uint32 object_id() const;
  void set_object_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.RpcCall)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter > parameters_;
  bool expects_result_;
  ::google::protobuf::uint32 object_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static RpcCall* default_instance_;
};
// -------------------------------------------------------------------

class RpcMessage : public ::google::protobuf::Message {
 public:
  RpcMessage();
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();

  void Swap(RpcMessage* other);

  // implements Message ----------------------------------------------

  inline RpcMessage* New() const { return New(NULL); }

  RpcMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .NanoRpc.RpcCall call = 2;
  bool has_call() const;
  void clear_call();
  static const int kCallFieldNumber = 2;
  const ::NanoRpc::RpcCall& call() const;
  ::NanoRpc::RpcCall* mutable_call();
  ::NanoRpc::RpcCall* release_call();
  void set_allocated_call(::NanoRpc::RpcCall* call);

  // optional .NanoRpc.RpcResult result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::NanoRpc::RpcResult& result() const;
  ::NanoRpc::RpcResult* mutable_result();
  ::NanoRpc::RpcResult* release_result();
  void set_allocated_result(::NanoRpc::RpcResult* result);

  // @@protoc_insertion_point(class_scope:NanoRpc.RpcMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::NanoRpc::RpcCall* call_;
  ::NanoRpc::RpcResult* result_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static RpcMessage* default_instance_;
};
// -------------------------------------------------------------------

class RpcVoid : public ::google::protobuf::Message {
 public:
  RpcVoid();
  virtual ~RpcVoid();

  RpcVoid(const RpcVoid& from);

  inline RpcVoid& operator=(const RpcVoid& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcVoid& default_instance();

  void Swap(RpcVoid* other);

  // implements Message ----------------------------------------------

  inline RpcVoid* New() const { return New(NULL); }

  RpcVoid* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcVoid& from);
  void MergeFrom(const RpcVoid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcVoid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NanoRpc.RpcVoid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static RpcVoid* default_instance_;
};
// ===================================================================

static const int kEventSourceFieldNumber = 51224;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  event_source;
static const int kPropertyNameFieldNumber = 51223;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  property_name;
static const int kAsyncFieldNumber = 51225;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  async;

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcParameter

// optional .google.protobuf.BytesValue proto_value = 1;
inline bool RpcParameter::has_proto_value() const {
  return !_is_default_instance_ && proto_value_ != NULL;
}
inline void RpcParameter::clear_proto_value() {
  if (GetArenaNoVirtual() == NULL && proto_value_ != NULL) delete proto_value_;
  proto_value_ = NULL;
}
inline const ::google::protobuf::BytesValue& RpcParameter::proto_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.proto_value)
  return proto_value_ != NULL ? *proto_value_ : *default_instance_->proto_value_;
}
inline ::google::protobuf::BytesValue* RpcParameter::mutable_proto_value() {
  
  if (proto_value_ == NULL) {
    proto_value_ = new ::google::protobuf::BytesValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.proto_value)
  return proto_value_;
}
inline ::google::protobuf::BytesValue* RpcParameter::release_proto_value() {
  // @@protoc_insertion_point(field_release:NanoRpc.RpcParameter.proto_value)
  
  ::google::protobuf::BytesValue* temp = proto_value_;
  proto_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_proto_value(::google::protobuf::BytesValue* proto_value) {
  delete proto_value_;
  if (proto_value != NULL && proto_value->GetArena() != NULL) {
    ::google::protobuf::BytesValue* new_proto_value = new ::google::protobuf::BytesValue;
    new_proto_value->CopyFrom(*proto_value);
    proto_value = new_proto_value;
  }
  proto_value_ = proto_value;
  if (proto_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.proto_value)
}

// optional .google.protobuf.Any any_value = 2;
inline bool RpcParameter::has_any_value() const {
  return !_is_default_instance_ && any_value_ != NULL;
}
inline void RpcParameter::clear_any_value() {
  if (GetArenaNoVirtual() == NULL && any_value_ != NULL) delete any_value_;
  any_value_ = NULL;
}
inline const ::google::protobuf::Any& RpcParameter::any_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.any_value)
  return any_value_ != NULL ? *any_value_ : *default_instance_->any_value_;
}
inline ::google::protobuf::Any* RpcParameter::mutable_any_value() {
  
  if (any_value_ == NULL) {
    any_value_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.any_value)
  return any_value_;
}
inline ::google::protobuf::Any* RpcParameter::release_any_value() {
  // @@protoc_insertion_point(field_release:NanoRpc.RpcParameter.any_value)
  
  ::google::protobuf::Any* temp = any_value_;
  any_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_any_value(::google::protobuf::Any* any_value) {
  delete any_value_;
  any_value_ = any_value;
  if (any_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.any_value)
}

// optional bytes value = 3;
inline void RpcParameter::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcParameter::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcParameter::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcParameter.value)
}
inline void RpcParameter::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcParameter.value)
}
inline void RpcParameter::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcParameter.value)
}
inline ::std::string* RpcParameter::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcParameter::release_value() {
  // @@protoc_insertion_point(field_release:NanoRpc.RpcParameter.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcParameter::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.value)
}

// optional uint32 object_id_value = 17;
inline bool RpcParameter::has_object_id_value() const {
  return control_case() == kObjectIdValue;
}
inline void RpcParameter::set_has_object_id_value() {
  _oneof_case_[0] = kObjectIdValue;
}
inline void RpcParameter::clear_object_id_value() {
  if (has_object_id_value()) {
    control_.object_id_value_ = 0u;
    clear_has_control();
  }
}
inline ::google::protobuf::uint32 RpcParameter::object_id_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.object_id_value)
  if (has_object_id_value()) {
    return control_.object_id_value_;
  }
  return 0u;
}
inline void RpcParameter::set_object_id_value(::google::protobuf::uint32 value) {
  if (!has_object_id_value()) {
    clear_control();
    set_has_object_id_value();
  }
  control_.object_id_value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcParameter.object_id_value)
}

// optional string event_name = 18;
inline bool RpcParameter::has_event_name() const {
  return control_case() == kEventName;
}
inline void RpcParameter::set_has_event_name() {
  _oneof_case_[0] = kEventName;
}
inline void RpcParameter::clear_event_name() {
  if (has_event_name()) {
    control_.event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_control();
  }
}
inline const ::std::string& RpcParameter::event_name() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.event_name)
  if (has_event_name()) {
    return control_.event_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RpcParameter::set_event_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NanoRpc.RpcParameter.event_name)
  if (!has_event_name()) {
    clear_control();
    set_has_event_name();
    control_.event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  control_.event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcParameter.event_name)
}
inline void RpcParameter::set_event_name(const char* value) {
  if (!has_event_name()) {
    clear_control();
    set_has_event_name();
    control_.event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  control_.event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcParameter.event_name)
}
inline void RpcParameter::set_event_name(const char* value, size_t size) {
  if (!has_event_name()) {
    clear_control();
    set_has_event_name();
    control_.event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  control_.event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcParameter.event_name)
}
inline ::std::string* RpcParameter::mutable_event_name() {
  if (!has_event_name()) {
    clear_control();
    set_has_event_name();
    control_.event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.event_name)
  return control_.event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcParameter::release_event_name() {
  // @@protoc_insertion_point(field_release:NanoRpc.RpcParameter.event_name)
  if (has_event_name()) {
    clear_has_control();
    return control_.event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RpcParameter::set_allocated_event_name(::std::string* event_name) {
  if (!has_event_name()) {
    control_.event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_control();
  if (event_name != NULL) {
    set_has_event_name();
    control_.event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        event_name);
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.event_name)
}

inline bool RpcParameter::has_control() const {
  return control_case() != CONTROL_NOT_SET;
}
inline void RpcParameter::clear_has_control() {
  _oneof_case_[0] = CONTROL_NOT_SET;
}
inline RpcParameter::ControlCase RpcParameter::control_case() const {
  return RpcParameter::ControlCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RpcResult

// optional .NanoRpc.RpcStatus status = 1;
inline void RpcResult::clear_status() {
  status_ = 0;
}
inline ::NanoRpc::RpcStatus RpcResult::status() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcResult.status)
  return static_cast< ::NanoRpc::RpcStatus >(status_);
}
inline void RpcResult::set_status(::NanoRpc::RpcStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcResult.status)
}

// optional string error_message = 2;
inline void RpcResult::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcResult::error_message() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcResult.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcResult::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcResult.error_message)
}
inline void RpcResult::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcResult.error_message)
}
inline void RpcResult::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcResult.error_message)
}
inline ::std::string* RpcResult::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcResult.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcResult::release_error_message() {
  // @@protoc_insertion_point(field_release:NanoRpc.RpcResult.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcResult::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcResult.error_message)
}

// optional .NanoRpc.RpcParameter call_result = 3;
inline bool RpcResult::has_call_result() const {
  return !_is_default_instance_ && call_result_ != NULL;
}
inline void RpcResult::clear_call_result() {
  if (GetArenaNoVirtual() == NULL && call_result_ != NULL) delete call_result_;
  call_result_ = NULL;
}
inline const ::NanoRpc::RpcParameter& RpcResult::call_result() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcResult.call_result)
  return call_result_ != NULL ? *call_result_ : *default_instance_->call_result_;
}
inline ::NanoRpc::RpcParameter* RpcResult::mutable_call_result() {
  
  if (call_result_ == NULL) {
    call_result_ = new ::NanoRpc::RpcParameter;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcResult.call_result)
  return call_result_;
}
inline ::NanoRpc::RpcParameter* RpcResult::release_call_result() {
  // @@protoc_insertion_point(field_release:NanoRpc.RpcResult.call_result)
  
  ::NanoRpc::RpcParameter* temp = call_result_;
  call_result_ = NULL;
  return temp;
}
inline void RpcResult::set_allocated_call_result(::NanoRpc::RpcParameter* call_result) {
  delete call_result_;
  call_result_ = call_result;
  if (call_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcResult.call_result)
}

// -------------------------------------------------------------------

// RpcCall

// optional string service = 1;
inline void RpcCall::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcCall::service() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcCall::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.service)
}
inline void RpcCall::set_service(const char* value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcCall.service)
}
inline void RpcCall::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcCall.service)
}
inline ::std::string* RpcCall::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcCall.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcCall::release_service() {
  // @@protoc_insertion_point(field_release:NanoRpc.RpcCall.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcCall::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcCall.service)
}

// optional string method = 2;
inline void RpcCall::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcCall::method() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcCall::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.method)
}
inline void RpcCall::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcCall.method)
}
inline void RpcCall::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcCall.method)
}
inline ::std::string* RpcCall::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcCall.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcCall::release_method() {
  // @@protoc_insertion_point(field_release:NanoRpc.RpcCall.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcCall::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcCall.method)
}

// repeated .NanoRpc.RpcParameter parameters = 3;
inline int RpcCall::parameters_size() const {
  return parameters_.size();
}
inline void RpcCall::clear_parameters() {
  parameters_.Clear();
}
inline const ::NanoRpc::RpcParameter& RpcCall::parameters(int index) const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.parameters)
  return parameters_.Get(index);
}
inline ::NanoRpc::RpcParameter* RpcCall::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcCall.parameters)
  return parameters_.Mutable(index);
}
inline ::NanoRpc::RpcParameter* RpcCall::add_parameters() {
  // @@protoc_insertion_point(field_add:NanoRpc.RpcCall.parameters)
  return parameters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >*
RpcCall::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:NanoRpc.RpcCall.parameters)
  return &parameters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >&
RpcCall::parameters() const {
  // @@protoc_insertion_point(field_list:NanoRpc.RpcCall.parameters)
  return parameters_;
}

// optional bool expects_result = 4;
inline void RpcCall::clear_expects_result() {
  expects_result_ = false;
}
inline bool RpcCall::expects_result() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.expects_result)
  return expects_result_;
}
inline void RpcCall::set_expects_result(bool value) {
  
  expects_result_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.expects_result)
}

// optional uint32 object_id = 5;
inline void RpcCall::clear_object_id() {
  object_id_ = 0u;
}
inline ::google::protobuf::uint32 RpcCall::object_id() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.object_id)
  return object_id_;
}
inline void RpcCall::set_object_id(::google::protobuf::uint32 value) {
  
  object_id_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.object_id)
}

// -------------------------------------------------------------------

// RpcMessage

// optional int32 id = 1;
inline void RpcMessage::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 RpcMessage::id() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcMessage.id)
  return id_;
}
inline void RpcMessage::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcMessage.id)
}

// optional .NanoRpc.RpcCall call = 2;
inline bool RpcMessage::has_call() const {
  return !_is_default_instance_ && call_ != NULL;
}
inline void RpcMessage::clear_call() {
  if (GetArenaNoVirtual() == NULL && call_ != NULL) delete call_;
  call_ = NULL;
}
inline const ::NanoRpc::RpcCall& RpcMessage::call() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcMessage.call)
  return call_ != NULL ? *call_ : *default_instance_->call_;
}
inline ::NanoRpc::RpcCall* RpcMessage::mutable_call() {
  
  if (call_ == NULL) {
    call_ = new ::NanoRpc::RpcCall;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcMessage.call)
  return call_;
}
inline ::NanoRpc::RpcCall* RpcMessage::release_call() {
  // @@protoc_insertion_point(field_release:NanoRpc.RpcMessage.call)
  
  ::NanoRpc::RpcCall* temp = call_;
  call_ = NULL;
  return temp;
}
inline void RpcMessage::set_allocated_call(::NanoRpc::RpcCall* call) {
  delete call_;
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcMessage.call)
}

// optional .NanoRpc.RpcResult result = 3;
inline bool RpcMessage::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
inline void RpcMessage::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
inline const ::NanoRpc::RpcResult& RpcMessage::result() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcMessage.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::NanoRpc::RpcResult* RpcMessage::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::NanoRpc::RpcResult;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcMessage.result)
  return result_;
}
inline ::NanoRpc::RpcResult* RpcMessage::release_result() {
  // @@protoc_insertion_point(field_release:NanoRpc.RpcMessage.result)
  
  ::NanoRpc::RpcResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RpcMessage::set_allocated_result(::NanoRpc::RpcResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcMessage.result)
}

// -------------------------------------------------------------------

// RpcVoid

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NanoRpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NanoRpc::RpcStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NanoRpc::RpcStatus>() {
  return ::NanoRpc::RpcStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RpcMessageTypes_2eproto__INCLUDED
