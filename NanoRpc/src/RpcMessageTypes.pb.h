// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessageTypes.proto

#ifndef PROTOBUF_RpcMessageTypes_2eproto__INCLUDED
#define PROTOBUF_RpcMessageTypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NanoRpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_RpcMessageTypes_2eproto();
void protobuf_AssignDesc_RpcMessageTypes_2eproto();
void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

class BoolValue;
class BytesValue;
class DoubleValue;
class Fixed32Value;
class Fixed64Value;
class FloatValue;
class Int32Value;
class Int64Value;
class RpcCall;
class RpcMessage;
class RpcParameter;
class RpcResult;
class SFixed32Value;
class SFixed64Value;
class SInt32Value;
class SInt64Value;
class StringValue;
class UInt32Value;
class UInt64Value;

enum RpcStatus {
  RpcSucceeded = 0,
  RpcChannelFailure = 1,
  RpcUnknownMethod = 2,
  RpcProtocolError = 3,
  RpcUnknownInterface = 4,
  RpcInvalidCallParameter = 5,
  RpcStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RpcStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RpcStatus_IsValid(int value);
const RpcStatus RpcStatus_MIN = RpcSucceeded;
const RpcStatus RpcStatus_MAX = RpcInvalidCallParameter;
const int RpcStatus_ARRAYSIZE = RpcStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcStatus_descriptor();
inline const ::std::string& RpcStatus_Name(RpcStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcStatus_descriptor(), value);
}
inline bool RpcStatus_Parse(
    const ::std::string& name, RpcStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcStatus>(
    RpcStatus_descriptor(), name, value);
}
// ===================================================================

class DoubleValue : public ::google::protobuf::Message {
 public:
  DoubleValue();
  virtual ~DoubleValue();

  DoubleValue(const DoubleValue& from);

  inline DoubleValue& operator=(const DoubleValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleValue& default_instance();

  void Swap(DoubleValue* other);

  // implements Message ----------------------------------------------

  inline DoubleValue* New() const { return New(NULL); }

  DoubleValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoubleValue& from);
  void MergeFrom(const DoubleValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DoubleValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:NanoRpc.DoubleValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static DoubleValue* default_instance_;
};
// -------------------------------------------------------------------

class FloatValue : public ::google::protobuf::Message {
 public:
  FloatValue();
  virtual ~FloatValue();

  FloatValue(const FloatValue& from);

  inline FloatValue& operator=(const FloatValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatValue& default_instance();

  void Swap(FloatValue* other);

  // implements Message ----------------------------------------------

  inline FloatValue* New() const { return New(NULL); }

  FloatValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatValue& from);
  void MergeFrom(const FloatValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:NanoRpc.FloatValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static FloatValue* default_instance_;
};
// -------------------------------------------------------------------

class Int64Value : public ::google::protobuf::Message {
 public:
  Int64Value();
  virtual ~Int64Value();

  Int64Value(const Int64Value& from);

  inline Int64Value& operator=(const Int64Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Int64Value& default_instance();

  void Swap(Int64Value* other);

  // implements Message ----------------------------------------------

  inline Int64Value* New() const { return New(NULL); }

  Int64Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Int64Value& from);
  void MergeFrom(const Int64Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int64Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.Int64Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static Int64Value* default_instance_;
};
// -------------------------------------------------------------------

class UInt64Value : public ::google::protobuf::Message {
 public:
  UInt64Value();
  virtual ~UInt64Value();

  UInt64Value(const UInt64Value& from);

  inline UInt64Value& operator=(const UInt64Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UInt64Value& default_instance();

  void Swap(UInt64Value* other);

  // implements Message ----------------------------------------------

  inline UInt64Value* New() const { return New(NULL); }

  UInt64Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UInt64Value& from);
  void MergeFrom(const UInt64Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UInt64Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.UInt64Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static UInt64Value* default_instance_;
};
// -------------------------------------------------------------------

class Int32Value : public ::google::protobuf::Message {
 public:
  Int32Value();
  virtual ~Int32Value();

  Int32Value(const Int32Value& from);

  inline Int32Value& operator=(const Int32Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Int32Value& default_instance();

  void Swap(Int32Value* other);

  // implements Message ----------------------------------------------

  inline Int32Value* New() const { return New(NULL); }

  Int32Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Int32Value& from);
  void MergeFrom(const Int32Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int32Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.Int32Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static Int32Value* default_instance_;
};
// -------------------------------------------------------------------

class UInt32Value : public ::google::protobuf::Message {
 public:
  UInt32Value();
  virtual ~UInt32Value();

  UInt32Value(const UInt32Value& from);

  inline UInt32Value& operator=(const UInt32Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UInt32Value& default_instance();

  void Swap(UInt32Value* other);

  // implements Message ----------------------------------------------

  inline UInt32Value* New() const { return New(NULL); }

  UInt32Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UInt32Value& from);
  void MergeFrom(const UInt32Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UInt32Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.UInt32Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static UInt32Value* default_instance_;
};
// -------------------------------------------------------------------

class BoolValue : public ::google::protobuf::Message {
 public:
  BoolValue();
  virtual ~BoolValue();

  BoolValue(const BoolValue& from);

  inline BoolValue& operator=(const BoolValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoolValue& default_instance();

  void Swap(BoolValue* other);

  // implements Message ----------------------------------------------

  inline BoolValue* New() const { return New(NULL); }

  BoolValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoolValue& from);
  void MergeFrom(const BoolValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoolValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:NanoRpc.BoolValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static BoolValue* default_instance_;
};
// -------------------------------------------------------------------

class StringValue : public ::google::protobuf::Message {
 public:
  StringValue();
  virtual ~StringValue();

  StringValue(const StringValue& from);

  inline StringValue& operator=(const StringValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringValue& default_instance();

  void Swap(StringValue* other);

  // implements Message ----------------------------------------------

  inline StringValue* New() const { return New(NULL); }

  StringValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringValue& from);
  void MergeFrom(const StringValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:NanoRpc.StringValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static StringValue* default_instance_;
};
// -------------------------------------------------------------------

class BytesValue : public ::google::protobuf::Message {
 public:
  BytesValue();
  virtual ~BytesValue();

  BytesValue(const BytesValue& from);

  inline BytesValue& operator=(const BytesValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BytesValue& default_instance();

  void Swap(BytesValue* other);

  // implements Message ----------------------------------------------

  inline BytesValue* New() const { return New(NULL); }

  BytesValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BytesValue& from);
  void MergeFrom(const BytesValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BytesValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:NanoRpc.BytesValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static BytesValue* default_instance_;
};
// -------------------------------------------------------------------

class SInt32Value : public ::google::protobuf::Message {
 public:
  SInt32Value();
  virtual ~SInt32Value();

  SInt32Value(const SInt32Value& from);

  inline SInt32Value& operator=(const SInt32Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SInt32Value& default_instance();

  void Swap(SInt32Value* other);

  // implements Message ----------------------------------------------

  inline SInt32Value* New() const { return New(NULL); }

  SInt32Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SInt32Value& from);
  void MergeFrom(const SInt32Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SInt32Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.SInt32Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static SInt32Value* default_instance_;
};
// -------------------------------------------------------------------

class SInt64Value : public ::google::protobuf::Message {
 public:
  SInt64Value();
  virtual ~SInt64Value();

  SInt64Value(const SInt64Value& from);

  inline SInt64Value& operator=(const SInt64Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SInt64Value& default_instance();

  void Swap(SInt64Value* other);

  // implements Message ----------------------------------------------

  inline SInt64Value* New() const { return New(NULL); }

  SInt64Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SInt64Value& from);
  void MergeFrom(const SInt64Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SInt64Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.SInt64Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static SInt64Value* default_instance_;
};
// -------------------------------------------------------------------

class Fixed32Value : public ::google::protobuf::Message {
 public:
  Fixed32Value();
  virtual ~Fixed32Value();

  Fixed32Value(const Fixed32Value& from);

  inline Fixed32Value& operator=(const Fixed32Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fixed32Value& default_instance();

  void Swap(Fixed32Value* other);

  // implements Message ----------------------------------------------

  inline Fixed32Value* New() const { return New(NULL); }

  Fixed32Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fixed32Value& from);
  void MergeFrom(const Fixed32Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Fixed32Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.Fixed32Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static Fixed32Value* default_instance_;
};
// -------------------------------------------------------------------

class Fixed64Value : public ::google::protobuf::Message {
 public:
  Fixed64Value();
  virtual ~Fixed64Value();

  Fixed64Value(const Fixed64Value& from);

  inline Fixed64Value& operator=(const Fixed64Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fixed64Value& default_instance();

  void Swap(Fixed64Value* other);

  // implements Message ----------------------------------------------

  inline Fixed64Value* New() const { return New(NULL); }

  Fixed64Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fixed64Value& from);
  void MergeFrom(const Fixed64Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Fixed64Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.Fixed64Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static Fixed64Value* default_instance_;
};
// -------------------------------------------------------------------

class SFixed32Value : public ::google::protobuf::Message {
 public:
  SFixed32Value();
  virtual ~SFixed32Value();

  SFixed32Value(const SFixed32Value& from);

  inline SFixed32Value& operator=(const SFixed32Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SFixed32Value& default_instance();

  void Swap(SFixed32Value* other);

  // implements Message ----------------------------------------------

  inline SFixed32Value* New() const { return New(NULL); }

  SFixed32Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SFixed32Value& from);
  void MergeFrom(const SFixed32Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SFixed32Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sfixed32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.SFixed32Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static SFixed32Value* default_instance_;
};
// -------------------------------------------------------------------

class SFixed64Value : public ::google::protobuf::Message {
 public:
  SFixed64Value();
  virtual ~SFixed64Value();

  SFixed64Value(const SFixed64Value& from);

  inline SFixed64Value& operator=(const SFixed64Value& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SFixed64Value& default_instance();

  void Swap(SFixed64Value* other);

  // implements Message ----------------------------------------------

  inline SFixed64Value* New() const { return New(NULL); }

  SFixed64Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SFixed64Value& from);
  void MergeFrom(const SFixed64Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SFixed64Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sfixed64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.SFixed64Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static SFixed64Value* default_instance_;
};
// -------------------------------------------------------------------

class RpcParameter : public ::google::protobuf::Message {
 public:
  RpcParameter();
  virtual ~RpcParameter();

  RpcParameter(const RpcParameter& from);

  inline RpcParameter& operator=(const RpcParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcParameter& default_instance();

  void Swap(RpcParameter* other);

  // implements Message ----------------------------------------------

  inline RpcParameter* New() const { return New(NULL); }

  RpcParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcParameter& from);
  void MergeFrom(const RpcParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NanoRpc.BytesValue proto_value = 1;
  bool has_proto_value() const;
  void clear_proto_value();
  static const int kProtoValueFieldNumber = 1;
  const ::NanoRpc::BytesValue& proto_value() const;
  ::NanoRpc::BytesValue* mutable_proto_value();
  ::NanoRpc::BytesValue* release_proto_value();
  void set_allocated_proto_value(::NanoRpc::BytesValue* proto_value);

  // optional .NanoRpc.BoolValue bool_value = 2;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 2;
  const ::NanoRpc::BoolValue& bool_value() const;
  ::NanoRpc::BoolValue* mutable_bool_value();
  ::NanoRpc::BoolValue* release_bool_value();
  void set_allocated_bool_value(::NanoRpc::BoolValue* bool_value);

  // optional .NanoRpc.Int32Value int32_value = 3;
  bool has_int32_value() const;
  void clear_int32_value();
  static const int kInt32ValueFieldNumber = 3;
  const ::NanoRpc::Int32Value& int32_value() const;
  ::NanoRpc::Int32Value* mutable_int32_value();
  ::NanoRpc::Int32Value* release_int32_value();
  void set_allocated_int32_value(::NanoRpc::Int32Value* int32_value);

  // optional .NanoRpc.Int64Value int64_value = 4;
  bool has_int64_value() const;
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 4;
  const ::NanoRpc::Int64Value& int64_value() const;
  ::NanoRpc::Int64Value* mutable_int64_value();
  ::NanoRpc::Int64Value* release_int64_value();
  void set_allocated_int64_value(::NanoRpc::Int64Value* int64_value);

  // optional .NanoRpc.UInt32Value uint32_value = 5;
  bool has_uint32_value() const;
  void clear_uint32_value();
  static const int kUint32ValueFieldNumber = 5;
  const ::NanoRpc::UInt32Value& uint32_value() const;
  ::NanoRpc::UInt32Value* mutable_uint32_value();
  ::NanoRpc::UInt32Value* release_uint32_value();
  void set_allocated_uint32_value(::NanoRpc::UInt32Value* uint32_value);

  // optional .NanoRpc.UInt64Value uint64_value = 6;
  bool has_uint64_value() const;
  void clear_uint64_value();
  static const int kUint64ValueFieldNumber = 6;
  const ::NanoRpc::UInt64Value& uint64_value() const;
  ::NanoRpc::UInt64Value* mutable_uint64_value();
  ::NanoRpc::UInt64Value* release_uint64_value();
  void set_allocated_uint64_value(::NanoRpc::UInt64Value* uint64_value);

  // optional .NanoRpc.SInt32Value sint32_value = 7;
  bool has_sint32_value() const;
  void clear_sint32_value();
  static const int kSint32ValueFieldNumber = 7;
  const ::NanoRpc::SInt32Value& sint32_value() const;
  ::NanoRpc::SInt32Value* mutable_sint32_value();
  ::NanoRpc::SInt32Value* release_sint32_value();
  void set_allocated_sint32_value(::NanoRpc::SInt32Value* sint32_value);

  // optional .NanoRpc.SInt64Value sint64_value = 8;
  bool has_sint64_value() const;
  void clear_sint64_value();
  static const int kSint64ValueFieldNumber = 8;
  const ::NanoRpc::SInt64Value& sint64_value() const;
  ::NanoRpc::SInt64Value* mutable_sint64_value();
  ::NanoRpc::SInt64Value* release_sint64_value();
  void set_allocated_sint64_value(::NanoRpc::SInt64Value* sint64_value);

  // optional .NanoRpc.Fixed32Value fixed32_value = 9;
  bool has_fixed32_value() const;
  void clear_fixed32_value();
  static const int kFixed32ValueFieldNumber = 9;
  const ::NanoRpc::Fixed32Value& fixed32_value() const;
  ::NanoRpc::Fixed32Value* mutable_fixed32_value();
  ::NanoRpc::Fixed32Value* release_fixed32_value();
  void set_allocated_fixed32_value(::NanoRpc::Fixed32Value* fixed32_value);

  // optional .NanoRpc.Fixed64Value fixed64_value = 10;
  bool has_fixed64_value() const;
  void clear_fixed64_value();
  static const int kFixed64ValueFieldNumber = 10;
  const ::NanoRpc::Fixed64Value& fixed64_value() const;
  ::NanoRpc::Fixed64Value* mutable_fixed64_value();
  ::NanoRpc::Fixed64Value* release_fixed64_value();
  void set_allocated_fixed64_value(::NanoRpc::Fixed64Value* fixed64_value);

  // optional .NanoRpc.SFixed32Value sfixed32_value = 11;
  bool has_sfixed32_value() const;
  void clear_sfixed32_value();
  static const int kSfixed32ValueFieldNumber = 11;
  const ::NanoRpc::SFixed32Value& sfixed32_value() const;
  ::NanoRpc::SFixed32Value* mutable_sfixed32_value();
  ::NanoRpc::SFixed32Value* release_sfixed32_value();
  void set_allocated_sfixed32_value(::NanoRpc::SFixed32Value* sfixed32_value);

  // optional .NanoRpc.SFixed64Value sfixed64_value = 12;
  bool has_sfixed64_value() const;
  void clear_sfixed64_value();
  static const int kSfixed64ValueFieldNumber = 12;
  const ::NanoRpc::SFixed64Value& sfixed64_value() const;
  ::NanoRpc::SFixed64Value* mutable_sfixed64_value();
  ::NanoRpc::SFixed64Value* release_sfixed64_value();
  void set_allocated_sfixed64_value(::NanoRpc::SFixed64Value* sfixed64_value);

  // optional .NanoRpc.FloatValue float_value = 13;
  bool has_float_value() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 13;
  const ::NanoRpc::FloatValue& float_value() const;
  ::NanoRpc::FloatValue* mutable_float_value();
  ::NanoRpc::FloatValue* release_float_value();
  void set_allocated_float_value(::NanoRpc::FloatValue* float_value);

  // optional .NanoRpc.DoubleValue double_value = 14;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 14;
  const ::NanoRpc::DoubleValue& double_value() const;
  ::NanoRpc::DoubleValue* mutable_double_value();
  ::NanoRpc::DoubleValue* release_double_value();
  void set_allocated_double_value(::NanoRpc::DoubleValue* double_value);

  // optional .NanoRpc.StringValue string_value = 15;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 15;
  const ::NanoRpc::StringValue& string_value() const;
  ::NanoRpc::StringValue* mutable_string_value();
  ::NanoRpc::StringValue* release_string_value();
  void set_allocated_string_value(::NanoRpc::StringValue* string_value);

  // optional bool is_null = 16;
  void clear_is_null();
  static const int kIsNullFieldNumber = 16;
  bool is_null() const;
  void set_is_null(bool value);

  // optional uint32 object_id_value = 17;
  void clear_object_id_value();
  static const int kObjectIdValueFieldNumber = 17;
  ::google::protobuf::uint32 object_id_value() const;
  void set_object_id_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.RpcParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::NanoRpc::BytesValue* proto_value_;
  ::NanoRpc::BoolValue* bool_value_;
  ::NanoRpc::Int32Value* int32_value_;
  ::NanoRpc::Int64Value* int64_value_;
  ::NanoRpc::UInt32Value* uint32_value_;
  ::NanoRpc::UInt64Value* uint64_value_;
  ::NanoRpc::SInt32Value* sint32_value_;
  ::NanoRpc::SInt64Value* sint64_value_;
  ::NanoRpc::Fixed32Value* fixed32_value_;
  ::NanoRpc::Fixed64Value* fixed64_value_;
  ::NanoRpc::SFixed32Value* sfixed32_value_;
  ::NanoRpc::SFixed64Value* sfixed64_value_;
  ::NanoRpc::FloatValue* float_value_;
  ::NanoRpc::DoubleValue* double_value_;
  ::NanoRpc::StringValue* string_value_;
  bool is_null_;
  ::google::protobuf::uint32 object_id_value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static RpcParameter* default_instance_;
};
// -------------------------------------------------------------------

class RpcResult : public ::google::protobuf::Message {
 public:
  RpcResult();
  virtual ~RpcResult();

  RpcResult(const RpcResult& from);

  inline RpcResult& operator=(const RpcResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResult& default_instance();

  void Swap(RpcResult* other);

  // implements Message ----------------------------------------------

  inline RpcResult* New() const { return New(NULL); }

  RpcResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcResult& from);
  void MergeFrom(const RpcResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NanoRpc.RpcStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::NanoRpc::RpcStatus status() const;
  void set_status(::NanoRpc::RpcStatus value);

  // optional string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // optional .NanoRpc.RpcParameter call_result = 3;
  bool has_call_result() const;
  void clear_call_result();
  static const int kCallResultFieldNumber = 3;
  const ::NanoRpc::RpcParameter& call_result() const;
  ::NanoRpc::RpcParameter* mutable_call_result();
  ::NanoRpc::RpcParameter* release_call_result();
  void set_allocated_call_result(::NanoRpc::RpcParameter* call_result);

  // @@protoc_insertion_point(class_scope:NanoRpc.RpcResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::NanoRpc::RpcParameter* call_result_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static RpcResult* default_instance_;
};
// -------------------------------------------------------------------

class RpcCall : public ::google::protobuf::Message {
 public:
  RpcCall();
  virtual ~RpcCall();

  RpcCall(const RpcCall& from);

  inline RpcCall& operator=(const RpcCall& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcCall& default_instance();

  void Swap(RpcCall* other);

  // implements Message ----------------------------------------------

  inline RpcCall* New() const { return New(NULL); }

  RpcCall* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcCall& from);
  void MergeFrom(const RpcCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcCall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // optional string method = 2;
  void clear_method();
  static const int kMethodFieldNumber = 2;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // repeated .NanoRpc.RpcParameter parameters = 3;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 3;
  const ::NanoRpc::RpcParameter& parameters(int index) const;
  ::NanoRpc::RpcParameter* mutable_parameters(int index);
  ::NanoRpc::RpcParameter* add_parameters();
  ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >*
      mutable_parameters();
  const ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >&
      parameters() const;

  // optional bool expects_result = 4;
  void clear_expects_result();
  static const int kExpectsResultFieldNumber = 4;
  bool expects_result() const;
  void set_expects_result(bool value);

  // optional uint32 object_id = 5;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 5;
  ::google::protobuf::uint32 object_id() const;
  void set_object_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NanoRpc.RpcCall)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter > parameters_;
  bool expects_result_;
  ::google::protobuf::uint32 object_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static RpcCall* default_instance_;
};
// -------------------------------------------------------------------

class RpcMessage : public ::google::protobuf::Message {
 public:
  RpcMessage();
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();

  void Swap(RpcMessage* other);

  // implements Message ----------------------------------------------

  inline RpcMessage* New() const { return New(NULL); }

  RpcMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .NanoRpc.RpcCall call = 2;
  bool has_call() const;
  void clear_call();
  static const int kCallFieldNumber = 2;
  const ::NanoRpc::RpcCall& call() const;
  ::NanoRpc::RpcCall* mutable_call();
  ::NanoRpc::RpcCall* release_call();
  void set_allocated_call(::NanoRpc::RpcCall* call);

  // optional .NanoRpc.RpcResult result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::NanoRpc::RpcResult& result() const;
  ::NanoRpc::RpcResult* mutable_result();
  ::NanoRpc::RpcResult* release_result();
  void set_allocated_result(::NanoRpc::RpcResult* result);

  // @@protoc_insertion_point(class_scope:NanoRpc.RpcMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::NanoRpc::RpcCall* call_;
  ::NanoRpc::RpcResult* result_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RpcMessageTypes_2eproto();
  friend void protobuf_AssignDesc_RpcMessageTypes_2eproto();
  friend void protobuf_ShutdownFile_RpcMessageTypes_2eproto();

  void InitAsDefaultInstance();
  static RpcMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleValue

// optional double value = 1;
inline void DoubleValue::clear_value() {
  value_ = 0;
}
inline double DoubleValue::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.DoubleValue.value)
  return value_;
}
inline void DoubleValue::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.DoubleValue.value)
}

// -------------------------------------------------------------------

// FloatValue

// optional float value = 1;
inline void FloatValue::clear_value() {
  value_ = 0;
}
inline float FloatValue::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.FloatValue.value)
  return value_;
}
inline void FloatValue::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.FloatValue.value)
}

// -------------------------------------------------------------------

// Int64Value

// optional int64 value = 1;
inline void Int64Value::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Int64Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.Int64Value.value)
  return value_;
}
inline void Int64Value::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.Int64Value.value)
}

// -------------------------------------------------------------------

// UInt64Value

// optional uint64 value = 1;
inline void UInt64Value::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UInt64Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.UInt64Value.value)
  return value_;
}
inline void UInt64Value::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.UInt64Value.value)
}

// -------------------------------------------------------------------

// Int32Value

// optional int32 value = 1;
inline void Int32Value::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 Int32Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.Int32Value.value)
  return value_;
}
inline void Int32Value::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.Int32Value.value)
}

// -------------------------------------------------------------------

// UInt32Value

// optional uint32 value = 1;
inline void UInt32Value::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 UInt32Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.UInt32Value.value)
  return value_;
}
inline void UInt32Value::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.UInt32Value.value)
}

// -------------------------------------------------------------------

// BoolValue

// optional bool value = 1;
inline void BoolValue::clear_value() {
  value_ = false;
}
inline bool BoolValue::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.BoolValue.value)
  return value_;
}
inline void BoolValue::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.BoolValue.value)
}

// -------------------------------------------------------------------

// StringValue

// optional string value = 1;
inline void StringValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StringValue::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.StringValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StringValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.StringValue.value)
}
inline void StringValue::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.StringValue.value)
}
inline void StringValue::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.StringValue.value)
}
inline ::std::string* StringValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.StringValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringValue::release_value() {
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StringValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.StringValue.value)
}

// -------------------------------------------------------------------

// BytesValue

// optional bytes value = 1;
inline void BytesValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BytesValue::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.BytesValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BytesValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.BytesValue.value)
}
inline void BytesValue::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.BytesValue.value)
}
inline void BytesValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.BytesValue.value)
}
inline ::std::string* BytesValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.BytesValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BytesValue::release_value() {
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BytesValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.BytesValue.value)
}

// -------------------------------------------------------------------

// SInt32Value

// optional sint32 value = 1;
inline void SInt32Value::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 SInt32Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.SInt32Value.value)
  return value_;
}
inline void SInt32Value::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.SInt32Value.value)
}

// -------------------------------------------------------------------

// SInt64Value

// optional sint64 value = 1;
inline void SInt64Value::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SInt64Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.SInt64Value.value)
  return value_;
}
inline void SInt64Value::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.SInt64Value.value)
}

// -------------------------------------------------------------------

// Fixed32Value

// optional fixed32 value = 1;
inline void Fixed32Value::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 Fixed32Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.Fixed32Value.value)
  return value_;
}
inline void Fixed32Value::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.Fixed32Value.value)
}

// -------------------------------------------------------------------

// Fixed64Value

// optional fixed64 value = 1;
inline void Fixed64Value::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Fixed64Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.Fixed64Value.value)
  return value_;
}
inline void Fixed64Value::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.Fixed64Value.value)
}

// -------------------------------------------------------------------

// SFixed32Value

// optional sfixed32 value = 1;
inline void SFixed32Value::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 SFixed32Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.SFixed32Value.value)
  return value_;
}
inline void SFixed32Value::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.SFixed32Value.value)
}

// -------------------------------------------------------------------

// SFixed64Value

// optional sfixed64 value = 1;
inline void SFixed64Value::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SFixed64Value::value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.SFixed64Value.value)
  return value_;
}
inline void SFixed64Value::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.SFixed64Value.value)
}

// -------------------------------------------------------------------

// RpcParameter

// optional .NanoRpc.BytesValue proto_value = 1;
inline bool RpcParameter::has_proto_value() const {
  return !_is_default_instance_ && proto_value_ != NULL;
}
inline void RpcParameter::clear_proto_value() {
  if (GetArenaNoVirtual() == NULL && proto_value_ != NULL) delete proto_value_;
  proto_value_ = NULL;
}
inline const ::NanoRpc::BytesValue& RpcParameter::proto_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.proto_value)
  return proto_value_ != NULL ? *proto_value_ : *default_instance_->proto_value_;
}
inline ::NanoRpc::BytesValue* RpcParameter::mutable_proto_value() {
  
  if (proto_value_ == NULL) {
    proto_value_ = new ::NanoRpc::BytesValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.proto_value)
  return proto_value_;
}
inline ::NanoRpc::BytesValue* RpcParameter::release_proto_value() {
  
  ::NanoRpc::BytesValue* temp = proto_value_;
  proto_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_proto_value(::NanoRpc::BytesValue* proto_value) {
  delete proto_value_;
  proto_value_ = proto_value;
  if (proto_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.proto_value)
}

// optional .NanoRpc.BoolValue bool_value = 2;
inline bool RpcParameter::has_bool_value() const {
  return !_is_default_instance_ && bool_value_ != NULL;
}
inline void RpcParameter::clear_bool_value() {
  if (GetArenaNoVirtual() == NULL && bool_value_ != NULL) delete bool_value_;
  bool_value_ = NULL;
}
inline const ::NanoRpc::BoolValue& RpcParameter::bool_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.bool_value)
  return bool_value_ != NULL ? *bool_value_ : *default_instance_->bool_value_;
}
inline ::NanoRpc::BoolValue* RpcParameter::mutable_bool_value() {
  
  if (bool_value_ == NULL) {
    bool_value_ = new ::NanoRpc::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.bool_value)
  return bool_value_;
}
inline ::NanoRpc::BoolValue* RpcParameter::release_bool_value() {
  
  ::NanoRpc::BoolValue* temp = bool_value_;
  bool_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_bool_value(::NanoRpc::BoolValue* bool_value) {
  delete bool_value_;
  bool_value_ = bool_value;
  if (bool_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.bool_value)
}

// optional .NanoRpc.Int32Value int32_value = 3;
inline bool RpcParameter::has_int32_value() const {
  return !_is_default_instance_ && int32_value_ != NULL;
}
inline void RpcParameter::clear_int32_value() {
  if (GetArenaNoVirtual() == NULL && int32_value_ != NULL) delete int32_value_;
  int32_value_ = NULL;
}
inline const ::NanoRpc::Int32Value& RpcParameter::int32_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.int32_value)
  return int32_value_ != NULL ? *int32_value_ : *default_instance_->int32_value_;
}
inline ::NanoRpc::Int32Value* RpcParameter::mutable_int32_value() {
  
  if (int32_value_ == NULL) {
    int32_value_ = new ::NanoRpc::Int32Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.int32_value)
  return int32_value_;
}
inline ::NanoRpc::Int32Value* RpcParameter::release_int32_value() {
  
  ::NanoRpc::Int32Value* temp = int32_value_;
  int32_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_int32_value(::NanoRpc::Int32Value* int32_value) {
  delete int32_value_;
  int32_value_ = int32_value;
  if (int32_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.int32_value)
}

// optional .NanoRpc.Int64Value int64_value = 4;
inline bool RpcParameter::has_int64_value() const {
  return !_is_default_instance_ && int64_value_ != NULL;
}
inline void RpcParameter::clear_int64_value() {
  if (GetArenaNoVirtual() == NULL && int64_value_ != NULL) delete int64_value_;
  int64_value_ = NULL;
}
inline const ::NanoRpc::Int64Value& RpcParameter::int64_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.int64_value)
  return int64_value_ != NULL ? *int64_value_ : *default_instance_->int64_value_;
}
inline ::NanoRpc::Int64Value* RpcParameter::mutable_int64_value() {
  
  if (int64_value_ == NULL) {
    int64_value_ = new ::NanoRpc::Int64Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.int64_value)
  return int64_value_;
}
inline ::NanoRpc::Int64Value* RpcParameter::release_int64_value() {
  
  ::NanoRpc::Int64Value* temp = int64_value_;
  int64_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_int64_value(::NanoRpc::Int64Value* int64_value) {
  delete int64_value_;
  int64_value_ = int64_value;
  if (int64_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.int64_value)
}

// optional .NanoRpc.UInt32Value uint32_value = 5;
inline bool RpcParameter::has_uint32_value() const {
  return !_is_default_instance_ && uint32_value_ != NULL;
}
inline void RpcParameter::clear_uint32_value() {
  if (GetArenaNoVirtual() == NULL && uint32_value_ != NULL) delete uint32_value_;
  uint32_value_ = NULL;
}
inline const ::NanoRpc::UInt32Value& RpcParameter::uint32_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.uint32_value)
  return uint32_value_ != NULL ? *uint32_value_ : *default_instance_->uint32_value_;
}
inline ::NanoRpc::UInt32Value* RpcParameter::mutable_uint32_value() {
  
  if (uint32_value_ == NULL) {
    uint32_value_ = new ::NanoRpc::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.uint32_value)
  return uint32_value_;
}
inline ::NanoRpc::UInt32Value* RpcParameter::release_uint32_value() {
  
  ::NanoRpc::UInt32Value* temp = uint32_value_;
  uint32_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_uint32_value(::NanoRpc::UInt32Value* uint32_value) {
  delete uint32_value_;
  uint32_value_ = uint32_value;
  if (uint32_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.uint32_value)
}

// optional .NanoRpc.UInt64Value uint64_value = 6;
inline bool RpcParameter::has_uint64_value() const {
  return !_is_default_instance_ && uint64_value_ != NULL;
}
inline void RpcParameter::clear_uint64_value() {
  if (GetArenaNoVirtual() == NULL && uint64_value_ != NULL) delete uint64_value_;
  uint64_value_ = NULL;
}
inline const ::NanoRpc::UInt64Value& RpcParameter::uint64_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.uint64_value)
  return uint64_value_ != NULL ? *uint64_value_ : *default_instance_->uint64_value_;
}
inline ::NanoRpc::UInt64Value* RpcParameter::mutable_uint64_value() {
  
  if (uint64_value_ == NULL) {
    uint64_value_ = new ::NanoRpc::UInt64Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.uint64_value)
  return uint64_value_;
}
inline ::NanoRpc::UInt64Value* RpcParameter::release_uint64_value() {
  
  ::NanoRpc::UInt64Value* temp = uint64_value_;
  uint64_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_uint64_value(::NanoRpc::UInt64Value* uint64_value) {
  delete uint64_value_;
  uint64_value_ = uint64_value;
  if (uint64_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.uint64_value)
}

// optional .NanoRpc.SInt32Value sint32_value = 7;
inline bool RpcParameter::has_sint32_value() const {
  return !_is_default_instance_ && sint32_value_ != NULL;
}
inline void RpcParameter::clear_sint32_value() {
  if (GetArenaNoVirtual() == NULL && sint32_value_ != NULL) delete sint32_value_;
  sint32_value_ = NULL;
}
inline const ::NanoRpc::SInt32Value& RpcParameter::sint32_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.sint32_value)
  return sint32_value_ != NULL ? *sint32_value_ : *default_instance_->sint32_value_;
}
inline ::NanoRpc::SInt32Value* RpcParameter::mutable_sint32_value() {
  
  if (sint32_value_ == NULL) {
    sint32_value_ = new ::NanoRpc::SInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.sint32_value)
  return sint32_value_;
}
inline ::NanoRpc::SInt32Value* RpcParameter::release_sint32_value() {
  
  ::NanoRpc::SInt32Value* temp = sint32_value_;
  sint32_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_sint32_value(::NanoRpc::SInt32Value* sint32_value) {
  delete sint32_value_;
  sint32_value_ = sint32_value;
  if (sint32_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.sint32_value)
}

// optional .NanoRpc.SInt64Value sint64_value = 8;
inline bool RpcParameter::has_sint64_value() const {
  return !_is_default_instance_ && sint64_value_ != NULL;
}
inline void RpcParameter::clear_sint64_value() {
  if (GetArenaNoVirtual() == NULL && sint64_value_ != NULL) delete sint64_value_;
  sint64_value_ = NULL;
}
inline const ::NanoRpc::SInt64Value& RpcParameter::sint64_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.sint64_value)
  return sint64_value_ != NULL ? *sint64_value_ : *default_instance_->sint64_value_;
}
inline ::NanoRpc::SInt64Value* RpcParameter::mutable_sint64_value() {
  
  if (sint64_value_ == NULL) {
    sint64_value_ = new ::NanoRpc::SInt64Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.sint64_value)
  return sint64_value_;
}
inline ::NanoRpc::SInt64Value* RpcParameter::release_sint64_value() {
  
  ::NanoRpc::SInt64Value* temp = sint64_value_;
  sint64_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_sint64_value(::NanoRpc::SInt64Value* sint64_value) {
  delete sint64_value_;
  sint64_value_ = sint64_value;
  if (sint64_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.sint64_value)
}

// optional .NanoRpc.Fixed32Value fixed32_value = 9;
inline bool RpcParameter::has_fixed32_value() const {
  return !_is_default_instance_ && fixed32_value_ != NULL;
}
inline void RpcParameter::clear_fixed32_value() {
  if (GetArenaNoVirtual() == NULL && fixed32_value_ != NULL) delete fixed32_value_;
  fixed32_value_ = NULL;
}
inline const ::NanoRpc::Fixed32Value& RpcParameter::fixed32_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.fixed32_value)
  return fixed32_value_ != NULL ? *fixed32_value_ : *default_instance_->fixed32_value_;
}
inline ::NanoRpc::Fixed32Value* RpcParameter::mutable_fixed32_value() {
  
  if (fixed32_value_ == NULL) {
    fixed32_value_ = new ::NanoRpc::Fixed32Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.fixed32_value)
  return fixed32_value_;
}
inline ::NanoRpc::Fixed32Value* RpcParameter::release_fixed32_value() {
  
  ::NanoRpc::Fixed32Value* temp = fixed32_value_;
  fixed32_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_fixed32_value(::NanoRpc::Fixed32Value* fixed32_value) {
  delete fixed32_value_;
  fixed32_value_ = fixed32_value;
  if (fixed32_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.fixed32_value)
}

// optional .NanoRpc.Fixed64Value fixed64_value = 10;
inline bool RpcParameter::has_fixed64_value() const {
  return !_is_default_instance_ && fixed64_value_ != NULL;
}
inline void RpcParameter::clear_fixed64_value() {
  if (GetArenaNoVirtual() == NULL && fixed64_value_ != NULL) delete fixed64_value_;
  fixed64_value_ = NULL;
}
inline const ::NanoRpc::Fixed64Value& RpcParameter::fixed64_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.fixed64_value)
  return fixed64_value_ != NULL ? *fixed64_value_ : *default_instance_->fixed64_value_;
}
inline ::NanoRpc::Fixed64Value* RpcParameter::mutable_fixed64_value() {
  
  if (fixed64_value_ == NULL) {
    fixed64_value_ = new ::NanoRpc::Fixed64Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.fixed64_value)
  return fixed64_value_;
}
inline ::NanoRpc::Fixed64Value* RpcParameter::release_fixed64_value() {
  
  ::NanoRpc::Fixed64Value* temp = fixed64_value_;
  fixed64_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_fixed64_value(::NanoRpc::Fixed64Value* fixed64_value) {
  delete fixed64_value_;
  fixed64_value_ = fixed64_value;
  if (fixed64_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.fixed64_value)
}

// optional .NanoRpc.SFixed32Value sfixed32_value = 11;
inline bool RpcParameter::has_sfixed32_value() const {
  return !_is_default_instance_ && sfixed32_value_ != NULL;
}
inline void RpcParameter::clear_sfixed32_value() {
  if (GetArenaNoVirtual() == NULL && sfixed32_value_ != NULL) delete sfixed32_value_;
  sfixed32_value_ = NULL;
}
inline const ::NanoRpc::SFixed32Value& RpcParameter::sfixed32_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.sfixed32_value)
  return sfixed32_value_ != NULL ? *sfixed32_value_ : *default_instance_->sfixed32_value_;
}
inline ::NanoRpc::SFixed32Value* RpcParameter::mutable_sfixed32_value() {
  
  if (sfixed32_value_ == NULL) {
    sfixed32_value_ = new ::NanoRpc::SFixed32Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.sfixed32_value)
  return sfixed32_value_;
}
inline ::NanoRpc::SFixed32Value* RpcParameter::release_sfixed32_value() {
  
  ::NanoRpc::SFixed32Value* temp = sfixed32_value_;
  sfixed32_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_sfixed32_value(::NanoRpc::SFixed32Value* sfixed32_value) {
  delete sfixed32_value_;
  sfixed32_value_ = sfixed32_value;
  if (sfixed32_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.sfixed32_value)
}

// optional .NanoRpc.SFixed64Value sfixed64_value = 12;
inline bool RpcParameter::has_sfixed64_value() const {
  return !_is_default_instance_ && sfixed64_value_ != NULL;
}
inline void RpcParameter::clear_sfixed64_value() {
  if (GetArenaNoVirtual() == NULL && sfixed64_value_ != NULL) delete sfixed64_value_;
  sfixed64_value_ = NULL;
}
inline const ::NanoRpc::SFixed64Value& RpcParameter::sfixed64_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.sfixed64_value)
  return sfixed64_value_ != NULL ? *sfixed64_value_ : *default_instance_->sfixed64_value_;
}
inline ::NanoRpc::SFixed64Value* RpcParameter::mutable_sfixed64_value() {
  
  if (sfixed64_value_ == NULL) {
    sfixed64_value_ = new ::NanoRpc::SFixed64Value;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.sfixed64_value)
  return sfixed64_value_;
}
inline ::NanoRpc::SFixed64Value* RpcParameter::release_sfixed64_value() {
  
  ::NanoRpc::SFixed64Value* temp = sfixed64_value_;
  sfixed64_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_sfixed64_value(::NanoRpc::SFixed64Value* sfixed64_value) {
  delete sfixed64_value_;
  sfixed64_value_ = sfixed64_value;
  if (sfixed64_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.sfixed64_value)
}

// optional .NanoRpc.FloatValue float_value = 13;
inline bool RpcParameter::has_float_value() const {
  return !_is_default_instance_ && float_value_ != NULL;
}
inline void RpcParameter::clear_float_value() {
  if (GetArenaNoVirtual() == NULL && float_value_ != NULL) delete float_value_;
  float_value_ = NULL;
}
inline const ::NanoRpc::FloatValue& RpcParameter::float_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.float_value)
  return float_value_ != NULL ? *float_value_ : *default_instance_->float_value_;
}
inline ::NanoRpc::FloatValue* RpcParameter::mutable_float_value() {
  
  if (float_value_ == NULL) {
    float_value_ = new ::NanoRpc::FloatValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.float_value)
  return float_value_;
}
inline ::NanoRpc::FloatValue* RpcParameter::release_float_value() {
  
  ::NanoRpc::FloatValue* temp = float_value_;
  float_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_float_value(::NanoRpc::FloatValue* float_value) {
  delete float_value_;
  float_value_ = float_value;
  if (float_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.float_value)
}

// optional .NanoRpc.DoubleValue double_value = 14;
inline bool RpcParameter::has_double_value() const {
  return !_is_default_instance_ && double_value_ != NULL;
}
inline void RpcParameter::clear_double_value() {
  if (GetArenaNoVirtual() == NULL && double_value_ != NULL) delete double_value_;
  double_value_ = NULL;
}
inline const ::NanoRpc::DoubleValue& RpcParameter::double_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.double_value)
  return double_value_ != NULL ? *double_value_ : *default_instance_->double_value_;
}
inline ::NanoRpc::DoubleValue* RpcParameter::mutable_double_value() {
  
  if (double_value_ == NULL) {
    double_value_ = new ::NanoRpc::DoubleValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.double_value)
  return double_value_;
}
inline ::NanoRpc::DoubleValue* RpcParameter::release_double_value() {
  
  ::NanoRpc::DoubleValue* temp = double_value_;
  double_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_double_value(::NanoRpc::DoubleValue* double_value) {
  delete double_value_;
  double_value_ = double_value;
  if (double_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.double_value)
}

// optional .NanoRpc.StringValue string_value = 15;
inline bool RpcParameter::has_string_value() const {
  return !_is_default_instance_ && string_value_ != NULL;
}
inline void RpcParameter::clear_string_value() {
  if (GetArenaNoVirtual() == NULL && string_value_ != NULL) delete string_value_;
  string_value_ = NULL;
}
inline const ::NanoRpc::StringValue& RpcParameter::string_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.string_value)
  return string_value_ != NULL ? *string_value_ : *default_instance_->string_value_;
}
inline ::NanoRpc::StringValue* RpcParameter::mutable_string_value() {
  
  if (string_value_ == NULL) {
    string_value_ = new ::NanoRpc::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcParameter.string_value)
  return string_value_;
}
inline ::NanoRpc::StringValue* RpcParameter::release_string_value() {
  
  ::NanoRpc::StringValue* temp = string_value_;
  string_value_ = NULL;
  return temp;
}
inline void RpcParameter::set_allocated_string_value(::NanoRpc::StringValue* string_value) {
  delete string_value_;
  string_value_ = string_value;
  if (string_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcParameter.string_value)
}

// optional bool is_null = 16;
inline void RpcParameter::clear_is_null() {
  is_null_ = false;
}
inline bool RpcParameter::is_null() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.is_null)
  return is_null_;
}
inline void RpcParameter::set_is_null(bool value) {
  
  is_null_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcParameter.is_null)
}

// optional uint32 object_id_value = 17;
inline void RpcParameter::clear_object_id_value() {
  object_id_value_ = 0u;
}
inline ::google::protobuf::uint32 RpcParameter::object_id_value() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcParameter.object_id_value)
  return object_id_value_;
}
inline void RpcParameter::set_object_id_value(::google::protobuf::uint32 value) {
  
  object_id_value_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcParameter.object_id_value)
}

// -------------------------------------------------------------------

// RpcResult

// optional .NanoRpc.RpcStatus status = 1;
inline void RpcResult::clear_status() {
  status_ = 0;
}
inline ::NanoRpc::RpcStatus RpcResult::status() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcResult.status)
  return static_cast< ::NanoRpc::RpcStatus >(status_);
}
inline void RpcResult::set_status(::NanoRpc::RpcStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcResult.status)
}

// optional string error_message = 2;
inline void RpcResult::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcResult::error_message() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcResult.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcResult::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcResult.error_message)
}
inline void RpcResult::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcResult.error_message)
}
inline void RpcResult::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcResult.error_message)
}
inline ::std::string* RpcResult::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcResult.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcResult::release_error_message() {
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcResult::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcResult.error_message)
}

// optional .NanoRpc.RpcParameter call_result = 3;
inline bool RpcResult::has_call_result() const {
  return !_is_default_instance_ && call_result_ != NULL;
}
inline void RpcResult::clear_call_result() {
  if (GetArenaNoVirtual() == NULL && call_result_ != NULL) delete call_result_;
  call_result_ = NULL;
}
inline const ::NanoRpc::RpcParameter& RpcResult::call_result() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcResult.call_result)
  return call_result_ != NULL ? *call_result_ : *default_instance_->call_result_;
}
inline ::NanoRpc::RpcParameter* RpcResult::mutable_call_result() {
  
  if (call_result_ == NULL) {
    call_result_ = new ::NanoRpc::RpcParameter;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcResult.call_result)
  return call_result_;
}
inline ::NanoRpc::RpcParameter* RpcResult::release_call_result() {
  
  ::NanoRpc::RpcParameter* temp = call_result_;
  call_result_ = NULL;
  return temp;
}
inline void RpcResult::set_allocated_call_result(::NanoRpc::RpcParameter* call_result) {
  delete call_result_;
  call_result_ = call_result;
  if (call_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcResult.call_result)
}

// -------------------------------------------------------------------

// RpcCall

// optional string service = 1;
inline void RpcCall::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcCall::service() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcCall::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.service)
}
inline void RpcCall::set_service(const char* value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcCall.service)
}
inline void RpcCall::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcCall.service)
}
inline ::std::string* RpcCall::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcCall.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcCall::release_service() {
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcCall::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcCall.service)
}

// optional string method = 2;
inline void RpcCall::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcCall::method() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcCall::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.method)
}
inline void RpcCall::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoRpc.RpcCall.method)
}
inline void RpcCall::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoRpc.RpcCall.method)
}
inline ::std::string* RpcCall::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcCall.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcCall::release_method() {
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcCall::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcCall.method)
}

// repeated .NanoRpc.RpcParameter parameters = 3;
inline int RpcCall::parameters_size() const {
  return parameters_.size();
}
inline void RpcCall::clear_parameters() {
  parameters_.Clear();
}
inline const ::NanoRpc::RpcParameter& RpcCall::parameters(int index) const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.parameters)
  return parameters_.Get(index);
}
inline ::NanoRpc::RpcParameter* RpcCall::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcCall.parameters)
  return parameters_.Mutable(index);
}
inline ::NanoRpc::RpcParameter* RpcCall::add_parameters() {
  // @@protoc_insertion_point(field_add:NanoRpc.RpcCall.parameters)
  return parameters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >*
RpcCall::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:NanoRpc.RpcCall.parameters)
  return &parameters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NanoRpc::RpcParameter >&
RpcCall::parameters() const {
  // @@protoc_insertion_point(field_list:NanoRpc.RpcCall.parameters)
  return parameters_;
}

// optional bool expects_result = 4;
inline void RpcCall::clear_expects_result() {
  expects_result_ = false;
}
inline bool RpcCall::expects_result() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.expects_result)
  return expects_result_;
}
inline void RpcCall::set_expects_result(bool value) {
  
  expects_result_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.expects_result)
}

// optional uint32 object_id = 5;
inline void RpcCall::clear_object_id() {
  object_id_ = 0u;
}
inline ::google::protobuf::uint32 RpcCall::object_id() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcCall.object_id)
  return object_id_;
}
inline void RpcCall::set_object_id(::google::protobuf::uint32 value) {
  
  object_id_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcCall.object_id)
}

// -------------------------------------------------------------------

// RpcMessage

// optional int32 id = 1;
inline void RpcMessage::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 RpcMessage::id() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcMessage.id)
  return id_;
}
inline void RpcMessage::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NanoRpc.RpcMessage.id)
}

// optional .NanoRpc.RpcCall call = 2;
inline bool RpcMessage::has_call() const {
  return !_is_default_instance_ && call_ != NULL;
}
inline void RpcMessage::clear_call() {
  if (GetArenaNoVirtual() == NULL && call_ != NULL) delete call_;
  call_ = NULL;
}
inline const ::NanoRpc::RpcCall& RpcMessage::call() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcMessage.call)
  return call_ != NULL ? *call_ : *default_instance_->call_;
}
inline ::NanoRpc::RpcCall* RpcMessage::mutable_call() {
  
  if (call_ == NULL) {
    call_ = new ::NanoRpc::RpcCall;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcMessage.call)
  return call_;
}
inline ::NanoRpc::RpcCall* RpcMessage::release_call() {
  
  ::NanoRpc::RpcCall* temp = call_;
  call_ = NULL;
  return temp;
}
inline void RpcMessage::set_allocated_call(::NanoRpc::RpcCall* call) {
  delete call_;
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcMessage.call)
}

// optional .NanoRpc.RpcResult result = 3;
inline bool RpcMessage::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
inline void RpcMessage::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
inline const ::NanoRpc::RpcResult& RpcMessage::result() const {
  // @@protoc_insertion_point(field_get:NanoRpc.RpcMessage.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::NanoRpc::RpcResult* RpcMessage::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::NanoRpc::RpcResult;
  }
  // @@protoc_insertion_point(field_mutable:NanoRpc.RpcMessage.result)
  return result_;
}
inline ::NanoRpc::RpcResult* RpcMessage::release_result() {
  
  ::NanoRpc::RpcResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RpcMessage::set_allocated_result(::NanoRpc::RpcResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NanoRpc.RpcMessage.result)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NanoRpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NanoRpc::RpcStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NanoRpc::RpcStatus>() {
  return ::NanoRpc::RpcStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RpcMessageTypes_2eproto__INCLUDED
