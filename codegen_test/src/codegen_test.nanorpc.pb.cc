// Generated by the nanorpc protobuf plugin.
// If you make any local change, they will be lost.
// source: codegen_test.proto

#include "codegen_test.nanorpc.pb.h"
#include "google/protobuf/wrappers.pb.h"

namespace codegen_test {

const std::string TestServiceInteface_Stub::kServiceName("codegen_test.TestServiceInteface");

const std::string &TestServiceInteface_Stub::GetInterfaceName() const {
  return kServiceName;
}

bool TestServiceInteface_Stub::CallMethod(const nanorpc::RpcCall &rpc_call, nanorpc::RpcResult *rpc_result) {
  if (rpc_call.method() == "Method_V_V") {
    impl_->Method_V_V(nullptr);
    return true;
  } else if (rpc_call.method() == "Method_V_b") {
    google::protobuf::BoolValue in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    bool value = in_arg__.value();

    impl_->Method_V_b(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_i") {
    google::protobuf::Int32Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    int32_t value = in_arg__.value();

    impl_->Method_V_i(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_u") {
    google::protobuf::UInt32Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    uint32_t value = in_arg__.value();

    impl_->Method_V_u(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_s") {
    nanorpc::SInt32Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    int32_t value = in_arg__.value();

    impl_->Method_V_s(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_I") {
    google::protobuf::Int64Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    int64_t value = in_arg__.value();

    impl_->Method_V_I(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_U") {
    google::protobuf::UInt64Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    uint64_t value = in_arg__.value();

    impl_->Method_V_U(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_S") {
    nanorpc::SInt64Value in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    int64_t value = in_arg__.value();

    impl_->Method_V_S(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_f") {
    google::protobuf::FloatValue in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    float value = in_arg__.value();

    impl_->Method_V_f(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_d") {
    google::protobuf::DoubleValue in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    double value = in_arg__.value();

    impl_->Method_V_d(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_E") {
    EnumType_wrapper__ in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    EnumType value = in_arg__.value();

    impl_->Method_V_E(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_A") {
    google::protobuf::StringValue in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    const std::string &value = in_arg__.value();

    impl_->Method_V_A(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_W") {
    nanorpc::WideStringValue in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    const std::string &value = in_arg__.value();

    impl_->Method_V_W(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_V_M") {
    StructType in_arg__;

    in_arg__.ParseFromString(rpc_call.call_data());
    const StructType &value = in_arg__;

    impl_->Method_V_M(nullptr, value);
    return true;
  } else if (rpc_call.method() == "Method_b_V") {
    bool out__;
    google::protobuf::BoolValue out_pb__;
    out__ = impl_->Method_b_V(nullptr);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_i_V") {
    int32_t out__;
    google::protobuf::Int32Value out_pb__;
    out__ = impl_->Method_i_V(nullptr);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_u_V") {
    uint32_t out__;
    google::protobuf::UInt32Value out_pb__;
    out__ = impl_->Method_u_V(nullptr);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_s_V") {
    int32_t out__;
    nanorpc::SInt32Value out_pb__;
    out__ = impl_->Method_s_V(nullptr);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_I_V") {
    int64_t out__;
    google::protobuf::Int64Value out_pb__;
    out__ = impl_->Method_I_V(nullptr);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_U_V") {
    uint64_t out__;
    google::protobuf::UInt64Value out_pb__;
    out__ = impl_->Method_U_V(nullptr);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_S_V") {
    int64_t out__;
    nanorpc::SInt64Value out_pb__;
    out__ = impl_->Method_S_V(nullptr);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_f_V") {
    float out__;
    google::protobuf::FloatValue out_pb__;
    out__ = impl_->Method_f_V(nullptr);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_d_V") {
    double out__;
    google::protobuf::DoubleValue out_pb__;
    out__ = impl_->Method_d_V(nullptr);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_E_V") {
    EnumType out__;
    EnumType_wrapper__ out_pb__;
    out__ = impl_->Method_E_V(nullptr);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_A_V") {
    std::string out__;
    google::protobuf::StringValue out_pb__;
    impl_->Method_A_V(nullptr, &out__);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_W_V") {
    std::string out__;
    nanorpc::WideStringValue out_pb__;
    impl_->Method_W_V(nullptr, &out__);

    out_pb__.set_value(out__);
    out_pb__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_M_V") {
    StructType out__;
    impl_->Method_M_V(nullptr, &out__);

    out__.SerializeToString(rpc_result->mutable_result_data());
    return true;
  } else if (rpc_call.method() == "Method_V_biuIUsSfdEAWM") {
    Method_V_biuIUsSfdEAWM_args__ args__;
    args__.ParseFromString(rpc_call.call_data());

    bool bool_value = args__.bool_value();
    int32_t int32_value = args__.int32_value();
    uint32_t uint32_value = args__.uint32_value();
    int64_t int64_value = args__.int64_value();
    uint64_t uint64_value = args__.uint64_value();
    int32_t sint32_value = args__.sint32_value();
    int64_t sint64_value = args__.sint64_value();
    float float_value = args__.float_value();
    double double_value = args__.double_value();
    EnumType enum_value = args__.enum_value();
    const std::string &string_value = args__.string_value();
    const std::string &wstring_value = args__.wstring_value();
    const StructType &struct_value = args__.struct_value();

    impl_->Method_V_biuIUsSfdEAWM(nullptr, bool_value, int32_value, uint32_value, int64_value, uint64_value, sint32_value, sint64_value, float_value, double_value, enum_value, string_value, wstring_value, struct_value);
    return true;
  } else if (rpc_call.method() == "AsyncMethod_V_V") {
    impl_->AsyncMethod_V_V(nullptr);
    return false;
  }

  // TODO: Here should be unknown method error stored into rpc_result.
  // TODO: Also an exception (code above must be guarded) result.

  return true;
}

TestServiceInteface_Proxy::~TestServiceInteface_Proxy() {
  if (object_id_ != 0) {
    try {
      nanorpc::RpcCall rpc_call;
      rpc_call.set_service("NanoRpc.ObjectManagerService");
      rpc_call.set_method("Delete");
      nanorpc::RpcObject rpc_object;
      rpc_object.set_object_id(object_id_);
      rpc_object.SerializeToString(rpc_call.mutable_call_data());
      client_->CallMethod(rpc_call, nullptr);
    }
    catch (...) {
      // not yet supported
    }
  }
}

void TestServiceInteface_Proxy::Method_V_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_b(bool value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_b");
  google::protobuf::BoolValue in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_i(int32_t value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_i");
  google::protobuf::Int32Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_u(uint32_t value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_u");
  google::protobuf::UInt32Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_s(int32_t value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_s");
  nanorpc::SInt32Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_I(int64_t value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_I");
  google::protobuf::Int64Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_U(uint64_t value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_U");
  google::protobuf::UInt64Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_S(int64_t value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_S");
  nanorpc::SInt64Value in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_f(float value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_f");
  google::protobuf::FloatValue in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_d(double value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_d");
  google::protobuf::DoubleValue in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_E(EnumType value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_E");
  EnumType_wrapper__ in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_A(const std::string &value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_A");
  google::protobuf::StringValue in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_W(const std::string &value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_W");
  nanorpc::WideStringValue in_arg__;

  in_arg__.set_value(value);

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::Method_V_M(const StructType &value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_M");
  const StructType &in_arg__ = value;

  in_arg__.SerializeToString(rpc_call__.mutable_call_data());
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

bool TestServiceInteface_Proxy::Method_b_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_b_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  google::protobuf::BoolValue out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

int32_t TestServiceInteface_Proxy::Method_i_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_i_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  google::protobuf::Int32Value out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

uint32_t TestServiceInteface_Proxy::Method_u_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_u_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  google::protobuf::UInt32Value out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

int32_t TestServiceInteface_Proxy::Method_s_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_s_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  nanorpc::SInt32Value out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

int64_t TestServiceInteface_Proxy::Method_I_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_I_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  google::protobuf::Int64Value out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

uint64_t TestServiceInteface_Proxy::Method_U_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_U_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  google::protobuf::UInt64Value out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

int64_t TestServiceInteface_Proxy::Method_S_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_S_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  nanorpc::SInt64Value out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

float TestServiceInteface_Proxy::Method_f_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_f_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  google::protobuf::FloatValue out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

double TestServiceInteface_Proxy::Method_d_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_d_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  google::protobuf::DoubleValue out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

EnumType TestServiceInteface_Proxy::Method_E_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_E_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  EnumType_wrapper__ out_pb__;
  out_pb__.ParseFromString(rpc_result__.result_data());
  return out_pb__.value();
}

void TestServiceInteface_Proxy::Method_A_V(std::string *out__) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_A_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  if (out__ != nullptr) {
    google::protobuf::StringValue out_pb__;
    out_pb__.ParseFromString(rpc_result__.result_data());
    *out__ = out_pb__.value();
  }
}

void TestServiceInteface_Proxy::Method_W_V(std::string *out__) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_W_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  if (out__ != nullptr) {
    nanorpc::WideStringValue out_pb__;
    out_pb__.ParseFromString(rpc_result__.result_data());
    *out__ = out_pb__.value();
  }
}

void TestServiceInteface_Proxy::Method_M_V(StructType *out__) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_M_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
  if (out__ != nullptr)
    out__->ParseFromString(rpc_result__.result_data());
}

void TestServiceInteface_Proxy::Method_V_biuIUsSfdEAWM(bool bool_value, int32_t int32_value, uint32_t uint32_value, int64_t int64_value, uint64_t uint64_value, int32_t sint32_value, int64_t sint64_value, float float_value, double double_value, EnumType enum_value, const std::string &string_value, const std::string &wstring_value, const StructType &struct_value) {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("Method_V_biuIUsSfdEAWM");
  Method_V_biuIUsSfdEAWM_args__ args__;
  args__.set_bool_value(bool_value);
  args__.set_int32_value(int32_value);
  args__.set_uint32_value(uint32_value);
  args__.set_int64_value(int64_value);
  args__.set_uint64_value(uint64_value);
  args__.set_sint32_value(sint32_value);
  args__.set_sint64_value(sint64_value);
  args__.set_float_value(float_value);
  args__.set_double_value(double_value);
  args__.set_enum_value(enum_value);
  args__.set_string_value(string_value);
  args__.set_wstring_value(wstring_value);
  *args__.mutable_struct_value() = struct_value;
  args__.SerializeToString(rpc_call__.mutable_call_data());

  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

void TestServiceInteface_Proxy::AsyncMethod_V_V() {
  nanorpc::RpcCall rpc_call__;
  if (object_id_ != 0) {
    rpc_call__.set_object_id(object_id_);
  } else {
    rpc_call__.set_service("codegen_test.TestServiceInteface");
  }

  rpc_call__.set_method("AsyncMethod_V_V");
  nanorpc::RpcResult rpc_result__;
  client_->CallMethod(rpc_call__, &rpc_result__);
}

}  // namespace codegen_test


